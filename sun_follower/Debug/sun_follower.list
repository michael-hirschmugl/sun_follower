
sun_follower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002808  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080028c8  080028c8  000128c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002900  08002900  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002900  08002900  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002900  08002900  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002900  08002900  00012900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002904  08002904  00012904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  08002914  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08002914  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ecff  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e7d  00000000  00000000  0002ed76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  00030bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b4f  00000000  00000000  00031a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010302  00000000  00000000  0003257f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001168b  00000000  00000000  00042881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00064578  00000000  00000000  00053f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033f4  00000000  00000000  000b8484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000bb878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080028b0 	.word	0x080028b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080028b0 	.word	0x080028b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fba4 	bl	8000970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f810 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f90c 	bl	8000448 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f870 	bl	8000314 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000234:	f000 f8d8 	bl	80003e8 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8000238:	f000 f8ac 	bl	8000394 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 800023c:	4b02      	ldr	r3, [pc, #8]	; (8000248 <main+0x28>)
 800023e:	0018      	movs	r0, r3
 8000240:	f001 fd5c 	bl	8001cfc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000244:	e7fe      	b.n	8000244 <main+0x24>
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	2000007c 	.word	0x2000007c

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b095      	sub	sp, #84	; 0x54
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	2420      	movs	r4, #32
 8000254:	193b      	adds	r3, r7, r4
 8000256:	0018      	movs	r0, r3
 8000258:	2330      	movs	r3, #48	; 0x30
 800025a:	001a      	movs	r2, r3
 800025c:	2100      	movs	r1, #0
 800025e:	f002 fafb 	bl	8002858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000262:	2310      	movs	r3, #16
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	0018      	movs	r0, r3
 8000268:	2310      	movs	r3, #16
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f002 faf3 	bl	8002858 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000272:	003b      	movs	r3, r7
 8000274:	0018      	movs	r0, r3
 8000276:	2310      	movs	r3, #16
 8000278:	001a      	movs	r2, r3
 800027a:	2100      	movs	r1, #0
 800027c:	f002 faec 	bl	8002858 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000280:	0021      	movs	r1, r4
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2202      	movs	r2, #2
 8000286:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2201      	movs	r2, #1
 800028c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2210      	movs	r2, #16
 8000292:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2202      	movs	r2, #2
 8000298:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	22a0      	movs	r2, #160	; 0xa0
 80002a4:	0392      	lsls	r2, r2, #14
 80002a6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2200      	movs	r2, #0
 80002ac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 ffa7 	bl	8001204 <HAL_RCC_OscConfig>
 80002b6:	1e03      	subs	r3, r0, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002ba:	f000 fa03 	bl	80006c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	2110      	movs	r1, #16
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2207      	movs	r2, #7
 80002c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2202      	movs	r2, #2
 80002ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2200      	movs	r2, #0
 80002d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2200      	movs	r2, #0
 80002d6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2101      	movs	r1, #1
 80002dc:	0018      	movs	r0, r3
 80002de:	f001 faab 	bl	8001838 <HAL_RCC_ClockConfig>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80002e6:	f000 f9ed 	bl	80006c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80002ea:	003b      	movs	r3, r7
 80002ec:	2221      	movs	r2, #33	; 0x21
 80002ee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002f0:	003b      	movs	r3, r7
 80002f2:	2200      	movs	r2, #0
 80002f4:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002f6:	003b      	movs	r3, r7
 80002f8:	2200      	movs	r2, #0
 80002fa:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fc:	003b      	movs	r3, r7
 80002fe:	0018      	movs	r0, r3
 8000300:	f001 fbde 	bl	8001ac0 <HAL_RCCEx_PeriphCLKConfig>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000308:	f000 f9dc 	bl	80006c4 <Error_Handler>
  }
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b015      	add	sp, #84	; 0x54
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <MX_I2C1_Init+0x74>)
 800031a:	4a1c      	ldr	r2, [pc, #112]	; (800038c <MX_I2C1_Init+0x78>)
 800031c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800031e:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <MX_I2C1_Init+0x74>)
 8000320:	4a1b      	ldr	r2, [pc, #108]	; (8000390 <MX_I2C1_Init+0x7c>)
 8000322:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000324:	4b18      	ldr	r3, [pc, #96]	; (8000388 <MX_I2C1_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <MX_I2C1_Init+0x74>)
 800032c:	2201      	movs	r2, #1
 800032e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000330:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_I2C1_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <MX_I2C1_Init+0x74>)
 8000338:	2200      	movs	r2, #0
 800033a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800033c:	4b12      	ldr	r3, [pc, #72]	; (8000388 <MX_I2C1_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000342:	4b11      	ldr	r3, [pc, #68]	; (8000388 <MX_I2C1_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_I2C1_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_I2C1_Init+0x74>)
 8000350:	0018      	movs	r0, r3
 8000352:	f000 fe29 	bl	8000fa8 <HAL_I2C_Init>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800035a:	f000 f9b3 	bl	80006c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800035e:	4b0a      	ldr	r3, [pc, #40]	; (8000388 <MX_I2C1_Init+0x74>)
 8000360:	2100      	movs	r1, #0
 8000362:	0018      	movs	r0, r3
 8000364:	f000 feb6 	bl	80010d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000368:	1e03      	subs	r3, r0, #0
 800036a:	d001      	beq.n	8000370 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800036c:	f000 f9aa 	bl	80006c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <MX_I2C1_Init+0x74>)
 8000372:	2100      	movs	r1, #0
 8000374:	0018      	movs	r0, r3
 8000376:	f000 fef9 	bl	800116c <HAL_I2CEx_ConfigDigitalFilter>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800037e:	f000 f9a1 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000028 	.word	0x20000028
 800038c:	40005400 	.word	0x40005400
 8000390:	2000090e 	.word	0x2000090e

08000394 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_TIM16_Init+0x44>)
 800039a:	4a10      	ldr	r2, [pc, #64]	; (80003dc <MX_TIM16_Init+0x48>)
 800039c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000-1;
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <MX_TIM16_Init+0x44>)
 80003a0:	4a0f      	ldr	r2, [pc, #60]	; (80003e0 <MX_TIM16_Init+0x4c>)
 80003a2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <MX_TIM16_Init+0x44>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <MX_TIM16_Init+0x44>)
 80003ac:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <MX_TIM16_Init+0x50>)
 80003ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <MX_TIM16_Init+0x44>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <MX_TIM16_Init+0x44>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <MX_TIM16_Init+0x44>)
 80003be:	2200      	movs	r2, #0
 80003c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80003c2:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <MX_TIM16_Init+0x44>)
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 fc49 	bl	8001c5c <HAL_TIM_Base_Init>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80003ce:	f000 f979 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80003d2:	46c0      	nop			; (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	2000007c 	.word	0x2000007c
 80003dc:	40014400 	.word	0x40014400
 80003e0:	0000bb7f 	.word	0x0000bb7f
 80003e4:	000003e7 	.word	0x000003e7

080003e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003ec:	4b14      	ldr	r3, [pc, #80]	; (8000440 <MX_USART1_UART_Init+0x58>)
 80003ee:	4a15      	ldr	r2, [pc, #84]	; (8000444 <MX_USART1_UART_Init+0x5c>)
 80003f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80003f2:	4b13      	ldr	r3, [pc, #76]	; (8000440 <MX_USART1_UART_Init+0x58>)
 80003f4:	2296      	movs	r2, #150	; 0x96
 80003f6:	0212      	lsls	r2, r2, #8
 80003f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003fa:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_USART1_UART_Init+0x58>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MX_USART1_UART_Init+0x58>)
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_USART1_UART_Init+0x58>)
 8000408:	2200      	movs	r2, #0
 800040a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800040c:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_USART1_UART_Init+0x58>)
 800040e:	220c      	movs	r2, #12
 8000410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000412:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <MX_USART1_UART_Init+0x58>)
 8000414:	2200      	movs	r2, #0
 8000416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000418:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_USART1_UART_Init+0x58>)
 800041a:	2200      	movs	r2, #0
 800041c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <MX_USART1_UART_Init+0x58>)
 8000420:	2200      	movs	r2, #0
 8000422:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <MX_USART1_UART_Init+0x58>)
 8000426:	2200      	movs	r2, #0
 8000428:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800042a:	4b05      	ldr	r3, [pc, #20]	; (8000440 <MX_USART1_UART_Init+0x58>)
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fe6d 	bl	800210c <HAL_UART_Init>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d001      	beq.n	800043a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000436:	f000 f945 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	200000c4 	.word	0x200000c4
 8000444:	40013800 	.word	0x40013800

08000448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b089      	sub	sp, #36	; 0x24
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	240c      	movs	r4, #12
 8000450:	193b      	adds	r3, r7, r4
 8000452:	0018      	movs	r0, r3
 8000454:	2314      	movs	r3, #20
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f002 f9fd 	bl	8002858 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045e:	4b63      	ldr	r3, [pc, #396]	; (80005ec <MX_GPIO_Init+0x1a4>)
 8000460:	695a      	ldr	r2, [r3, #20]
 8000462:	4b62      	ldr	r3, [pc, #392]	; (80005ec <MX_GPIO_Init+0x1a4>)
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	03c9      	lsls	r1, r1, #15
 8000468:	430a      	orrs	r2, r1
 800046a:	615a      	str	r2, [r3, #20]
 800046c:	4b5f      	ldr	r3, [pc, #380]	; (80005ec <MX_GPIO_Init+0x1a4>)
 800046e:	695a      	ldr	r2, [r3, #20]
 8000470:	2380      	movs	r3, #128	; 0x80
 8000472:	03db      	lsls	r3, r3, #15
 8000474:	4013      	ands	r3, r2
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047a:	4b5c      	ldr	r3, [pc, #368]	; (80005ec <MX_GPIO_Init+0x1a4>)
 800047c:	695a      	ldr	r2, [r3, #20]
 800047e:	4b5b      	ldr	r3, [pc, #364]	; (80005ec <MX_GPIO_Init+0x1a4>)
 8000480:	2180      	movs	r1, #128	; 0x80
 8000482:	0289      	lsls	r1, r1, #10
 8000484:	430a      	orrs	r2, r1
 8000486:	615a      	str	r2, [r3, #20]
 8000488:	4b58      	ldr	r3, [pc, #352]	; (80005ec <MX_GPIO_Init+0x1a4>)
 800048a:	695a      	ldr	r2, [r3, #20]
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	029b      	lsls	r3, r3, #10
 8000490:	4013      	ands	r3, r2
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000496:	4b55      	ldr	r3, [pc, #340]	; (80005ec <MX_GPIO_Init+0x1a4>)
 8000498:	695a      	ldr	r2, [r3, #20]
 800049a:	4b54      	ldr	r3, [pc, #336]	; (80005ec <MX_GPIO_Init+0x1a4>)
 800049c:	2180      	movs	r1, #128	; 0x80
 800049e:	02c9      	lsls	r1, r1, #11
 80004a0:	430a      	orrs	r2, r1
 80004a2:	615a      	str	r2, [r3, #20]
 80004a4:	4b51      	ldr	r3, [pc, #324]	; (80005ec <MX_GPIO_Init+0x1a4>)
 80004a6:	695a      	ldr	r2, [r3, #20]
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	02db      	lsls	r3, r3, #11
 80004ac:	4013      	ands	r3, r2
 80004ae:	603b      	str	r3, [r7, #0]
 80004b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_TEMP_SENS_Pin|USR_LED_GREEN_Pin|USR_RLY_4_Pin|USR_RLY_3_Pin, GPIO_PIN_RESET);
 80004b2:	4b4f      	ldr	r3, [pc, #316]	; (80005f0 <MX_GPIO_Init+0x1a8>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	213a      	movs	r1, #58	; 0x3a
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 fd20 	bl	8000efe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USR_RLY_1_Pin|USR_RLY_2_Pin, GPIO_PIN_RESET);
 80004be:	2390      	movs	r3, #144	; 0x90
 80004c0:	0119      	lsls	r1, r3, #4
 80004c2:	2390      	movs	r3, #144	; 0x90
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	2200      	movs	r2, #0
 80004c8:	0018      	movs	r0, r3
 80004ca:	f000 fd18 	bl	8000efe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_BTN_2_Pin USR_BTN_3_Pin */
  GPIO_InitStruct.Pin = USR_BTN_2_Pin|USR_BTN_3_Pin;
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	2281      	movs	r2, #129	; 0x81
 80004d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	22c4      	movs	r2, #196	; 0xc4
 80004d8:	0392      	lsls	r2, r2, #14
 80004da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	2201      	movs	r2, #1
 80004e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	4a42      	ldr	r2, [pc, #264]	; (80005f0 <MX_GPIO_Init+0x1a8>)
 80004e6:	0019      	movs	r1, r3
 80004e8:	0010      	movs	r0, r2
 80004ea:	f000 fb83 	bl	8000bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_TEMP_SENS_Pin */
  GPIO_InitStruct.Pin = USR_TEMP_SENS_Pin;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2202      	movs	r2, #2
 80004f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	2201      	movs	r2, #1
 80004f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	2201      	movs	r2, #1
 80004fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2203      	movs	r2, #3
 8000504:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USR_TEMP_SENS_GPIO_Port, &GPIO_InitStruct);
 8000506:	193b      	adds	r3, r7, r4
 8000508:	4a39      	ldr	r2, [pc, #228]	; (80005f0 <MX_GPIO_Init+0x1a8>)
 800050a:	0019      	movs	r1, r3
 800050c:	0010      	movs	r0, r2
 800050e:	f000 fb71 	bl	8000bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_RLY_1_Pin USR_RLY_2_Pin */
  GPIO_InitStruct.Pin = USR_RLY_1_Pin|USR_RLY_2_Pin;
 8000512:	0021      	movs	r1, r4
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2290      	movs	r2, #144	; 0x90
 8000518:	0112      	lsls	r2, r2, #4
 800051a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	000c      	movs	r4, r1
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2201      	movs	r2, #1
 8000522:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	193a      	adds	r2, r7, r4
 8000532:	2390      	movs	r3, #144	; 0x90
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f000 fb5b 	bl	8000bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_BTN_1_Pin */
  GPIO_InitStruct.Pin = USR_BTN_1_Pin;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2280      	movs	r2, #128	; 0x80
 8000542:	0152      	lsls	r2, r2, #5
 8000544:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000546:	193b      	adds	r3, r7, r4
 8000548:	22c4      	movs	r2, #196	; 0xc4
 800054a:	0392      	lsls	r2, r2, #14
 800054c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	2201      	movs	r2, #1
 8000552:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USR_BTN_1_GPIO_Port, &GPIO_InitStruct);
 8000554:	193a      	adds	r2, r7, r4
 8000556:	2390      	movs	r3, #144	; 0x90
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	0011      	movs	r1, r2
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fb49 	bl	8000bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_LED_GREEN_Pin USR_RLY_4_Pin USR_RLY_3_Pin */
  GPIO_InitStruct.Pin = USR_LED_GREEN_Pin|USR_RLY_4_Pin|USR_RLY_3_Pin;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2238      	movs	r2, #56	; 0x38
 8000566:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	2201      	movs	r2, #1
 800056c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	193b      	adds	r3, r7, r4
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057a:	193b      	adds	r3, r7, r4
 800057c:	4a1c      	ldr	r2, [pc, #112]	; (80005f0 <MX_GPIO_Init+0x1a8>)
 800057e:	0019      	movs	r1, r3
 8000580:	0010      	movs	r0, r2
 8000582:	f000 fb37 	bl	8000bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_WIND_SENS_Pin */
  GPIO_InitStruct.Pin = USR_WIND_SENS_Pin;
 8000586:	0021      	movs	r1, r4
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2240      	movs	r2, #64	; 0x40
 800058c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2201      	movs	r2, #1
 8000598:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USR_WIND_SENS_GPIO_Port, &GPIO_InitStruct);
 800059a:	187b      	adds	r3, r7, r1
 800059c:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <MX_GPIO_Init+0x1a8>)
 800059e:	0019      	movs	r1, r3
 80005a0:	0010      	movs	r0, r2
 80005a2:	f000 fb27 	bl	8000bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	2005      	movs	r0, #5
 80005ac:	f000 faf0 	bl	8000b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80005b0:	2005      	movs	r0, #5
 80005b2:	f000 fb02 	bl	8000bba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2007      	movs	r0, #7
 80005bc:	f000 fae8 	bl	8000b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80005c0:	2007      	movs	r0, #7
 80005c2:	f000 fafa 	bl	8000bba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, USR_RLY_4_Pin|USR_RLY_3_Pin, GPIO_PIN_SET);
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <MX_GPIO_Init+0x1a8>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	2130      	movs	r1, #48	; 0x30
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 fc96 	bl	8000efe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, USR_RLY_1_Pin|USR_RLY_2_Pin, GPIO_PIN_SET);
 80005d2:	2390      	movs	r3, #144	; 0x90
 80005d4:	0119      	lsls	r1, r3, #4
 80005d6:	2390      	movs	r3, #144	; 0x90
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	2201      	movs	r2, #1
 80005dc:	0018      	movs	r0, r3
 80005de:	f000 fc8e 	bl	8000efe <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	b009      	add	sp, #36	; 0x24
 80005e8:	bd90      	pop	{r4, r7, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	40021000 	.word	0x40021000
 80005f0:	48000400 	.word	0x48000400

080005f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	if(htim == &htim16)
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000600:	429a      	cmp	r2, r3
 8000602:	d104      	bne.n	800060e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		HAL_GPIO_TogglePin(GPIOB, USR_LED_GREEN_Pin);
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000606:	2108      	movs	r1, #8
 8000608:	0018      	movs	r0, r3
 800060a:	f000 fc95 	bl	8000f38 <HAL_GPIO_TogglePin>
	}
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b002      	add	sp, #8
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	2000007c 	.word	0x2000007c
 800061c:	48000400 	.word	0x48000400

08000620 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	0002      	movs	r2, r0
 8000628:	1dbb      	adds	r3, r7, #6
 800062a:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == USR_BTN_1_Pin)
 800062c:	1dbb      	adds	r3, r7, #6
 800062e:	881a      	ldrh	r2, [r3, #0]
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	015b      	lsls	r3, r3, #5
 8000634:	429a      	cmp	r2, r3
 8000636:	d11e      	bne.n	8000676 <HAL_GPIO_EXTI_Callback+0x56>
	{
		switch(HAL_GPIO_ReadPin(USR_BTN_1_GPIO_Port, USR_BTN_1_Pin))
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	015a      	lsls	r2, r3, #5
 800063c:	2390      	movs	r3, #144	; 0x90
 800063e:	05db      	lsls	r3, r3, #23
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f000 fc3e 	bl	8000ec4 <HAL_GPIO_ReadPin>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d002      	beq.n	8000652 <HAL_GPIO_EXTI_Callback+0x32>
 800064c:	2b01      	cmp	r3, #1
 800064e:	d009      	beq.n	8000664 <HAL_GPIO_EXTI_Callback+0x44>
			break;
		case GPIO_PIN_SET:
			HAL_GPIO_WritePin(GPIOA, USR_RLY_1_Pin, GPIO_PIN_SET);
			break;
		default:
			break;
 8000650:	e011      	b.n	8000676 <HAL_GPIO_EXTI_Callback+0x56>
			HAL_GPIO_WritePin(GPIOA, USR_RLY_1_Pin, GPIO_PIN_RESET);
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	0059      	lsls	r1, r3, #1
 8000656:	2390      	movs	r3, #144	; 0x90
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	2200      	movs	r2, #0
 800065c:	0018      	movs	r0, r3
 800065e:	f000 fc4e 	bl	8000efe <HAL_GPIO_WritePin>
			break;
 8000662:	e008      	b.n	8000676 <HAL_GPIO_EXTI_Callback+0x56>
			HAL_GPIO_WritePin(GPIOA, USR_RLY_1_Pin, GPIO_PIN_SET);
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	0059      	lsls	r1, r3, #1
 8000668:	2390      	movs	r3, #144	; 0x90
 800066a:	05db      	lsls	r3, r3, #23
 800066c:	2201      	movs	r2, #1
 800066e:	0018      	movs	r0, r3
 8000670:	f000 fc45 	bl	8000efe <HAL_GPIO_WritePin>
			break;
 8000674:	46c0      	nop			; (mov r8, r8)
		}
	}
	if(GPIO_Pin == USR_BTN_2_Pin)
 8000676:	1dbb      	adds	r3, r7, #6
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d11b      	bne.n	80006b6 <HAL_GPIO_EXTI_Callback+0x96>
	{
		switch(HAL_GPIO_ReadPin(USR_BTN_2_GPIO_Port, USR_BTN_2_Pin))
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000680:	2101      	movs	r1, #1
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fc1e 	bl	8000ec4 <HAL_GPIO_ReadPin>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d002      	beq.n	8000692 <HAL_GPIO_EXTI_Callback+0x72>
 800068c:	2b01      	cmp	r3, #1
 800068e:	d009      	beq.n	80006a4 <HAL_GPIO_EXTI_Callback+0x84>
			break;
		case GPIO_PIN_SET:
			HAL_GPIO_WritePin(GPIOA, USR_RLY_2_Pin, GPIO_PIN_SET);
			break;
		default:
			break;
 8000690:	e011      	b.n	80006b6 <HAL_GPIO_EXTI_Callback+0x96>
			HAL_GPIO_WritePin(GPIOA, USR_RLY_2_Pin, GPIO_PIN_RESET);
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	0119      	lsls	r1, r3, #4
 8000696:	2390      	movs	r3, #144	; 0x90
 8000698:	05db      	lsls	r3, r3, #23
 800069a:	2200      	movs	r2, #0
 800069c:	0018      	movs	r0, r3
 800069e:	f000 fc2e 	bl	8000efe <HAL_GPIO_WritePin>
			break;
 80006a2:	e008      	b.n	80006b6 <HAL_GPIO_EXTI_Callback+0x96>
			HAL_GPIO_WritePin(GPIOA, USR_RLY_2_Pin, GPIO_PIN_SET);
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	0119      	lsls	r1, r3, #4
 80006a8:	2390      	movs	r3, #144	; 0x90
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	2201      	movs	r2, #1
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fc25 	bl	8000efe <HAL_GPIO_WritePin>
			break;
 80006b4:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b002      	add	sp, #8
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	48000400 	.word	0x48000400

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	e7fe      	b.n	80006cc <Error_Handler+0x8>
	...

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_MspInit+0x44>)
 80006d8:	699a      	ldr	r2, [r3, #24]
 80006da:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <HAL_MspInit+0x44>)
 80006dc:	2101      	movs	r1, #1
 80006de:	430a      	orrs	r2, r1
 80006e0:	619a      	str	r2, [r3, #24]
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_MspInit+0x44>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	2201      	movs	r2, #1
 80006e8:	4013      	ands	r3, r2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_MspInit+0x44>)
 80006f0:	69da      	ldr	r2, [r3, #28]
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <HAL_MspInit+0x44>)
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	0549      	lsls	r1, r1, #21
 80006f8:	430a      	orrs	r2, r1
 80006fa:	61da      	str	r2, [r3, #28]
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <HAL_MspInit+0x44>)
 80006fe:	69da      	ldr	r2, [r3, #28]
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	055b      	lsls	r3, r3, #21
 8000704:	4013      	ands	r3, r2
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b002      	add	sp, #8
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	40021000 	.word	0x40021000

08000718 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b08b      	sub	sp, #44	; 0x2c
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	2414      	movs	r4, #20
 8000722:	193b      	adds	r3, r7, r4
 8000724:	0018      	movs	r0, r3
 8000726:	2314      	movs	r3, #20
 8000728:	001a      	movs	r2, r3
 800072a:	2100      	movs	r1, #0
 800072c:	f002 f894 	bl	8002858 <memset>
  if(hi2c->Instance==I2C1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a1d      	ldr	r2, [pc, #116]	; (80007ac <HAL_I2C_MspInit+0x94>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d133      	bne.n	80007a2 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <HAL_I2C_MspInit+0x98>)
 800073c:	695a      	ldr	r2, [r3, #20]
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <HAL_I2C_MspInit+0x98>)
 8000740:	2180      	movs	r1, #128	; 0x80
 8000742:	0289      	lsls	r1, r1, #10
 8000744:	430a      	orrs	r2, r1
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <HAL_I2C_MspInit+0x98>)
 800074a:	695a      	ldr	r2, [r3, #20]
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	029b      	lsls	r3, r3, #10
 8000750:	4013      	ands	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	22c0      	movs	r2, #192	; 0xc0
 800075a:	00d2      	lsls	r2, r2, #3
 800075c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800075e:	0021      	movs	r1, r4
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2212      	movs	r2, #18
 8000764:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076c:	187b      	adds	r3, r7, r1
 800076e:	2203      	movs	r2, #3
 8000770:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000772:	187b      	adds	r3, r7, r1
 8000774:	2204      	movs	r2, #4
 8000776:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	187a      	adds	r2, r7, r1
 800077a:	2390      	movs	r3, #144	; 0x90
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	0011      	movs	r1, r2
 8000780:	0018      	movs	r0, r3
 8000782:	f000 fa37 	bl	8000bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <HAL_I2C_MspInit+0x98>)
 8000788:	69da      	ldr	r2, [r3, #28]
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_I2C_MspInit+0x98>)
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	0389      	lsls	r1, r1, #14
 8000790:	430a      	orrs	r2, r1
 8000792:	61da      	str	r2, [r3, #28]
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_I2C_MspInit+0x98>)
 8000796:	69da      	ldr	r2, [r3, #28]
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	039b      	lsls	r3, r3, #14
 800079c:	4013      	ands	r3, r2
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b00b      	add	sp, #44	; 0x2c
 80007a8:	bd90      	pop	{r4, r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	40005400 	.word	0x40005400
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <HAL_TIM_Base_MspInit+0x48>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d115      	bne.n	80007f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_TIM_Base_MspInit+0x4c>)
 80007c8:	699a      	ldr	r2, [r3, #24]
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_TIM_Base_MspInit+0x4c>)
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	0289      	lsls	r1, r1, #10
 80007d0:	430a      	orrs	r2, r1
 80007d2:	619a      	str	r2, [r3, #24]
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <HAL_TIM_Base_MspInit+0x4c>)
 80007d6:	699a      	ldr	r2, [r3, #24]
 80007d8:	2380      	movs	r3, #128	; 0x80
 80007da:	029b      	lsls	r3, r3, #10
 80007dc:	4013      	ands	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	2015      	movs	r0, #21
 80007e8:	f000 f9d2 	bl	8000b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80007ec:	2015      	movs	r0, #21
 80007ee:	f000 f9e4 	bl	8000bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b004      	add	sp, #16
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	40014400 	.word	0x40014400
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b08b      	sub	sp, #44	; 0x2c
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	2414      	movs	r4, #20
 800080e:	193b      	adds	r3, r7, r4
 8000810:	0018      	movs	r0, r3
 8000812:	2314      	movs	r3, #20
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f002 f81e 	bl	8002858 <memset>
  if(huart->Instance==USART1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <HAL_UART_MspInit+0x90>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d132      	bne.n	800088c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <HAL_UART_MspInit+0x94>)
 8000828:	699a      	ldr	r2, [r3, #24]
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <HAL_UART_MspInit+0x94>)
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	01c9      	lsls	r1, r1, #7
 8000830:	430a      	orrs	r2, r1
 8000832:	619a      	str	r2, [r3, #24]
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <HAL_UART_MspInit+0x94>)
 8000836:	699a      	ldr	r2, [r3, #24]
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	01db      	lsls	r3, r3, #7
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_UART_MspInit+0x94>)
 8000844:	695a      	ldr	r2, [r3, #20]
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <HAL_UART_MspInit+0x94>)
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	0289      	lsls	r1, r1, #10
 800084c:	430a      	orrs	r2, r1
 800084e:	615a      	str	r2, [r3, #20]
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_UART_MspInit+0x94>)
 8000852:	695a      	ldr	r2, [r3, #20]
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	029b      	lsls	r3, r3, #10
 8000858:	4013      	ands	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800085e:	0021      	movs	r1, r4
 8000860:	187b      	adds	r3, r7, r1
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <HAL_UART_MspInit+0x98>)
 8000864:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2202      	movs	r2, #2
 800086a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2203      	movs	r2, #3
 8000876:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2201      	movs	r2, #1
 800087c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	187a      	adds	r2, r7, r1
 8000880:	2390      	movs	r3, #144	; 0x90
 8000882:	05db      	lsls	r3, r3, #23
 8000884:	0011      	movs	r1, r2
 8000886:	0018      	movs	r0, r3
 8000888:	f000 f9b4 	bl	8000bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b00b      	add	sp, #44	; 0x2c
 8000892:	bd90      	pop	{r4, r7, pc}
 8000894:	40013800 	.word	0x40013800
 8000898:	40021000 	.word	0x40021000
 800089c:	00008004 	.word	0x00008004

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c4:	f000 f89c 	bl	8000a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_2_Pin);
 80008d2:	2001      	movs	r0, #1
 80008d4:	f000 fb4c 	bl	8000f70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_3_Pin);
 80008e2:	2080      	movs	r0, #128	; 0x80
 80008e4:	f000 fb44 	bl	8000f70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_1_Pin);
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	015b      	lsls	r3, r3, #5
 80008ec:	0018      	movs	r0, r3
 80008ee:	f000 fb3f 	bl	8000f70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <TIM16_IRQHandler+0x14>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 fa48 	bl	8001d94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	2000007c 	.word	0x2000007c

08000910 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800091c:	480d      	ldr	r0, [pc, #52]	; (8000954 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800091e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000920:	f7ff fff6 	bl	8000910 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <LoopForever+0x6>)
  ldr r1, =_edata
 8000926:	490d      	ldr	r1, [pc, #52]	; (800095c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000928:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <LoopForever+0xe>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800092c:	e002      	b.n	8000934 <LoopCopyDataInit>

0800092e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000932:	3304      	adds	r3, #4

08000934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000938:	d3f9      	bcc.n	800092e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <LoopForever+0x12>)
  ldr r4, =_ebss
 800093c:	4c0a      	ldr	r4, [pc, #40]	; (8000968 <LoopForever+0x16>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000940:	e001      	b.n	8000946 <LoopFillZerobss>

08000942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000944:	3204      	adds	r2, #4

08000946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000948:	d3fb      	bcc.n	8000942 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800094a:	f001 ff8d 	bl	8002868 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800094e:	f7ff fc67 	bl	8000220 <main>

08000952 <LoopForever>:

LoopForever:
    b LoopForever
 8000952:	e7fe      	b.n	8000952 <LoopForever>
  ldr   r0, =_estack
 8000954:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000960:	08002908 	.word	0x08002908
  ldr r2, =_sbss
 8000964:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000968:	20000150 	.word	0x20000150

0800096c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC1_IRQHandler>
	...

08000970 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b07      	ldr	r3, [pc, #28]	; (8000994 <HAL_Init+0x24>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_Init+0x24>)
 800097a:	2110      	movs	r1, #16
 800097c:	430a      	orrs	r2, r1
 800097e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000980:	2000      	movs	r0, #0
 8000982:	f000 f809 	bl	8000998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000986:	f7ff fea3 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800098a:	2300      	movs	r3, #0
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	40022000 	.word	0x40022000

08000998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <HAL_InitTick+0x5c>)
 80009a2:	681c      	ldr	r4, [r3, #0]
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_InitTick+0x60>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	0019      	movs	r1, r3
 80009aa:	23fa      	movs	r3, #250	; 0xfa
 80009ac:	0098      	lsls	r0, r3, #2
 80009ae:	f7ff fbab 	bl	8000108 <__udivsi3>
 80009b2:	0003      	movs	r3, r0
 80009b4:	0019      	movs	r1, r3
 80009b6:	0020      	movs	r0, r4
 80009b8:	f7ff fba6 	bl	8000108 <__udivsi3>
 80009bc:	0003      	movs	r3, r0
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 f90b 	bl	8000bda <HAL_SYSTICK_Config>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d001      	beq.n	80009cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e00f      	b.n	80009ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	d80b      	bhi.n	80009ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	2301      	movs	r3, #1
 80009d6:	425b      	negs	r3, r3
 80009d8:	2200      	movs	r2, #0
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 f8d8 	bl	8000b90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_InitTick+0x64>)
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e000      	b.n	80009ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b003      	add	sp, #12
 80009f2:	bd90      	pop	{r4, r7, pc}
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000004 	.word	0x20000004

08000a00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a04:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <HAL_IncTick+0x1c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	001a      	movs	r2, r3
 8000a0a:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_IncTick+0x20>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	18d2      	adds	r2, r2, r3
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <HAL_IncTick+0x20>)
 8000a12:	601a      	str	r2, [r3, #0]
}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	2000014c 	.word	0x2000014c

08000a24 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  return uwTick;
 8000a28:	4b02      	ldr	r3, [pc, #8]	; (8000a34 <HAL_GetTick+0x10>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
}
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	2000014c 	.word	0x2000014c

08000a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	0002      	movs	r2, r0
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b7f      	cmp	r3, #127	; 0x7f
 8000a4a:	d809      	bhi.n	8000a60 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4c:	1dfb      	adds	r3, r7, #7
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	001a      	movs	r2, r3
 8000a52:	231f      	movs	r3, #31
 8000a54:	401a      	ands	r2, r3
 8000a56:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <__NVIC_EnableIRQ+0x30>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	4091      	lsls	r1, r2
 8000a5c:	000a      	movs	r2, r1
 8000a5e:	601a      	str	r2, [r3, #0]
  }
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b002      	add	sp, #8
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	e000e100 	.word	0xe000e100

08000a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	0002      	movs	r2, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a80:	d828      	bhi.n	8000ad4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a82:	4a2f      	ldr	r2, [pc, #188]	; (8000b40 <__NVIC_SetPriority+0xd4>)
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b25b      	sxtb	r3, r3
 8000a8a:	089b      	lsrs	r3, r3, #2
 8000a8c:	33c0      	adds	r3, #192	; 0xc0
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	589b      	ldr	r3, [r3, r2]
 8000a92:	1dfa      	adds	r2, r7, #7
 8000a94:	7812      	ldrb	r2, [r2, #0]
 8000a96:	0011      	movs	r1, r2
 8000a98:	2203      	movs	r2, #3
 8000a9a:	400a      	ands	r2, r1
 8000a9c:	00d2      	lsls	r2, r2, #3
 8000a9e:	21ff      	movs	r1, #255	; 0xff
 8000aa0:	4091      	lsls	r1, r2
 8000aa2:	000a      	movs	r2, r1
 8000aa4:	43d2      	mvns	r2, r2
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	019b      	lsls	r3, r3, #6
 8000aae:	22ff      	movs	r2, #255	; 0xff
 8000ab0:	401a      	ands	r2, r3
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	2303      	movs	r3, #3
 8000aba:	4003      	ands	r3, r0
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac0:	481f      	ldr	r0, [pc, #124]	; (8000b40 <__NVIC_SetPriority+0xd4>)
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b25b      	sxtb	r3, r3
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	430a      	orrs	r2, r1
 8000acc:	33c0      	adds	r3, #192	; 0xc0
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ad2:	e031      	b.n	8000b38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad4:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <__NVIC_SetPriority+0xd8>)
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	0019      	movs	r1, r3
 8000adc:	230f      	movs	r3, #15
 8000ade:	400b      	ands	r3, r1
 8000ae0:	3b08      	subs	r3, #8
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	3306      	adds	r3, #6
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	18d3      	adds	r3, r2, r3
 8000aea:	3304      	adds	r3, #4
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	1dfa      	adds	r2, r7, #7
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	0011      	movs	r1, r2
 8000af4:	2203      	movs	r2, #3
 8000af6:	400a      	ands	r2, r1
 8000af8:	00d2      	lsls	r2, r2, #3
 8000afa:	21ff      	movs	r1, #255	; 0xff
 8000afc:	4091      	lsls	r1, r2
 8000afe:	000a      	movs	r2, r1
 8000b00:	43d2      	mvns	r2, r2
 8000b02:	401a      	ands	r2, r3
 8000b04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	019b      	lsls	r3, r3, #6
 8000b0a:	22ff      	movs	r2, #255	; 0xff
 8000b0c:	401a      	ands	r2, r3
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	0018      	movs	r0, r3
 8000b14:	2303      	movs	r3, #3
 8000b16:	4003      	ands	r3, r0
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <__NVIC_SetPriority+0xd8>)
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	001c      	movs	r4, r3
 8000b24:	230f      	movs	r3, #15
 8000b26:	4023      	ands	r3, r4
 8000b28:	3b08      	subs	r3, #8
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	3306      	adds	r3, #6
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	18c3      	adds	r3, r0, r3
 8000b34:	3304      	adds	r3, #4
 8000b36:	601a      	str	r2, [r3, #0]
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b003      	add	sp, #12
 8000b3e:	bd90      	pop	{r4, r7, pc}
 8000b40:	e000e100 	.word	0xe000e100
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	1e5a      	subs	r2, r3, #1
 8000b54:	2380      	movs	r3, #128	; 0x80
 8000b56:	045b      	lsls	r3, r3, #17
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d301      	bcc.n	8000b60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e010      	b.n	8000b82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <SysTick_Config+0x44>)
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	3a01      	subs	r2, #1
 8000b66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b68:	2301      	movs	r3, #1
 8000b6a:	425b      	negs	r3, r3
 8000b6c:	2103      	movs	r1, #3
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f7ff ff7c 	bl	8000a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SysTick_Config+0x44>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SysTick_Config+0x44>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	0018      	movs	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b002      	add	sp, #8
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	e000e010 	.word	0xe000e010

08000b90 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	1c02      	adds	r2, r0, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	0011      	movs	r1, r2
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff ff5d 	bl	8000a6c <__NVIC_SetPriority>
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b004      	add	sp, #16
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	0002      	movs	r2, r0
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	b25b      	sxtb	r3, r3
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff ff33 	bl	8000a38 <__NVIC_EnableIRQ>
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b002      	add	sp, #8
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff ffaf 	bl	8000b48 <SysTick_Config>
 8000bea:	0003      	movs	r3, r0
}
 8000bec:	0018      	movs	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b002      	add	sp, #8
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c02:	e149      	b.n	8000e98 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2101      	movs	r1, #1
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	000a      	movs	r2, r1
 8000c10:	4013      	ands	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d100      	bne.n	8000c1c <HAL_GPIO_Init+0x28>
 8000c1a:	e13a      	b.n	8000e92 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	2203      	movs	r2, #3
 8000c22:	4013      	ands	r3, r2
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d005      	beq.n	8000c34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d130      	bne.n	8000c96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	2203      	movs	r2, #3
 8000c40:	409a      	lsls	r2, r3
 8000c42:	0013      	movs	r3, r2
 8000c44:	43da      	mvns	r2, r3
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	409a      	lsls	r2, r3
 8000c56:	0013      	movs	r3, r2
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	409a      	lsls	r2, r3
 8000c70:	0013      	movs	r3, r2
 8000c72:	43da      	mvns	r2, r3
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	091b      	lsrs	r3, r3, #4
 8000c80:	2201      	movs	r2, #1
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
 8000c88:	0013      	movs	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	d017      	beq.n	8000cd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	2203      	movs	r2, #3
 8000cae:	409a      	lsls	r2, r3
 8000cb0:	0013      	movs	r3, r2
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	689a      	ldr	r2, [r3, #8]
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	409a      	lsls	r2, r3
 8000cc4:	0013      	movs	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	4013      	ands	r3, r2
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d123      	bne.n	8000d26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	08da      	lsrs	r2, r3, #3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3208      	adds	r2, #8
 8000ce6:	0092      	lsls	r2, r2, #2
 8000ce8:	58d3      	ldr	r3, [r2, r3]
 8000cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	2207      	movs	r2, #7
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	220f      	movs	r2, #15
 8000cf6:	409a      	lsls	r2, r3
 8000cf8:	0013      	movs	r3, r2
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	691a      	ldr	r2, [r3, #16]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	2107      	movs	r1, #7
 8000d0a:	400b      	ands	r3, r1
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	409a      	lsls	r2, r3
 8000d10:	0013      	movs	r3, r2
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	08da      	lsrs	r2, r3, #3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3208      	adds	r2, #8
 8000d20:	0092      	lsls	r2, r2, #2
 8000d22:	6939      	ldr	r1, [r7, #16]
 8000d24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	2203      	movs	r2, #3
 8000d32:	409a      	lsls	r2, r3
 8000d34:	0013      	movs	r3, r2
 8000d36:	43da      	mvns	r2, r3
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2203      	movs	r2, #3
 8000d44:	401a      	ands	r2, r3
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	0013      	movs	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	23c0      	movs	r3, #192	; 0xc0
 8000d60:	029b      	lsls	r3, r3, #10
 8000d62:	4013      	ands	r3, r2
 8000d64:	d100      	bne.n	8000d68 <HAL_GPIO_Init+0x174>
 8000d66:	e094      	b.n	8000e92 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d68:	4b51      	ldr	r3, [pc, #324]	; (8000eb0 <HAL_GPIO_Init+0x2bc>)
 8000d6a:	699a      	ldr	r2, [r3, #24]
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <HAL_GPIO_Init+0x2bc>)
 8000d6e:	2101      	movs	r1, #1
 8000d70:	430a      	orrs	r2, r1
 8000d72:	619a      	str	r2, [r3, #24]
 8000d74:	4b4e      	ldr	r3, [pc, #312]	; (8000eb0 <HAL_GPIO_Init+0x2bc>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d80:	4a4c      	ldr	r2, [pc, #304]	; (8000eb4 <HAL_GPIO_Init+0x2c0>)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	089b      	lsrs	r3, r3, #2
 8000d86:	3302      	adds	r3, #2
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	589b      	ldr	r3, [r3, r2]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	2203      	movs	r2, #3
 8000d92:	4013      	ands	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	220f      	movs	r2, #15
 8000d98:	409a      	lsls	r2, r3
 8000d9a:	0013      	movs	r3, r2
 8000d9c:	43da      	mvns	r2, r3
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	2390      	movs	r3, #144	; 0x90
 8000da8:	05db      	lsls	r3, r3, #23
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d00d      	beq.n	8000dca <HAL_GPIO_Init+0x1d6>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a41      	ldr	r2, [pc, #260]	; (8000eb8 <HAL_GPIO_Init+0x2c4>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d007      	beq.n	8000dc6 <HAL_GPIO_Init+0x1d2>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a40      	ldr	r2, [pc, #256]	; (8000ebc <HAL_GPIO_Init+0x2c8>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d101      	bne.n	8000dc2 <HAL_GPIO_Init+0x1ce>
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	e004      	b.n	8000dcc <HAL_GPIO_Init+0x1d8>
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	e002      	b.n	8000dcc <HAL_GPIO_Init+0x1d8>
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e000      	b.n	8000dcc <HAL_GPIO_Init+0x1d8>
 8000dca:	2300      	movs	r3, #0
 8000dcc:	697a      	ldr	r2, [r7, #20]
 8000dce:	2103      	movs	r1, #3
 8000dd0:	400a      	ands	r2, r1
 8000dd2:	0092      	lsls	r2, r2, #2
 8000dd4:	4093      	lsls	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ddc:	4935      	ldr	r1, [pc, #212]	; (8000eb4 <HAL_GPIO_Init+0x2c0>)
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	089b      	lsrs	r3, r3, #2
 8000de2:	3302      	adds	r3, #2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dea:	4b35      	ldr	r3, [pc, #212]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	43da      	mvns	r2, r3
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	035b      	lsls	r3, r3, #13
 8000e02:	4013      	ands	r3, r2
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e14:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43da      	mvns	r2, r3
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	039b      	lsls	r3, r3, #14
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e38:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000e3e:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	43da      	mvns	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	2380      	movs	r3, #128	; 0x80
 8000e54:	029b      	lsls	r3, r3, #10
 8000e56:	4013      	ands	r3, r2
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43da      	mvns	r2, r3
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	2380      	movs	r3, #128	; 0x80
 8000e7e:	025b      	lsls	r3, r3, #9
 8000e80:	4013      	ands	r3, r2
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_GPIO_Init+0x2cc>)
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	3301      	adds	r3, #1
 8000e96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	40da      	lsrs	r2, r3
 8000ea0:	1e13      	subs	r3, r2, #0
 8000ea2:	d000      	beq.n	8000ea6 <HAL_GPIO_Init+0x2b2>
 8000ea4:	e6ae      	b.n	8000c04 <HAL_GPIO_Init+0x10>
  } 
}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b006      	add	sp, #24
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010000 	.word	0x40010000
 8000eb8:	48000400 	.word	0x48000400
 8000ebc:	48000800 	.word	0x48000800
 8000ec0:	40010400 	.word	0x40010400

08000ec4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	000a      	movs	r2, r1
 8000ece:	1cbb      	adds	r3, r7, #2
 8000ed0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	1cba      	adds	r2, r7, #2
 8000ed8:	8812      	ldrh	r2, [r2, #0]
 8000eda:	4013      	ands	r3, r2
 8000edc:	d004      	beq.n	8000ee8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000ede:	230f      	movs	r3, #15
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
 8000ee6:	e003      	b.n	8000ef0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ee8:	230f      	movs	r3, #15
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	781b      	ldrb	r3, [r3, #0]
  }
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b004      	add	sp, #16
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	0008      	movs	r0, r1
 8000f08:	0011      	movs	r1, r2
 8000f0a:	1cbb      	adds	r3, r7, #2
 8000f0c:	1c02      	adds	r2, r0, #0
 8000f0e:	801a      	strh	r2, [r3, #0]
 8000f10:	1c7b      	adds	r3, r7, #1
 8000f12:	1c0a      	adds	r2, r1, #0
 8000f14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f16:	1c7b      	adds	r3, r7, #1
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d004      	beq.n	8000f28 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f1e:	1cbb      	adds	r3, r7, #2
 8000f20:	881a      	ldrh	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f26:	e003      	b.n	8000f30 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f28:	1cbb      	adds	r3, r7, #2
 8000f2a:	881a      	ldrh	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b002      	add	sp, #8
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	000a      	movs	r2, r1
 8000f42:	1cbb      	adds	r3, r7, #2
 8000f44:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f4c:	1cbb      	adds	r3, r7, #2
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	4013      	ands	r3, r2
 8000f54:	041a      	lsls	r2, r3, #16
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	1cb9      	adds	r1, r7, #2
 8000f5c:	8809      	ldrh	r1, [r1, #0]
 8000f5e:	400b      	ands	r3, r1
 8000f60:	431a      	orrs	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	619a      	str	r2, [r3, #24]
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b004      	add	sp, #16
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	0002      	movs	r2, r0
 8000f78:	1dbb      	adds	r3, r7, #6
 8000f7a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	1dba      	adds	r2, r7, #6
 8000f82:	8812      	ldrh	r2, [r2, #0]
 8000f84:	4013      	ands	r3, r2
 8000f86:	d008      	beq.n	8000f9a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000f8a:	1dba      	adds	r2, r7, #6
 8000f8c:	8812      	ldrh	r2, [r2, #0]
 8000f8e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f90:	1dbb      	adds	r3, r7, #6
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff fb43 	bl	8000620 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b002      	add	sp, #8
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	40010400 	.word	0x40010400

08000fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e082      	b.n	80010c0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2241      	movs	r2, #65	; 0x41
 8000fbe:	5c9b      	ldrb	r3, [r3, r2]
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d107      	bne.n	8000fd6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2240      	movs	r2, #64	; 0x40
 8000fca:	2100      	movs	r1, #0
 8000fcc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff fba1 	bl	8000718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2241      	movs	r2, #65	; 0x41
 8000fda:	2124      	movs	r1, #36	; 0x24
 8000fdc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2101      	movs	r1, #1
 8000fea:	438a      	bics	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4934      	ldr	r1, [pc, #208]	; (80010c8 <HAL_I2C_Init+0x120>)
 8000ff8:	400a      	ands	r2, r1
 8000ffa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4931      	ldr	r1, [pc, #196]	; (80010cc <HAL_I2C_Init+0x124>)
 8001008:	400a      	ands	r2, r1
 800100a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d108      	bne.n	8001026 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	0209      	lsls	r1, r1, #8
 8001020:	430a      	orrs	r2, r1
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	e007      	b.n	8001036 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2184      	movs	r1, #132	; 0x84
 8001030:	0209      	lsls	r1, r1, #8
 8001032:	430a      	orrs	r2, r1
 8001034:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d104      	bne.n	8001048 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	0112      	lsls	r2, r2, #4
 8001046:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	491f      	ldr	r1, [pc, #124]	; (80010d0 <HAL_I2C_Init+0x128>)
 8001054:	430a      	orrs	r2, r1
 8001056:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	491a      	ldr	r1, [pc, #104]	; (80010cc <HAL_I2C_Init+0x124>)
 8001064:	400a      	ands	r2, r1
 8001066:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	431a      	orrs	r2, r3
 8001072:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	430a      	orrs	r2, r1
 8001080:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69d9      	ldr	r1, [r3, #28]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a1a      	ldr	r2, [r3, #32]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	430a      	orrs	r2, r1
 8001090:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2101      	movs	r1, #1
 800109e:	430a      	orrs	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2241      	movs	r2, #65	; 0x41
 80010ac:	2120      	movs	r1, #32
 80010ae:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2242      	movs	r2, #66	; 0x42
 80010ba:	2100      	movs	r1, #0
 80010bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	0018      	movs	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	f0ffffff 	.word	0xf0ffffff
 80010cc:	ffff7fff 	.word	0xffff7fff
 80010d0:	02008000 	.word	0x02008000

080010d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2241      	movs	r2, #65	; 0x41
 80010e2:	5c9b      	ldrb	r3, [r3, r2]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b20      	cmp	r3, #32
 80010e8:	d138      	bne.n	800115c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2240      	movs	r2, #64	; 0x40
 80010ee:	5c9b      	ldrb	r3, [r3, r2]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e032      	b.n	800115e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2240      	movs	r2, #64	; 0x40
 80010fc:	2101      	movs	r1, #1
 80010fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2241      	movs	r2, #65	; 0x41
 8001104:	2124      	movs	r1, #36	; 0x24
 8001106:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2101      	movs	r1, #1
 8001114:	438a      	bics	r2, r1
 8001116:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4911      	ldr	r1, [pc, #68]	; (8001168 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001124:	400a      	ands	r2, r1
 8001126:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6819      	ldr	r1, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	430a      	orrs	r2, r1
 8001136:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2101      	movs	r1, #1
 8001144:	430a      	orrs	r2, r1
 8001146:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2241      	movs	r2, #65	; 0x41
 800114c:	2120      	movs	r1, #32
 800114e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2240      	movs	r2, #64	; 0x40
 8001154:	2100      	movs	r1, #0
 8001156:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	e000      	b.n	800115e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800115c:	2302      	movs	r3, #2
  }
}
 800115e:	0018      	movs	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	b002      	add	sp, #8
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	ffffefff 	.word	0xffffefff

0800116c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2241      	movs	r2, #65	; 0x41
 800117a:	5c9b      	ldrb	r3, [r3, r2]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b20      	cmp	r3, #32
 8001180:	d139      	bne.n	80011f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2240      	movs	r2, #64	; 0x40
 8001186:	5c9b      	ldrb	r3, [r3, r2]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d101      	bne.n	8001190 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800118c:	2302      	movs	r3, #2
 800118e:	e033      	b.n	80011f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2240      	movs	r2, #64	; 0x40
 8001194:	2101      	movs	r1, #1
 8001196:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2241      	movs	r2, #65	; 0x41
 800119c:	2124      	movs	r1, #36	; 0x24
 800119e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2101      	movs	r1, #1
 80011ac:	438a      	bics	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4a11      	ldr	r2, [pc, #68]	; (8001200 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80011bc:	4013      	ands	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2101      	movs	r1, #1
 80011de:	430a      	orrs	r2, r1
 80011e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2241      	movs	r2, #65	; 0x41
 80011e6:	2120      	movs	r1, #32
 80011e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2240      	movs	r2, #64	; 0x40
 80011ee:	2100      	movs	r1, #0
 80011f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	e000      	b.n	80011f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80011f6:	2302      	movs	r3, #2
  }
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b004      	add	sp, #16
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	fffff0ff 	.word	0xfffff0ff

08001204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e301      	b.n	800181a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2201      	movs	r2, #1
 800121c:	4013      	ands	r3, r2
 800121e:	d100      	bne.n	8001222 <HAL_RCC_OscConfig+0x1e>
 8001220:	e08d      	b.n	800133e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001222:	4bc3      	ldr	r3, [pc, #780]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	220c      	movs	r2, #12
 8001228:	4013      	ands	r3, r2
 800122a:	2b04      	cmp	r3, #4
 800122c:	d00e      	beq.n	800124c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800122e:	4bc0      	ldr	r3, [pc, #768]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	220c      	movs	r2, #12
 8001234:	4013      	ands	r3, r2
 8001236:	2b08      	cmp	r3, #8
 8001238:	d116      	bne.n	8001268 <HAL_RCC_OscConfig+0x64>
 800123a:	4bbd      	ldr	r3, [pc, #756]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	025b      	lsls	r3, r3, #9
 8001242:	401a      	ands	r2, r3
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	025b      	lsls	r3, r3, #9
 8001248:	429a      	cmp	r2, r3
 800124a:	d10d      	bne.n	8001268 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124c:	4bb8      	ldr	r3, [pc, #736]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	029b      	lsls	r3, r3, #10
 8001254:	4013      	ands	r3, r2
 8001256:	d100      	bne.n	800125a <HAL_RCC_OscConfig+0x56>
 8001258:	e070      	b.n	800133c <HAL_RCC_OscConfig+0x138>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d000      	beq.n	8001264 <HAL_RCC_OscConfig+0x60>
 8001262:	e06b      	b.n	800133c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e2d8      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d107      	bne.n	8001280 <HAL_RCC_OscConfig+0x7c>
 8001270:	4baf      	ldr	r3, [pc, #700]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4bae      	ldr	r3, [pc, #696]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001276:	2180      	movs	r1, #128	; 0x80
 8001278:	0249      	lsls	r1, r1, #9
 800127a:	430a      	orrs	r2, r1
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	e02f      	b.n	80012e0 <HAL_RCC_OscConfig+0xdc>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d10c      	bne.n	80012a2 <HAL_RCC_OscConfig+0x9e>
 8001288:	4ba9      	ldr	r3, [pc, #676]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4ba8      	ldr	r3, [pc, #672]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800128e:	49a9      	ldr	r1, [pc, #676]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 8001290:	400a      	ands	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	4ba6      	ldr	r3, [pc, #664]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4ba5      	ldr	r3, [pc, #660]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800129a:	49a7      	ldr	r1, [pc, #668]	; (8001538 <HAL_RCC_OscConfig+0x334>)
 800129c:	400a      	ands	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	e01e      	b.n	80012e0 <HAL_RCC_OscConfig+0xdc>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b05      	cmp	r3, #5
 80012a8:	d10e      	bne.n	80012c8 <HAL_RCC_OscConfig+0xc4>
 80012aa:	4ba1      	ldr	r3, [pc, #644]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4ba0      	ldr	r3, [pc, #640]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80012b0:	2180      	movs	r1, #128	; 0x80
 80012b2:	02c9      	lsls	r1, r1, #11
 80012b4:	430a      	orrs	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	4b9d      	ldr	r3, [pc, #628]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b9c      	ldr	r3, [pc, #624]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80012be:	2180      	movs	r1, #128	; 0x80
 80012c0:	0249      	lsls	r1, r1, #9
 80012c2:	430a      	orrs	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	e00b      	b.n	80012e0 <HAL_RCC_OscConfig+0xdc>
 80012c8:	4b99      	ldr	r3, [pc, #612]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b98      	ldr	r3, [pc, #608]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80012ce:	4999      	ldr	r1, [pc, #612]	; (8001534 <HAL_RCC_OscConfig+0x330>)
 80012d0:	400a      	ands	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	4b96      	ldr	r3, [pc, #600]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b95      	ldr	r3, [pc, #596]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80012da:	4997      	ldr	r1, [pc, #604]	; (8001538 <HAL_RCC_OscConfig+0x334>)
 80012dc:	400a      	ands	r2, r1
 80012de:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d014      	beq.n	8001312 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb9c 	bl	8000a24 <HAL_GetTick>
 80012ec:	0003      	movs	r3, r0
 80012ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f2:	f7ff fb97 	bl	8000a24 <HAL_GetTick>
 80012f6:	0002      	movs	r2, r0
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b64      	cmp	r3, #100	; 0x64
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e28a      	b.n	800181a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001304:	4b8a      	ldr	r3, [pc, #552]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	029b      	lsls	r3, r3, #10
 800130c:	4013      	ands	r3, r2
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0xee>
 8001310:	e015      	b.n	800133e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001312:	f7ff fb87 	bl	8000a24 <HAL_GetTick>
 8001316:	0003      	movs	r3, r0
 8001318:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fb82 	bl	8000a24 <HAL_GetTick>
 8001320:	0002      	movs	r2, r0
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e275      	b.n	800181a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	4b80      	ldr	r3, [pc, #512]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	029b      	lsls	r3, r3, #10
 8001336:	4013      	ands	r3, r2
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0x118>
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2202      	movs	r2, #2
 8001344:	4013      	ands	r3, r2
 8001346:	d100      	bne.n	800134a <HAL_RCC_OscConfig+0x146>
 8001348:	e069      	b.n	800141e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800134a:	4b79      	ldr	r3, [pc, #484]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	220c      	movs	r2, #12
 8001350:	4013      	ands	r3, r2
 8001352:	d00b      	beq.n	800136c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001354:	4b76      	ldr	r3, [pc, #472]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	220c      	movs	r2, #12
 800135a:	4013      	ands	r3, r2
 800135c:	2b08      	cmp	r3, #8
 800135e:	d11c      	bne.n	800139a <HAL_RCC_OscConfig+0x196>
 8001360:	4b73      	ldr	r3, [pc, #460]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	025b      	lsls	r3, r3, #9
 8001368:	4013      	ands	r3, r2
 800136a:	d116      	bne.n	800139a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136c:	4b70      	ldr	r3, [pc, #448]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2202      	movs	r2, #2
 8001372:	4013      	ands	r3, r2
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x17e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	68db      	ldr	r3, [r3, #12]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d001      	beq.n	8001382 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e24b      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001382:	4b6b      	ldr	r3, [pc, #428]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	22f8      	movs	r2, #248	; 0xf8
 8001388:	4393      	bics	r3, r2
 800138a:	0019      	movs	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	00da      	lsls	r2, r3, #3
 8001392:	4b67      	ldr	r3, [pc, #412]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001394:	430a      	orrs	r2, r1
 8001396:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001398:	e041      	b.n	800141e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d024      	beq.n	80013ec <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a2:	4b63      	ldr	r3, [pc, #396]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b62      	ldr	r3, [pc, #392]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80013a8:	2101      	movs	r1, #1
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fb39 	bl	8000a24 <HAL_GetTick>
 80013b2:	0003      	movs	r3, r0
 80013b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b8:	f7ff fb34 	bl	8000a24 <HAL_GetTick>
 80013bc:	0002      	movs	r2, r0
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e227      	b.n	800181a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ca:	4b59      	ldr	r3, [pc, #356]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2202      	movs	r2, #2
 80013d0:	4013      	ands	r3, r2
 80013d2:	d0f1      	beq.n	80013b8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b56      	ldr	r3, [pc, #344]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	22f8      	movs	r2, #248	; 0xf8
 80013da:	4393      	bics	r3, r2
 80013dc:	0019      	movs	r1, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	00da      	lsls	r2, r3, #3
 80013e4:	4b52      	ldr	r3, [pc, #328]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80013e6:	430a      	orrs	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	e018      	b.n	800141e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ec:	4b50      	ldr	r3, [pc, #320]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b4f      	ldr	r3, [pc, #316]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80013f2:	2101      	movs	r1, #1
 80013f4:	438a      	bics	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fb14 	bl	8000a24 <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001402:	f7ff fb0f 	bl	8000a24 <HAL_GetTick>
 8001406:	0002      	movs	r2, r0
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e202      	b.n	800181a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001414:	4b46      	ldr	r3, [pc, #280]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2202      	movs	r2, #2
 800141a:	4013      	ands	r3, r2
 800141c:	d1f1      	bne.n	8001402 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2208      	movs	r2, #8
 8001424:	4013      	ands	r3, r2
 8001426:	d036      	beq.n	8001496 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d019      	beq.n	8001464 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001430:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001434:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001436:	2101      	movs	r1, #1
 8001438:	430a      	orrs	r2, r1
 800143a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143c:	f7ff faf2 	bl	8000a24 <HAL_GetTick>
 8001440:	0003      	movs	r3, r0
 8001442:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001446:	f7ff faed 	bl	8000a24 <HAL_GetTick>
 800144a:	0002      	movs	r2, r0
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e1e0      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001458:	4b35      	ldr	r3, [pc, #212]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	2202      	movs	r2, #2
 800145e:	4013      	ands	r3, r2
 8001460:	d0f1      	beq.n	8001446 <HAL_RCC_OscConfig+0x242>
 8001462:	e018      	b.n	8001496 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001464:	4b32      	ldr	r3, [pc, #200]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001466:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001468:	4b31      	ldr	r3, [pc, #196]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800146a:	2101      	movs	r1, #1
 800146c:	438a      	bics	r2, r1
 800146e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001470:	f7ff fad8 	bl	8000a24 <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147a:	f7ff fad3 	bl	8000a24 <HAL_GetTick>
 800147e:	0002      	movs	r2, r0
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e1c6      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	4b28      	ldr	r3, [pc, #160]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 800148e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001490:	2202      	movs	r2, #2
 8001492:	4013      	ands	r3, r2
 8001494:	d1f1      	bne.n	800147a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2204      	movs	r2, #4
 800149c:	4013      	ands	r3, r2
 800149e:	d100      	bne.n	80014a2 <HAL_RCC_OscConfig+0x29e>
 80014a0:	e0b4      	b.n	800160c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a2:	201f      	movs	r0, #31
 80014a4:	183b      	adds	r3, r7, r0
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80014ac:	69da      	ldr	r2, [r3, #28]
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	055b      	lsls	r3, r3, #21
 80014b2:	4013      	ands	r3, r2
 80014b4:	d110      	bne.n	80014d8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80014b8:	69da      	ldr	r2, [r3, #28]
 80014ba:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	0549      	lsls	r1, r1, #21
 80014c0:	430a      	orrs	r2, r1
 80014c2:	61da      	str	r2, [r3, #28]
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 80014c6:	69da      	ldr	r2, [r3, #28]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	055b      	lsls	r3, r3, #21
 80014cc:	4013      	ands	r3, r2
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014d2:	183b      	adds	r3, r7, r0
 80014d4:	2201      	movs	r2, #1
 80014d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_RCC_OscConfig+0x338>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4013      	ands	r3, r2
 80014e2:	d11a      	bne.n	800151a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e4:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_RCC_OscConfig+0x338>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <HAL_RCC_OscConfig+0x338>)
 80014ea:	2180      	movs	r1, #128	; 0x80
 80014ec:	0049      	lsls	r1, r1, #1
 80014ee:	430a      	orrs	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fa97 	bl	8000a24 <HAL_GetTick>
 80014f6:	0003      	movs	r3, r0
 80014f8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fc:	f7ff fa92 	bl	8000a24 <HAL_GetTick>
 8001500:	0002      	movs	r2, r0
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e185      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_RCC_OscConfig+0x338>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4013      	ands	r3, r2
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d10e      	bne.n	8001540 <HAL_RCC_OscConfig+0x33c>
 8001522:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001524:	6a1a      	ldr	r2, [r3, #32]
 8001526:	4b02      	ldr	r3, [pc, #8]	; (8001530 <HAL_RCC_OscConfig+0x32c>)
 8001528:	2101      	movs	r1, #1
 800152a:	430a      	orrs	r2, r1
 800152c:	621a      	str	r2, [r3, #32]
 800152e:	e035      	b.n	800159c <HAL_RCC_OscConfig+0x398>
 8001530:	40021000 	.word	0x40021000
 8001534:	fffeffff 	.word	0xfffeffff
 8001538:	fffbffff 	.word	0xfffbffff
 800153c:	40007000 	.word	0x40007000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0x35e>
 8001548:	4bb6      	ldr	r3, [pc, #728]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800154a:	6a1a      	ldr	r2, [r3, #32]
 800154c:	4bb5      	ldr	r3, [pc, #724]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800154e:	2101      	movs	r1, #1
 8001550:	438a      	bics	r2, r1
 8001552:	621a      	str	r2, [r3, #32]
 8001554:	4bb3      	ldr	r3, [pc, #716]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001556:	6a1a      	ldr	r2, [r3, #32]
 8001558:	4bb2      	ldr	r3, [pc, #712]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800155a:	2104      	movs	r1, #4
 800155c:	438a      	bics	r2, r1
 800155e:	621a      	str	r2, [r3, #32]
 8001560:	e01c      	b.n	800159c <HAL_RCC_OscConfig+0x398>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b05      	cmp	r3, #5
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x380>
 800156a:	4bae      	ldr	r3, [pc, #696]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800156c:	6a1a      	ldr	r2, [r3, #32]
 800156e:	4bad      	ldr	r3, [pc, #692]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001570:	2104      	movs	r1, #4
 8001572:	430a      	orrs	r2, r1
 8001574:	621a      	str	r2, [r3, #32]
 8001576:	4bab      	ldr	r3, [pc, #684]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001578:	6a1a      	ldr	r2, [r3, #32]
 800157a:	4baa      	ldr	r3, [pc, #680]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800157c:	2101      	movs	r1, #1
 800157e:	430a      	orrs	r2, r1
 8001580:	621a      	str	r2, [r3, #32]
 8001582:	e00b      	b.n	800159c <HAL_RCC_OscConfig+0x398>
 8001584:	4ba7      	ldr	r3, [pc, #668]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001586:	6a1a      	ldr	r2, [r3, #32]
 8001588:	4ba6      	ldr	r3, [pc, #664]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800158a:	2101      	movs	r1, #1
 800158c:	438a      	bics	r2, r1
 800158e:	621a      	str	r2, [r3, #32]
 8001590:	4ba4      	ldr	r3, [pc, #656]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001592:	6a1a      	ldr	r2, [r3, #32]
 8001594:	4ba3      	ldr	r3, [pc, #652]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001596:	2104      	movs	r1, #4
 8001598:	438a      	bics	r2, r1
 800159a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d014      	beq.n	80015ce <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff fa3e 	bl	8000a24 <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ac:	e009      	b.n	80015c2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ae:	f7ff fa39 	bl	8000a24 <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	4a9b      	ldr	r2, [pc, #620]	; (8001828 <HAL_RCC_OscConfig+0x624>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e12b      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c2:	4b98      	ldr	r3, [pc, #608]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	2202      	movs	r2, #2
 80015c8:	4013      	ands	r3, r2
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x3aa>
 80015cc:	e013      	b.n	80015f6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ce:	f7ff fa29 	bl	8000a24 <HAL_GetTick>
 80015d2:	0003      	movs	r3, r0
 80015d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d6:	e009      	b.n	80015ec <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d8:	f7ff fa24 	bl	8000a24 <HAL_GetTick>
 80015dc:	0002      	movs	r2, r0
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	4a91      	ldr	r2, [pc, #580]	; (8001828 <HAL_RCC_OscConfig+0x624>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e116      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ec:	4b8d      	ldr	r3, [pc, #564]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	2202      	movs	r2, #2
 80015f2:	4013      	ands	r3, r2
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015f6:	231f      	movs	r3, #31
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001600:	4b88      	ldr	r3, [pc, #544]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001602:	69da      	ldr	r2, [r3, #28]
 8001604:	4b87      	ldr	r3, [pc, #540]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001606:	4989      	ldr	r1, [pc, #548]	; (800182c <HAL_RCC_OscConfig+0x628>)
 8001608:	400a      	ands	r2, r1
 800160a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2210      	movs	r2, #16
 8001612:	4013      	ands	r3, r2
 8001614:	d063      	beq.n	80016de <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d12a      	bne.n	8001674 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800161e:	4b81      	ldr	r3, [pc, #516]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001622:	4b80      	ldr	r3, [pc, #512]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001624:	2104      	movs	r1, #4
 8001626:	430a      	orrs	r2, r1
 8001628:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800162a:	4b7e      	ldr	r3, [pc, #504]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800162c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800162e:	4b7d      	ldr	r3, [pc, #500]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001630:	2101      	movs	r1, #1
 8001632:	430a      	orrs	r2, r1
 8001634:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001636:	f7ff f9f5 	bl	8000a24 <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001640:	f7ff f9f0 	bl	8000a24 <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e0e3      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001652:	4b74      	ldr	r3, [pc, #464]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001656:	2202      	movs	r2, #2
 8001658:	4013      	ands	r3, r2
 800165a:	d0f1      	beq.n	8001640 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800165c:	4b71      	ldr	r3, [pc, #452]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800165e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001660:	22f8      	movs	r2, #248	; 0xf8
 8001662:	4393      	bics	r3, r2
 8001664:	0019      	movs	r1, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	00da      	lsls	r2, r3, #3
 800166c:	4b6d      	ldr	r3, [pc, #436]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800166e:	430a      	orrs	r2, r1
 8001670:	635a      	str	r2, [r3, #52]	; 0x34
 8001672:	e034      	b.n	80016de <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	3305      	adds	r3, #5
 800167a:	d111      	bne.n	80016a0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800167c:	4b69      	ldr	r3, [pc, #420]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800167e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001680:	4b68      	ldr	r3, [pc, #416]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001682:	2104      	movs	r1, #4
 8001684:	438a      	bics	r2, r1
 8001686:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001688:	4b66      	ldr	r3, [pc, #408]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800168a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168c:	22f8      	movs	r2, #248	; 0xf8
 800168e:	4393      	bics	r3, r2
 8001690:	0019      	movs	r1, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	00da      	lsls	r2, r3, #3
 8001698:	4b62      	ldr	r3, [pc, #392]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800169a:	430a      	orrs	r2, r1
 800169c:	635a      	str	r2, [r3, #52]	; 0x34
 800169e:	e01e      	b.n	80016de <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016a0:	4b60      	ldr	r3, [pc, #384]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80016a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a4:	4b5f      	ldr	r3, [pc, #380]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80016a6:	2104      	movs	r1, #4
 80016a8:	430a      	orrs	r2, r1
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80016ac:	4b5d      	ldr	r3, [pc, #372]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80016ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b0:	4b5c      	ldr	r3, [pc, #368]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	438a      	bics	r2, r1
 80016b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b8:	f7ff f9b4 	bl	8000a24 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016c2:	f7ff f9af 	bl	8000a24 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e0a2      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016d4:	4b53      	ldr	r3, [pc, #332]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80016d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d8:	2202      	movs	r2, #2
 80016da:	4013      	ands	r3, r2
 80016dc:	d1f1      	bne.n	80016c2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d100      	bne.n	80016e8 <HAL_RCC_OscConfig+0x4e4>
 80016e6:	e097      	b.n	8001818 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016e8:	4b4e      	ldr	r3, [pc, #312]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	220c      	movs	r2, #12
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d100      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4f2>
 80016f4:	e06b      	b.n	80017ce <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d14c      	bne.n	8001798 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b49      	ldr	r3, [pc, #292]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b48      	ldr	r3, [pc, #288]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001704:	494a      	ldr	r1, [pc, #296]	; (8001830 <HAL_RCC_OscConfig+0x62c>)
 8001706:	400a      	ands	r2, r1
 8001708:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170a:	f7ff f98b 	bl	8000a24 <HAL_GetTick>
 800170e:	0003      	movs	r3, r0
 8001710:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff f986 	bl	8000a24 <HAL_GetTick>
 8001718:	0002      	movs	r2, r0
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e079      	b.n	800181a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001726:	4b3f      	ldr	r3, [pc, #252]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	2380      	movs	r3, #128	; 0x80
 800172c:	049b      	lsls	r3, r3, #18
 800172e:	4013      	ands	r3, r2
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001732:	4b3c      	ldr	r3, [pc, #240]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	220f      	movs	r2, #15
 8001738:	4393      	bics	r3, r2
 800173a:	0019      	movs	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001740:	4b38      	ldr	r3, [pc, #224]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001742:	430a      	orrs	r2, r1
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
 8001746:	4b37      	ldr	r3, [pc, #220]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	4a3a      	ldr	r2, [pc, #232]	; (8001834 <HAL_RCC_OscConfig+0x630>)
 800174c:	4013      	ands	r3, r2
 800174e:	0019      	movs	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	431a      	orrs	r2, r3
 800175a:	4b32      	ldr	r3, [pc, #200]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800175c:	430a      	orrs	r2, r1
 800175e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001760:	4b30      	ldr	r3, [pc, #192]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b2f      	ldr	r3, [pc, #188]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 8001766:	2180      	movs	r1, #128	; 0x80
 8001768:	0449      	lsls	r1, r1, #17
 800176a:	430a      	orrs	r2, r1
 800176c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff f959 	bl	8000a24 <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff f954 	bl	8000a24 <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e047      	b.n	800181a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800178a:	4b26      	ldr	r3, [pc, #152]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	049b      	lsls	r3, r3, #18
 8001792:	4013      	ands	r3, r2
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x574>
 8001796:	e03f      	b.n	8001818 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b21      	ldr	r3, [pc, #132]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 800179e:	4924      	ldr	r1, [pc, #144]	; (8001830 <HAL_RCC_OscConfig+0x62c>)
 80017a0:	400a      	ands	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff f93e 	bl	8000a24 <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff f939 	bl	8000a24 <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e02c      	b.n	800181a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	049b      	lsls	r3, r3, #18
 80017c8:	4013      	ands	r3, r2
 80017ca:	d1f0      	bne.n	80017ae <HAL_RCC_OscConfig+0x5aa>
 80017cc:	e024      	b.n	8001818 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e01f      	b.n	800181a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_RCC_OscConfig+0x620>)
 80017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	025b      	lsls	r3, r3, #9
 80017ec:	401a      	ands	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d10e      	bne.n	8001814 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	220f      	movs	r2, #15
 80017fa:	401a      	ands	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d107      	bne.n	8001814 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	23f0      	movs	r3, #240	; 0xf0
 8001808:	039b      	lsls	r3, r3, #14
 800180a:	401a      	ands	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	b008      	add	sp, #32
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	40021000 	.word	0x40021000
 8001828:	00001388 	.word	0x00001388
 800182c:	efffffff 	.word	0xefffffff
 8001830:	feffffff 	.word	0xfeffffff
 8001834:	ffc2ffff 	.word	0xffc2ffff

08001838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e0b3      	b.n	80019b4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800184c:	4b5b      	ldr	r3, [pc, #364]	; (80019bc <HAL_RCC_ClockConfig+0x184>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2201      	movs	r2, #1
 8001852:	4013      	ands	r3, r2
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d911      	bls.n	800187e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b58      	ldr	r3, [pc, #352]	; (80019bc <HAL_RCC_ClockConfig+0x184>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2201      	movs	r2, #1
 8001860:	4393      	bics	r3, r2
 8001862:	0019      	movs	r1, r3
 8001864:	4b55      	ldr	r3, [pc, #340]	; (80019bc <HAL_RCC_ClockConfig+0x184>)
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186c:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_RCC_ClockConfig+0x184>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	4013      	ands	r3, r2
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d001      	beq.n	800187e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e09a      	b.n	80019b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2202      	movs	r2, #2
 8001884:	4013      	ands	r3, r2
 8001886:	d015      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2204      	movs	r2, #4
 800188e:	4013      	ands	r3, r2
 8001890:	d006      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001892:	4b4b      	ldr	r3, [pc, #300]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	4b4a      	ldr	r3, [pc, #296]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 8001898:	21e0      	movs	r1, #224	; 0xe0
 800189a:	00c9      	lsls	r1, r1, #3
 800189c:	430a      	orrs	r2, r1
 800189e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a0:	4b47      	ldr	r3, [pc, #284]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	22f0      	movs	r2, #240	; 0xf0
 80018a6:	4393      	bics	r3, r2
 80018a8:	0019      	movs	r1, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	4b44      	ldr	r3, [pc, #272]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 80018b0:	430a      	orrs	r2, r1
 80018b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2201      	movs	r2, #1
 80018ba:	4013      	ands	r3, r2
 80018bc:	d040      	beq.n	8001940 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c6:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	029b      	lsls	r3, r3, #10
 80018ce:	4013      	ands	r3, r2
 80018d0:	d114      	bne.n	80018fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06e      	b.n	80019b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018de:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	049b      	lsls	r3, r3, #18
 80018e6:	4013      	ands	r3, r2
 80018e8:	d108      	bne.n	80018fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e062      	b.n	80019b4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ee:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2202      	movs	r2, #2
 80018f4:	4013      	ands	r3, r2
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e05b      	b.n	80019b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018fc:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2203      	movs	r2, #3
 8001902:	4393      	bics	r3, r2
 8001904:	0019      	movs	r1, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 800190c:	430a      	orrs	r2, r1
 800190e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001910:	f7ff f888 	bl	8000a24 <HAL_GetTick>
 8001914:	0003      	movs	r3, r0
 8001916:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001918:	e009      	b.n	800192e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191a:	f7ff f883 	bl	8000a24 <HAL_GetTick>
 800191e:	0002      	movs	r2, r0
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	4a27      	ldr	r2, [pc, #156]	; (80019c4 <HAL_RCC_ClockConfig+0x18c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e042      	b.n	80019b4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	220c      	movs	r2, #12
 8001934:	401a      	ands	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	429a      	cmp	r2, r3
 800193e:	d1ec      	bne.n	800191a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001940:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <HAL_RCC_ClockConfig+0x184>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2201      	movs	r2, #1
 8001946:	4013      	ands	r3, r2
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d211      	bcs.n	8001972 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <HAL_RCC_ClockConfig+0x184>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2201      	movs	r2, #1
 8001954:	4393      	bics	r3, r2
 8001956:	0019      	movs	r1, r3
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <HAL_RCC_ClockConfig+0x184>)
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_RCC_ClockConfig+0x184>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2201      	movs	r2, #1
 8001966:	4013      	ands	r3, r2
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d001      	beq.n	8001972 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e020      	b.n	80019b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2204      	movs	r2, #4
 8001978:	4013      	ands	r3, r2
 800197a:	d009      	beq.n	8001990 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	4a11      	ldr	r2, [pc, #68]	; (80019c8 <HAL_RCC_ClockConfig+0x190>)
 8001982:	4013      	ands	r3, r2
 8001984:	0019      	movs	r1, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 800198c:	430a      	orrs	r2, r1
 800198e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001990:	f000 f820 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8001994:	0001      	movs	r1, r0
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_RCC_ClockConfig+0x188>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	091b      	lsrs	r3, r3, #4
 800199c:	220f      	movs	r2, #15
 800199e:	4013      	ands	r3, r2
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <HAL_RCC_ClockConfig+0x194>)
 80019a2:	5cd3      	ldrb	r3, [r2, r3]
 80019a4:	000a      	movs	r2, r1
 80019a6:	40da      	lsrs	r2, r3
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_RCC_ClockConfig+0x198>)
 80019aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7fe fff3 	bl	8000998 <HAL_InitTick>
  
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b004      	add	sp, #16
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40022000 	.word	0x40022000
 80019c0:	40021000 	.word	0x40021000
 80019c4:	00001388 	.word	0x00001388
 80019c8:	fffff8ff 	.word	0xfffff8ff
 80019cc:	080028c8 	.word	0x080028c8
 80019d0:	20000000 	.word	0x20000000

080019d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	220c      	movs	r2, #12
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d002      	beq.n	8001a04 <HAL_RCC_GetSysClockFreq+0x30>
 80019fe:	2b08      	cmp	r3, #8
 8001a00:	d003      	beq.n	8001a0a <HAL_RCC_GetSysClockFreq+0x36>
 8001a02:	e02c      	b.n	8001a5e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a06:	613b      	str	r3, [r7, #16]
      break;
 8001a08:	e02c      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	0c9b      	lsrs	r3, r3, #18
 8001a0e:	220f      	movs	r2, #15
 8001a10:	4013      	ands	r3, r2
 8001a12:	4a19      	ldr	r2, [pc, #100]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a14:	5cd3      	ldrb	r3, [r2, r3]
 8001a16:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	4013      	ands	r3, r2
 8001a20:	4a16      	ldr	r2, [pc, #88]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	025b      	lsls	r3, r3, #9
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d009      	beq.n	8001a44 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	4810      	ldr	r0, [pc, #64]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a34:	f7fe fb68 	bl	8000108 <__udivsi3>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	001a      	movs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4353      	muls	r3, r2
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	e009      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	000a      	movs	r2, r1
 8001a48:	0152      	lsls	r2, r2, #5
 8001a4a:	1a52      	subs	r2, r2, r1
 8001a4c:	0193      	lsls	r3, r2, #6
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	185b      	adds	r3, r3, r1
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	613b      	str	r3, [r7, #16]
      break;
 8001a5c:	e002      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a60:	613b      	str	r3, [r7, #16]
      break;
 8001a62:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a64:	693b      	ldr	r3, [r7, #16]
}
 8001a66:	0018      	movs	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b006      	add	sp, #24
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	40021000 	.word	0x40021000
 8001a74:	007a1200 	.word	0x007a1200
 8001a78:	080028e0 	.word	0x080028e0
 8001a7c:	080028f0 	.word	0x080028f0

08001a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a84:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	0018      	movs	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	20000000 	.word	0x20000000

08001a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a98:	f7ff fff2 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001a9c:	0001      	movs	r1, r0
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aaa:	5cd3      	ldrb	r3, [r2, r3]
 8001aac:	40d9      	lsrs	r1, r3
 8001aae:	000b      	movs	r3, r1
}    
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	080028d8 	.word	0x080028d8

08001ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	025b      	lsls	r3, r3, #9
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d100      	bne.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001adc:	e08e      	b.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001ade:	2017      	movs	r0, #23
 8001ae0:	183b      	adds	r3, r7, r0
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae6:	4b57      	ldr	r3, [pc, #348]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ae8:	69da      	ldr	r2, [r3, #28]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	055b      	lsls	r3, r3, #21
 8001aee:	4013      	ands	r3, r2
 8001af0:	d110      	bne.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	4b54      	ldr	r3, [pc, #336]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001af4:	69da      	ldr	r2, [r3, #28]
 8001af6:	4b53      	ldr	r3, [pc, #332]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	0549      	lsls	r1, r1, #21
 8001afc:	430a      	orrs	r2, r1
 8001afe:	61da      	str	r2, [r3, #28]
 8001b00:	4b50      	ldr	r3, [pc, #320]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b02:	69da      	ldr	r2, [r3, #28]
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	055b      	lsls	r3, r3, #21
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0e:	183b      	adds	r3, r7, r0
 8001b10:	2201      	movs	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	4b4c      	ldr	r3, [pc, #304]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d11a      	bne.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b20:	4b49      	ldr	r3, [pc, #292]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b48      	ldr	r3, [pc, #288]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	0049      	lsls	r1, r1, #1
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2e:	f7fe ff79 	bl	8000a24 <HAL_GetTick>
 8001b32:	0003      	movs	r3, r0
 8001b34:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b36:	e008      	b.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b38:	f7fe ff74 	bl	8000a24 <HAL_GetTick>
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	; 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e077      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4a:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4013      	ands	r3, r2
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b58:	6a1a      	ldr	r2, [r3, #32]
 8001b5a:	23c0      	movs	r3, #192	; 0xc0
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4013      	ands	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d034      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	23c0      	movs	r3, #192	; 0xc0
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4013      	ands	r3, r2
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d02c      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b78:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4a33      	ldr	r2, [pc, #204]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b82:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b84:	6a1a      	ldr	r2, [r3, #32]
 8001b86:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b88:	2180      	movs	r1, #128	; 0x80
 8001b8a:	0249      	lsls	r1, r1, #9
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b90:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b92:	6a1a      	ldr	r2, [r3, #32]
 8001b94:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b96:	492e      	ldr	r1, [pc, #184]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001b98:	400a      	ands	r2, r1
 8001b9a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d013      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001baa:	f7fe ff3b 	bl	8000a24 <HAL_GetTick>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb2:	e009      	b.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb4:	f7fe ff36 	bl	8000a24 <HAL_GetTick>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	4a25      	ldr	r2, [pc, #148]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e038      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	0019      	movs	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001be2:	430a      	orrs	r2, r1
 8001be4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001be6:	2317      	movs	r3, #23
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d105      	bne.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bf2:	69da      	ldr	r2, [r3, #28]
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bf6:	4918      	ldr	r1, [pc, #96]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001bf8:	400a      	ands	r2, r1
 8001bfa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2201      	movs	r2, #1
 8001c02:	4013      	ands	r3, r2
 8001c04:	d009      	beq.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	4393      	bics	r3, r2
 8001c0e:	0019      	movs	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c16:	430a      	orrs	r2, r1
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	4013      	ands	r3, r2
 8001c22:	d009      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	2210      	movs	r2, #16
 8001c2a:	4393      	bics	r3, r2
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c34:	430a      	orrs	r2, r1
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	b006      	add	sp, #24
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40007000 	.word	0x40007000
 8001c4c:	fffffcff 	.word	0xfffffcff
 8001c50:	fffeffff 	.word	0xfffeffff
 8001c54:	00001388 	.word	0x00001388
 8001c58:	efffffff 	.word	0xefffffff

08001c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e042      	b.n	8001cf4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	223d      	movs	r2, #61	; 0x3d
 8001c72:	5c9b      	ldrb	r3, [r3, r2]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d107      	bne.n	8001c8a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	223c      	movs	r2, #60	; 0x3c
 8001c7e:	2100      	movs	r1, #0
 8001c80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	0018      	movs	r0, r3
 8001c86:	f7fe fd95 	bl	80007b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	223d      	movs	r2, #61	; 0x3d
 8001c8e:	2102      	movs	r1, #2
 8001c90:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	0019      	movs	r1, r3
 8001c9c:	0010      	movs	r0, r2
 8001c9e:	f000 f9af 	bl	8002000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2246      	movs	r2, #70	; 0x46
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	223e      	movs	r2, #62	; 0x3e
 8001cae:	2101      	movs	r1, #1
 8001cb0:	5499      	strb	r1, [r3, r2]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	223f      	movs	r2, #63	; 0x3f
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	5499      	strb	r1, [r3, r2]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	5499      	strb	r1, [r3, r2]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2241      	movs	r2, #65	; 0x41
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2242      	movs	r2, #66	; 0x42
 8001cce:	2101      	movs	r1, #1
 8001cd0:	5499      	strb	r1, [r3, r2]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2243      	movs	r2, #67	; 0x43
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	5499      	strb	r1, [r3, r2]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2244      	movs	r2, #68	; 0x44
 8001cde:	2101      	movs	r1, #1
 8001ce0:	5499      	strb	r1, [r3, r2]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2245      	movs	r2, #69	; 0x45
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	223d      	movs	r2, #61	; 0x3d
 8001cee:	2101      	movs	r1, #1
 8001cf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b002      	add	sp, #8
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	223d      	movs	r2, #61	; 0x3d
 8001d08:	5c9b      	ldrb	r3, [r3, r2]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d001      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e036      	b.n	8001d82 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	223d      	movs	r2, #61	; 0x3d
 8001d18:	2102      	movs	r1, #2
 8001d1a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2101      	movs	r1, #1
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a16      	ldr	r2, [pc, #88]	; (8001d8c <HAL_TIM_Base_Start_IT+0x90>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00a      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x50>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	2380      	movs	r3, #128	; 0x80
 8001d3c:	05db      	lsls	r3, r3, #23
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d004      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0x50>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <HAL_TIM_Base_Start_IT+0x94>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d111      	bne.n	8001d70 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2207      	movs	r2, #7
 8001d54:	4013      	ands	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d010      	beq.n	8001d80 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2101      	movs	r1, #1
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d6e:	e007      	b.n	8001d80 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	0018      	movs	r0, r3
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b004      	add	sp, #16
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	40012c00 	.word	0x40012c00
 8001d90:	40000400 	.word	0x40000400

08001d94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	2202      	movs	r2, #2
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d124      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2202      	movs	r2, #2
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d11d      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	4252      	negs	r2, r2
 8001dc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2203      	movs	r2, #3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d004      	beq.n	8001dde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f000 f8fa 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001ddc:	e007      	b.n	8001dee <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f000 f8ed 	bl	8001fc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	0018      	movs	r0, r3
 8001dea:	f000 f8f9 	bl	8001fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d125      	bne.n	8001e4e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2204      	movs	r2, #4
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d11e      	bne.n	8001e4e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2205      	movs	r2, #5
 8001e16:	4252      	negs	r2, r2
 8001e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	23c0      	movs	r3, #192	; 0xc0
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d004      	beq.n	8001e38 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	0018      	movs	r0, r3
 8001e32:	f000 f8cd 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001e36:	e007      	b.n	8001e48 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 f8c0 	bl	8001fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	0018      	movs	r0, r3
 8001e44:	f000 f8cc 	bl	8001fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	2208      	movs	r2, #8
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d124      	bne.n	8001ea6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2208      	movs	r2, #8
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d11d      	bne.n	8001ea6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2209      	movs	r2, #9
 8001e70:	4252      	negs	r2, r2
 8001e72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2204      	movs	r2, #4
 8001e78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2203      	movs	r2, #3
 8001e82:	4013      	ands	r3, r2
 8001e84:	d004      	beq.n	8001e90 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f000 f8a1 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001e8e:	e007      	b.n	8001ea0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	0018      	movs	r0, r3
 8001e94:	f000 f894 	bl	8001fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f000 f8a0 	bl	8001fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	2210      	movs	r2, #16
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b10      	cmp	r3, #16
 8001eb2:	d125      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2210      	movs	r2, #16
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b10      	cmp	r3, #16
 8001ec0:	d11e      	bne.n	8001f00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2211      	movs	r2, #17
 8001ec8:	4252      	negs	r2, r2
 8001eca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2208      	movs	r2, #8
 8001ed0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	23c0      	movs	r3, #192	; 0xc0
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4013      	ands	r3, r2
 8001ede:	d004      	beq.n	8001eea <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f000 f874 	bl	8001fd0 <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e007      	b.n	8001efa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	0018      	movs	r0, r3
 8001eee:	f000 f867 	bl	8001fc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f000 f873 	bl	8001fe0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2201      	movs	r2, #1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d10f      	bne.n	8001f2e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d108      	bne.n	8001f2e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2202      	movs	r2, #2
 8001f22:	4252      	negs	r2, r2
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	0018      	movs	r0, r3
 8001f2a:	f7fe fb63 	bl	80005f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b80      	cmp	r3, #128	; 0x80
 8001f3a:	d10f      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	2280      	movs	r2, #128	; 0x80
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b80      	cmp	r3, #128	; 0x80
 8001f48:	d108      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2281      	movs	r2, #129	; 0x81
 8001f50:	4252      	negs	r2, r2
 8001f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	0018      	movs	r0, r3
 8001f58:	f000 f8d0 	bl	80020fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	2240      	movs	r2, #64	; 0x40
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b40      	cmp	r3, #64	; 0x40
 8001f68:	d10f      	bne.n	8001f8a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	2240      	movs	r2, #64	; 0x40
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b40      	cmp	r3, #64	; 0x40
 8001f76:	d108      	bne.n	8001f8a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2241      	movs	r2, #65	; 0x41
 8001f7e:	4252      	negs	r2, r2
 8001f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	0018      	movs	r0, r3
 8001f86:	f000 f833 	bl	8001ff0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	2220      	movs	r2, #32
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d10f      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	d108      	bne.n	8001fb8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2221      	movs	r2, #33	; 0x21
 8001fac:	4252      	negs	r2, r2
 8001fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f000 f89a 	bl	80020ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fc8:	46c0      	nop			; (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b002      	add	sp, #8
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fd8:	46c0      	nop			; (mov r8, r8)
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b002      	add	sp, #8
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fe8:	46c0      	nop			; (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b002      	add	sp, #8
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff8:	46c0      	nop			; (mov r8, r8)
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b002      	add	sp, #8
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a30      	ldr	r2, [pc, #192]	; (80020d4 <TIM_Base_SetConfig+0xd4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d008      	beq.n	800202a <TIM_Base_SetConfig+0x2a>
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	05db      	lsls	r3, r3, #23
 800201e:	429a      	cmp	r2, r3
 8002020:	d003      	beq.n	800202a <TIM_Base_SetConfig+0x2a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a2c      	ldr	r2, [pc, #176]	; (80020d8 <TIM_Base_SetConfig+0xd8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d108      	bne.n	800203c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2270      	movs	r2, #112	; 0x70
 800202e:	4393      	bics	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a25      	ldr	r2, [pc, #148]	; (80020d4 <TIM_Base_SetConfig+0xd4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d014      	beq.n	800206e <TIM_Base_SetConfig+0x6e>
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	05db      	lsls	r3, r3, #23
 800204a:	429a      	cmp	r2, r3
 800204c:	d00f      	beq.n	800206e <TIM_Base_SetConfig+0x6e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a21      	ldr	r2, [pc, #132]	; (80020d8 <TIM_Base_SetConfig+0xd8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00b      	beq.n	800206e <TIM_Base_SetConfig+0x6e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a20      	ldr	r2, [pc, #128]	; (80020dc <TIM_Base_SetConfig+0xdc>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d007      	beq.n	800206e <TIM_Base_SetConfig+0x6e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a1f      	ldr	r2, [pc, #124]	; (80020e0 <TIM_Base_SetConfig+0xe0>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d003      	beq.n	800206e <TIM_Base_SetConfig+0x6e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <TIM_Base_SetConfig+0xe4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d108      	bne.n	8002080 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	4a1d      	ldr	r2, [pc, #116]	; (80020e8 <TIM_Base_SetConfig+0xe8>)
 8002072:	4013      	ands	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	4313      	orrs	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2280      	movs	r2, #128	; 0x80
 8002084:	4393      	bics	r3, r2
 8002086:	001a      	movs	r2, r3
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	4313      	orrs	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <TIM_Base_SetConfig+0xd4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <TIM_Base_SetConfig+0xbe>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <TIM_Base_SetConfig+0xe0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d003      	beq.n	80020be <TIM_Base_SetConfig+0xbe>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <TIM_Base_SetConfig+0xe4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d103      	bne.n	80020c6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	615a      	str	r2, [r3, #20]
}
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b004      	add	sp, #16
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40012c00 	.word	0x40012c00
 80020d8:	40000400 	.word	0x40000400
 80020dc:	40002000 	.word	0x40002000
 80020e0:	40014400 	.word	0x40014400
 80020e4:	40014800 	.word	0x40014800
 80020e8:	fffffcff 	.word	0xfffffcff

080020ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002104:	46c0      	nop			; (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	b002      	add	sp, #8
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e044      	b.n	80021a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d107      	bne.n	8002136 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2278      	movs	r2, #120	; 0x78
 800212a:	2100      	movs	r1, #0
 800212c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	0018      	movs	r0, r3
 8002132:	f7fe fb67 	bl	8000804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2224      	movs	r2, #36	; 0x24
 800213a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2101      	movs	r1, #1
 8002148:	438a      	bics	r2, r1
 800214a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	0018      	movs	r0, r3
 8002150:	f000 f830 	bl	80021b4 <UART_SetConfig>
 8002154:	0003      	movs	r3, r0
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e024      	b.n	80021a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	0018      	movs	r0, r3
 800216a:	f000 f94b 	bl	8002404 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	490d      	ldr	r1, [pc, #52]	; (80021b0 <HAL_UART_Init+0xa4>)
 800217a:	400a      	ands	r2, r1
 800217c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	212a      	movs	r1, #42	; 0x2a
 800218a:	438a      	bics	r2, r1
 800218c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2101      	movs	r1, #1
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f000 f9e3 	bl	800256c <UART_CheckIdleState>
 80021a6:	0003      	movs	r3, r0
}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b002      	add	sp, #8
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	ffffb7ff 	.word	0xffffb7ff

080021b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80021bc:	231e      	movs	r3, #30
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a83      	ldr	r2, [pc, #524]	; (80023f0 <UART_SetConfig+0x23c>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	0019      	movs	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4a7e      	ldr	r2, [pc, #504]	; (80023f4 <UART_SetConfig+0x240>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	0019      	movs	r1, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4a75      	ldr	r2, [pc, #468]	; (80023f8 <UART_SetConfig+0x244>)
 8002222:	4013      	ands	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	430a      	orrs	r2, r1
 800222e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002230:	4b72      	ldr	r3, [pc, #456]	; (80023fc <UART_SetConfig+0x248>)
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	2203      	movs	r2, #3
 8002236:	4013      	ands	r3, r2
 8002238:	2b03      	cmp	r3, #3
 800223a:	d00d      	beq.n	8002258 <UART_SetConfig+0xa4>
 800223c:	d81b      	bhi.n	8002276 <UART_SetConfig+0xc2>
 800223e:	2b02      	cmp	r3, #2
 8002240:	d014      	beq.n	800226c <UART_SetConfig+0xb8>
 8002242:	d818      	bhi.n	8002276 <UART_SetConfig+0xc2>
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <UART_SetConfig+0x9a>
 8002248:	2b01      	cmp	r3, #1
 800224a:	d00a      	beq.n	8002262 <UART_SetConfig+0xae>
 800224c:	e013      	b.n	8002276 <UART_SetConfig+0xc2>
 800224e:	231f      	movs	r3, #31
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	e012      	b.n	800227e <UART_SetConfig+0xca>
 8002258:	231f      	movs	r3, #31
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	2202      	movs	r2, #2
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	e00d      	b.n	800227e <UART_SetConfig+0xca>
 8002262:	231f      	movs	r3, #31
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	2204      	movs	r2, #4
 8002268:	701a      	strb	r2, [r3, #0]
 800226a:	e008      	b.n	800227e <UART_SetConfig+0xca>
 800226c:	231f      	movs	r3, #31
 800226e:	18fb      	adds	r3, r7, r3
 8002270:	2208      	movs	r2, #8
 8002272:	701a      	strb	r2, [r3, #0]
 8002274:	e003      	b.n	800227e <UART_SetConfig+0xca>
 8002276:	231f      	movs	r3, #31
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	2210      	movs	r2, #16
 800227c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69da      	ldr	r2, [r3, #28]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	429a      	cmp	r2, r3
 8002288:	d15c      	bne.n	8002344 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 800228a:	231f      	movs	r3, #31
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b08      	cmp	r3, #8
 8002292:	d015      	beq.n	80022c0 <UART_SetConfig+0x10c>
 8002294:	dc18      	bgt.n	80022c8 <UART_SetConfig+0x114>
 8002296:	2b04      	cmp	r3, #4
 8002298:	d00d      	beq.n	80022b6 <UART_SetConfig+0x102>
 800229a:	dc15      	bgt.n	80022c8 <UART_SetConfig+0x114>
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <UART_SetConfig+0xf2>
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d005      	beq.n	80022b0 <UART_SetConfig+0xfc>
 80022a4:	e010      	b.n	80022c8 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80022a6:	f7ff fbf5 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 80022aa:	0003      	movs	r3, r0
 80022ac:	61bb      	str	r3, [r7, #24]
        break;
 80022ae:	e012      	b.n	80022d6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022b0:	4b53      	ldr	r3, [pc, #332]	; (8002400 <UART_SetConfig+0x24c>)
 80022b2:	61bb      	str	r3, [r7, #24]
        break;
 80022b4:	e00f      	b.n	80022d6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022b6:	f7ff fb8d 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 80022ba:	0003      	movs	r3, r0
 80022bc:	61bb      	str	r3, [r7, #24]
        break;
 80022be:	e00a      	b.n	80022d6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	021b      	lsls	r3, r3, #8
 80022c4:	61bb      	str	r3, [r7, #24]
        break;
 80022c6:	e006      	b.n	80022d6 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80022cc:	231e      	movs	r3, #30
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]
        break;
 80022d4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d100      	bne.n	80022de <UART_SetConfig+0x12a>
 80022dc:	e07a      	b.n	80023d4 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	005a      	lsls	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	085b      	lsrs	r3, r3, #1
 80022e8:	18d2      	adds	r2, r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	0019      	movs	r1, r3
 80022f0:	0010      	movs	r0, r2
 80022f2:	f7fd ff09 	bl	8000108 <__udivsi3>
 80022f6:	0003      	movs	r3, r0
 80022f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b0f      	cmp	r3, #15
 80022fe:	d91c      	bls.n	800233a <UART_SetConfig+0x186>
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	025b      	lsls	r3, r3, #9
 8002306:	429a      	cmp	r2, r3
 8002308:	d217      	bcs.n	800233a <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	b29a      	uxth	r2, r3
 800230e:	200e      	movs	r0, #14
 8002310:	183b      	adds	r3, r7, r0
 8002312:	210f      	movs	r1, #15
 8002314:	438a      	bics	r2, r1
 8002316:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	085b      	lsrs	r3, r3, #1
 800231c:	b29b      	uxth	r3, r3
 800231e:	2207      	movs	r2, #7
 8002320:	4013      	ands	r3, r2
 8002322:	b299      	uxth	r1, r3
 8002324:	183b      	adds	r3, r7, r0
 8002326:	183a      	adds	r2, r7, r0
 8002328:	8812      	ldrh	r2, [r2, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	183a      	adds	r2, r7, r0
 8002334:	8812      	ldrh	r2, [r2, #0]
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	e04c      	b.n	80023d4 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 800233a:	231e      	movs	r3, #30
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	e047      	b.n	80023d4 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002344:	231f      	movs	r3, #31
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b08      	cmp	r3, #8
 800234c:	d015      	beq.n	800237a <UART_SetConfig+0x1c6>
 800234e:	dc18      	bgt.n	8002382 <UART_SetConfig+0x1ce>
 8002350:	2b04      	cmp	r3, #4
 8002352:	d00d      	beq.n	8002370 <UART_SetConfig+0x1bc>
 8002354:	dc15      	bgt.n	8002382 <UART_SetConfig+0x1ce>
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <UART_SetConfig+0x1ac>
 800235a:	2b02      	cmp	r3, #2
 800235c:	d005      	beq.n	800236a <UART_SetConfig+0x1b6>
 800235e:	e010      	b.n	8002382 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002360:	f7ff fb98 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 8002364:	0003      	movs	r3, r0
 8002366:	61bb      	str	r3, [r7, #24]
        break;
 8002368:	e012      	b.n	8002390 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800236a:	4b25      	ldr	r3, [pc, #148]	; (8002400 <UART_SetConfig+0x24c>)
 800236c:	61bb      	str	r3, [r7, #24]
        break;
 800236e:	e00f      	b.n	8002390 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002370:	f7ff fb30 	bl	80019d4 <HAL_RCC_GetSysClockFreq>
 8002374:	0003      	movs	r3, r0
 8002376:	61bb      	str	r3, [r7, #24]
        break;
 8002378:	e00a      	b.n	8002390 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	61bb      	str	r3, [r7, #24]
        break;
 8002380:	e006      	b.n	8002390 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002386:	231e      	movs	r3, #30
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
        break;
 800238e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d01e      	beq.n	80023d4 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	085a      	lsrs	r2, r3, #1
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	18d2      	adds	r2, r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	0019      	movs	r1, r3
 80023a6:	0010      	movs	r0, r2
 80023a8:	f7fd feae 	bl	8000108 <__udivsi3>
 80023ac:	0003      	movs	r3, r0
 80023ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	2b0f      	cmp	r3, #15
 80023b4:	d90a      	bls.n	80023cc <UART_SetConfig+0x218>
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	025b      	lsls	r3, r3, #9
 80023bc:	429a      	cmp	r2, r3
 80023be:	d205      	bcs.n	80023cc <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	e003      	b.n	80023d4 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 80023cc:	231e      	movs	r3, #30
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80023e0:	231e      	movs	r3, #30
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	781b      	ldrb	r3, [r3, #0]
}
 80023e6:	0018      	movs	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b008      	add	sp, #32
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	ffff69f3 	.word	0xffff69f3
 80023f4:	ffffcfff 	.word	0xffffcfff
 80023f8:	fffff4ff 	.word	0xfffff4ff
 80023fc:	40021000 	.word	0x40021000
 8002400:	007a1200 	.word	0x007a1200

08002404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	2201      	movs	r2, #1
 8002412:	4013      	ands	r3, r2
 8002414:	d00b      	beq.n	800242e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a4a      	ldr	r2, [pc, #296]	; (8002548 <UART_AdvFeatureConfig+0x144>)
 800241e:	4013      	ands	r3, r2
 8002420:	0019      	movs	r1, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	2202      	movs	r2, #2
 8002434:	4013      	ands	r3, r2
 8002436:	d00b      	beq.n	8002450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	4a43      	ldr	r2, [pc, #268]	; (800254c <UART_AdvFeatureConfig+0x148>)
 8002440:	4013      	ands	r3, r2
 8002442:	0019      	movs	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	2204      	movs	r2, #4
 8002456:	4013      	ands	r3, r2
 8002458:	d00b      	beq.n	8002472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a3b      	ldr	r2, [pc, #236]	; (8002550 <UART_AdvFeatureConfig+0x14c>)
 8002462:	4013      	ands	r3, r2
 8002464:	0019      	movs	r1, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	2208      	movs	r2, #8
 8002478:	4013      	ands	r3, r2
 800247a:	d00b      	beq.n	8002494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4a34      	ldr	r2, [pc, #208]	; (8002554 <UART_AdvFeatureConfig+0x150>)
 8002484:	4013      	ands	r3, r2
 8002486:	0019      	movs	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	2210      	movs	r2, #16
 800249a:	4013      	ands	r3, r2
 800249c:	d00b      	beq.n	80024b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4a2c      	ldr	r2, [pc, #176]	; (8002558 <UART_AdvFeatureConfig+0x154>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	2220      	movs	r2, #32
 80024bc:	4013      	ands	r3, r2
 80024be:	d00b      	beq.n	80024d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	4a25      	ldr	r2, [pc, #148]	; (800255c <UART_AdvFeatureConfig+0x158>)
 80024c8:	4013      	ands	r3, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	2240      	movs	r2, #64	; 0x40
 80024de:	4013      	ands	r3, r2
 80024e0:	d01d      	beq.n	800251e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4a1d      	ldr	r2, [pc, #116]	; (8002560 <UART_AdvFeatureConfig+0x15c>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	035b      	lsls	r3, r3, #13
 8002502:	429a      	cmp	r2, r3
 8002504:	d10b      	bne.n	800251e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a15      	ldr	r2, [pc, #84]	; (8002564 <UART_AdvFeatureConfig+0x160>)
 800250e:	4013      	ands	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	2280      	movs	r2, #128	; 0x80
 8002524:	4013      	ands	r3, r2
 8002526:	d00b      	beq.n	8002540 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <UART_AdvFeatureConfig+0x164>)
 8002530:	4013      	ands	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	605a      	str	r2, [r3, #4]
  }
}
 8002540:	46c0      	nop			; (mov r8, r8)
 8002542:	46bd      	mov	sp, r7
 8002544:	b002      	add	sp, #8
 8002546:	bd80      	pop	{r7, pc}
 8002548:	fffdffff 	.word	0xfffdffff
 800254c:	fffeffff 	.word	0xfffeffff
 8002550:	fffbffff 	.word	0xfffbffff
 8002554:	ffff7fff 	.word	0xffff7fff
 8002558:	ffffefff 	.word	0xffffefff
 800255c:	ffffdfff 	.word	0xffffdfff
 8002560:	ffefffff 	.word	0xffefffff
 8002564:	ff9fffff 	.word	0xff9fffff
 8002568:	fff7ffff 	.word	0xfff7ffff

0800256c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b092      	sub	sp, #72	; 0x48
 8002570:	af02      	add	r7, sp, #8
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2284      	movs	r2, #132	; 0x84
 8002578:	2100      	movs	r1, #0
 800257a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800257c:	f7fe fa52 	bl	8000a24 <HAL_GetTick>
 8002580:	0003      	movs	r3, r0
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2208      	movs	r2, #8
 800258c:	4013      	ands	r3, r2
 800258e:	2b08      	cmp	r3, #8
 8002590:	d12c      	bne.n	80025ec <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002594:	2280      	movs	r2, #128	; 0x80
 8002596:	0391      	lsls	r1, r2, #14
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	4a46      	ldr	r2, [pc, #280]	; (80026b4 <UART_CheckIdleState+0x148>)
 800259c:	9200      	str	r2, [sp, #0]
 800259e:	2200      	movs	r2, #0
 80025a0:	f000 f88c 	bl	80026bc <UART_WaitOnFlagUntilTimeout>
 80025a4:	1e03      	subs	r3, r0, #0
 80025a6:	d021      	beq.n	80025ec <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025a8:	f3ef 8310 	mrs	r3, PRIMASK
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80025b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80025b2:	2301      	movs	r3, #1
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b8:	f383 8810 	msr	PRIMASK, r3
}
 80025bc:	46c0      	nop			; (mov r8, r8)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2180      	movs	r1, #128	; 0x80
 80025ca:	438a      	bics	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d4:	f383 8810 	msr	PRIMASK, r3
}
 80025d8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2220      	movs	r2, #32
 80025de:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2278      	movs	r2, #120	; 0x78
 80025e4:	2100      	movs	r1, #0
 80025e6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e05f      	b.n	80026ac <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2204      	movs	r2, #4
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d146      	bne.n	8002688 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80025fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025fc:	2280      	movs	r2, #128	; 0x80
 80025fe:	03d1      	lsls	r1, r2, #15
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	4a2c      	ldr	r2, [pc, #176]	; (80026b4 <UART_CheckIdleState+0x148>)
 8002604:	9200      	str	r2, [sp, #0]
 8002606:	2200      	movs	r2, #0
 8002608:	f000 f858 	bl	80026bc <UART_WaitOnFlagUntilTimeout>
 800260c:	1e03      	subs	r3, r0, #0
 800260e:	d03b      	beq.n	8002688 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002610:	f3ef 8310 	mrs	r3, PRIMASK
 8002614:	60fb      	str	r3, [r7, #12]
  return(result);
 8002616:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002618:	637b      	str	r3, [r7, #52]	; 0x34
 800261a:	2301      	movs	r3, #1
 800261c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f383 8810 	msr	PRIMASK, r3
}
 8002624:	46c0      	nop			; (mov r8, r8)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4921      	ldr	r1, [pc, #132]	; (80026b8 <UART_CheckIdleState+0x14c>)
 8002632:	400a      	ands	r2, r1
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002638:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f383 8810 	msr	PRIMASK, r3
}
 8002640:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002642:	f3ef 8310 	mrs	r3, PRIMASK
 8002646:	61bb      	str	r3, [r7, #24]
  return(result);
 8002648:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800264a:	633b      	str	r3, [r7, #48]	; 0x30
 800264c:	2301      	movs	r3, #1
 800264e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f383 8810 	msr	PRIMASK, r3
}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2101      	movs	r1, #1
 8002664:	438a      	bics	r2, r1
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	f383 8810 	msr	PRIMASK, r3
}
 8002672:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2280      	movs	r2, #128	; 0x80
 8002678:	2120      	movs	r1, #32
 800267a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2278      	movs	r2, #120	; 0x78
 8002680:	2100      	movs	r1, #0
 8002682:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e011      	b.n	80026ac <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2280      	movs	r2, #128	; 0x80
 8002692:	2120      	movs	r1, #32
 8002694:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2278      	movs	r2, #120	; 0x78
 80026a6:	2100      	movs	r1, #0
 80026a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	0018      	movs	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b010      	add	sp, #64	; 0x40
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	01ffffff 	.word	0x01ffffff
 80026b8:	fffffedf 	.word	0xfffffedf

080026bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	1dfb      	adds	r3, r7, #7
 80026ca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026cc:	e04b      	b.n	8002766 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	3301      	adds	r3, #1
 80026d2:	d048      	beq.n	8002766 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d4:	f7fe f9a6 	bl	8000a24 <HAL_GetTick>
 80026d8:	0002      	movs	r2, r0
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d302      	bcc.n	80026ea <UART_WaitOnFlagUntilTimeout+0x2e>
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e04b      	b.n	8002786 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2204      	movs	r2, #4
 80026f6:	4013      	ands	r3, r2
 80026f8:	d035      	beq.n	8002766 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2208      	movs	r2, #8
 8002702:	4013      	ands	r3, r2
 8002704:	2b08      	cmp	r3, #8
 8002706:	d111      	bne.n	800272c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2208      	movs	r2, #8
 800270e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	0018      	movs	r0, r3
 8002714:	f000 f83c 	bl	8002790 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2284      	movs	r2, #132	; 0x84
 800271c:	2108      	movs	r1, #8
 800271e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2278      	movs	r2, #120	; 0x78
 8002724:	2100      	movs	r1, #0
 8002726:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e02c      	b.n	8002786 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	69da      	ldr	r2, [r3, #28]
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	401a      	ands	r2, r3
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	429a      	cmp	r2, r3
 800273e:	d112      	bne.n	8002766 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2280      	movs	r2, #128	; 0x80
 8002746:	0112      	lsls	r2, r2, #4
 8002748:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	0018      	movs	r0, r3
 800274e:	f000 f81f 	bl	8002790 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2284      	movs	r2, #132	; 0x84
 8002756:	2120      	movs	r1, #32
 8002758:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2278      	movs	r2, #120	; 0x78
 800275e:	2100      	movs	r1, #0
 8002760:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e00f      	b.n	8002786 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	68ba      	ldr	r2, [r7, #8]
 800276e:	4013      	ands	r3, r2
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	425a      	negs	r2, r3
 8002776:	4153      	adcs	r3, r2
 8002778:	b2db      	uxtb	r3, r3
 800277a:	001a      	movs	r2, r3
 800277c:	1dfb      	adds	r3, r7, #7
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	d0a4      	beq.n	80026ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	0018      	movs	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	b004      	add	sp, #16
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08e      	sub	sp, #56	; 0x38
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002798:	f3ef 8310 	mrs	r3, PRIMASK
 800279c:	617b      	str	r3, [r7, #20]
  return(result);
 800279e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027a0:	637b      	str	r3, [r7, #52]	; 0x34
 80027a2:	2301      	movs	r3, #1
 80027a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	f383 8810 	msr	PRIMASK, r3
}
 80027ac:	46c0      	nop			; (mov r8, r8)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4926      	ldr	r1, [pc, #152]	; (8002854 <UART_EndRxTransfer+0xc4>)
 80027ba:	400a      	ands	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f383 8810 	msr	PRIMASK, r3
}
 80027c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027ca:	f3ef 8310 	mrs	r3, PRIMASK
 80027ce:	623b      	str	r3, [r7, #32]
  return(result);
 80027d0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027d2:	633b      	str	r3, [r7, #48]	; 0x30
 80027d4:	2301      	movs	r3, #1
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	f383 8810 	msr	PRIMASK, r3
}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2101      	movs	r1, #1
 80027ec:	438a      	bics	r2, r1
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	f383 8810 	msr	PRIMASK, r3
}
 80027fa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002800:	2b01      	cmp	r3, #1
 8002802:	d118      	bne.n	8002836 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002804:	f3ef 8310 	mrs	r3, PRIMASK
 8002808:	60bb      	str	r3, [r7, #8]
  return(result);
 800280a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800280e:	2301      	movs	r3, #1
 8002810:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f383 8810 	msr	PRIMASK, r3
}
 8002818:	46c0      	nop			; (mov r8, r8)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2110      	movs	r1, #16
 8002826:	438a      	bics	r2, r1
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f383 8810 	msr	PRIMASK, r3
}
 8002834:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2280      	movs	r2, #128	; 0x80
 800283a:	2120      	movs	r1, #32
 800283c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	669a      	str	r2, [r3, #104]	; 0x68
}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	b00e      	add	sp, #56	; 0x38
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	fffffedf 	.word	0xfffffedf

08002858 <memset>:
 8002858:	0003      	movs	r3, r0
 800285a:	1882      	adds	r2, r0, r2
 800285c:	4293      	cmp	r3, r2
 800285e:	d100      	bne.n	8002862 <memset+0xa>
 8002860:	4770      	bx	lr
 8002862:	7019      	strb	r1, [r3, #0]
 8002864:	3301      	adds	r3, #1
 8002866:	e7f9      	b.n	800285c <memset+0x4>

08002868 <__libc_init_array>:
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	2600      	movs	r6, #0
 800286c:	4c0c      	ldr	r4, [pc, #48]	; (80028a0 <__libc_init_array+0x38>)
 800286e:	4d0d      	ldr	r5, [pc, #52]	; (80028a4 <__libc_init_array+0x3c>)
 8002870:	1b64      	subs	r4, r4, r5
 8002872:	10a4      	asrs	r4, r4, #2
 8002874:	42a6      	cmp	r6, r4
 8002876:	d109      	bne.n	800288c <__libc_init_array+0x24>
 8002878:	2600      	movs	r6, #0
 800287a:	f000 f819 	bl	80028b0 <_init>
 800287e:	4c0a      	ldr	r4, [pc, #40]	; (80028a8 <__libc_init_array+0x40>)
 8002880:	4d0a      	ldr	r5, [pc, #40]	; (80028ac <__libc_init_array+0x44>)
 8002882:	1b64      	subs	r4, r4, r5
 8002884:	10a4      	asrs	r4, r4, #2
 8002886:	42a6      	cmp	r6, r4
 8002888:	d105      	bne.n	8002896 <__libc_init_array+0x2e>
 800288a:	bd70      	pop	{r4, r5, r6, pc}
 800288c:	00b3      	lsls	r3, r6, #2
 800288e:	58eb      	ldr	r3, [r5, r3]
 8002890:	4798      	blx	r3
 8002892:	3601      	adds	r6, #1
 8002894:	e7ee      	b.n	8002874 <__libc_init_array+0xc>
 8002896:	00b3      	lsls	r3, r6, #2
 8002898:	58eb      	ldr	r3, [r5, r3]
 800289a:	4798      	blx	r3
 800289c:	3601      	adds	r6, #1
 800289e:	e7f2      	b.n	8002886 <__libc_init_array+0x1e>
 80028a0:	08002900 	.word	0x08002900
 80028a4:	08002900 	.word	0x08002900
 80028a8:	08002904 	.word	0x08002904
 80028ac:	08002900 	.word	0x08002900

080028b0 <_init>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr

080028bc <_fini>:
 80028bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c2:	bc08      	pop	{r3}
 80028c4:	469e      	mov	lr, r3
 80028c6:	4770      	bx	lr
