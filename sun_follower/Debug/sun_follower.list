
sun_follower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004388  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08004448  08004448  00014448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e4  080044e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080044e4  080044e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044e4  080044e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044e4  080044e4  000144e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044e8  080044e8  000144e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  080044f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  080044f8  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010746  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e0  00000000  00000000  000307bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f60  00000000  00000000  00032ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c34  00000000  00000000  00033b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010fcf  00000000  00000000  00034734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000132df  00000000  00000000  00045703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00067d0e  00000000  00000000  000589e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000381c  00000000  00000000  000c06f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c3f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004430 	.word	0x08004430

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004430 	.word	0x08004430

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <bcdToDec>:
{
  return (uint8_t)( (val/10*16) + (val%10) );
}

int bcdToDec(uint8_t val)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	0002      	movs	r2, r0
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	701a      	strb	r2, [r3, #0]
  return (int)( (val/16*10) + (val%16) );
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	091b      	lsrs	r3, r3, #4
 8000406:	b2db      	uxtb	r3, r3
 8000408:	001a      	movs	r2, r3
 800040a:	0013      	movs	r3, r2
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	189b      	adds	r3, r3, r2
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	0019      	movs	r1, r3
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	220f      	movs	r2, #15
 800041a:	4013      	ands	r3, r2
 800041c:	18cb      	adds	r3, r1, r3
}
 800041e:	0018      	movs	r0, r3
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}

08000426 <Get_Time>:
    //i2c_WriteMulti(DS3231_I2C_ADDR,DS3231_TIME_CAL_ADDR,(char*)TimeDate,7);
}
#endif

int Get_Time(ts *t, I2C_HandleTypeDef *hi2c1)
{
 8000426:	b5b0      	push	{r4, r5, r7, lr}
 8000428:	b08a      	sub	sp, #40	; 0x28
 800042a:	af04      	add	r7, sp, #16
 800042c:	6078      	str	r0, [r7, #4]
 800042e:	6039      	str	r1, [r7, #0]
	uint8_t TimeDate[7];
    uint8_t i;
	uint16_t year_full;

	if (HAL_I2C_Mem_Read(hi2c1, DS3231_I2C_ADDR, DS3231_TIME_CAL_ADDR, 1, TimeDate, 7, 1000) == HAL_OK)
 8000430:	6838      	ldr	r0, [r7, #0]
 8000432:	23fa      	movs	r3, #250	; 0xfa
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	9302      	str	r3, [sp, #8]
 8000438:	2307      	movs	r3, #7
 800043a:	9301      	str	r3, [sp, #4]
 800043c:	230c      	movs	r3, #12
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	9300      	str	r3, [sp, #0]
 8000442:	2301      	movs	r3, #1
 8000444:	2200      	movs	r2, #0
 8000446:	21d0      	movs	r1, #208	; 0xd0
 8000448:	f001 f986 	bl	8001758 <HAL_I2C_Mem_Read>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d161      	bne.n	8000514 <Get_Time+0xee>
    {
		for (i = 0; i <= 6; i++)
 8000450:	2317      	movs	r3, #23
 8000452:	18fb      	adds	r3, r7, r3
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
 8000458:	e029      	b.n	80004ae <Get_Time+0x88>
		{
			if (i == 5)
 800045a:	2217      	movs	r2, #23
 800045c:	18bb      	adds	r3, r7, r2
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b05      	cmp	r3, #5
 8000462:	d10f      	bne.n	8000484 <Get_Time+0x5e>
			{
				TimeDate[5] = bcdToDec(TimeDate[i] & 0x1F);
 8000464:	18bb      	adds	r3, r7, r2
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	240c      	movs	r4, #12
 800046a:	193a      	adds	r2, r7, r4
 800046c:	5cd3      	ldrb	r3, [r2, r3]
 800046e:	221f      	movs	r2, #31
 8000470:	4013      	ands	r3, r2
 8000472:	b2db      	uxtb	r3, r3
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff ffbd 	bl	80003f4 <bcdToDec>
 800047a:	0003      	movs	r3, r0
 800047c:	b2da      	uxtb	r2, r3
 800047e:	193b      	adds	r3, r7, r4
 8000480:	715a      	strb	r2, [r3, #5]
 8000482:	e00e      	b.n	80004a2 <Get_Time+0x7c>
			}
			else
			{
				TimeDate[i] = bcdToDec(TimeDate[i]);
 8000484:	2417      	movs	r4, #23
 8000486:	193b      	adds	r3, r7, r4
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	250c      	movs	r5, #12
 800048c:	197a      	adds	r2, r7, r5
 800048e:	5cd3      	ldrb	r3, [r2, r3]
 8000490:	0018      	movs	r0, r3
 8000492:	f7ff ffaf 	bl	80003f4 <bcdToDec>
 8000496:	0002      	movs	r2, r0
 8000498:	193b      	adds	r3, r7, r4
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	b2d1      	uxtb	r1, r2
 800049e:	197a      	adds	r2, r7, r5
 80004a0:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i <= 6; i++)
 80004a2:	2117      	movs	r1, #23
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	781a      	ldrb	r2, [r3, #0]
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	3201      	adds	r2, #1
 80004ac:	701a      	strb	r2, [r3, #0]
 80004ae:	2317      	movs	r3, #23
 80004b0:	18fb      	adds	r3, r7, r3
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b06      	cmp	r3, #6
 80004b6:	d9d0      	bls.n	800045a <Get_Time+0x34>
			}
		}

	year_full = 2000 + TimeDate[6];
 80004b8:	210c      	movs	r1, #12
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	799b      	ldrb	r3, [r3, #6]
 80004be:	b29a      	uxth	r2, r3
 80004c0:	2014      	movs	r0, #20
 80004c2:	183b      	adds	r3, r7, r0
 80004c4:	24fa      	movs	r4, #250	; 0xfa
 80004c6:	00e4      	lsls	r4, r4, #3
 80004c8:	46a4      	mov	ip, r4
 80004ca:	4462      	add	r2, ip
 80004cc:	801a      	strh	r2, [r3, #0]

    t->sec = TimeDate[0];
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	781a      	ldrb	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	701a      	strb	r2, [r3, #0]
    t->min = TimeDate[1];
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	785a      	ldrb	r2, [r3, #1]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	705a      	strb	r2, [r3, #1]
    t->hour = TimeDate[2];
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	789a      	ldrb	r2, [r3, #2]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	709a      	strb	r2, [r3, #2]
    t->mday = TimeDate[4];
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	791a      	ldrb	r2, [r3, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	70da      	strb	r2, [r3, #3]
    t->mon = TimeDate[5];
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	795a      	ldrb	r2, [r3, #5]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	711a      	strb	r2, [r3, #4]
    t->year = year_full;
 80004f6:	183b      	adds	r3, r7, r0
 80004f8:	2200      	movs	r2, #0
 80004fa:	5e9a      	ldrsh	r2, [r3, r2]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	80da      	strh	r2, [r3, #6]
    t->wday = TimeDate[3];
 8000500:	187b      	adds	r3, r7, r1
 8000502:	78da      	ldrb	r2, [r3, #3]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	721a      	strb	r2, [r3, #8]
    t->year_s = TimeDate[6];
 8000508:	187b      	adds	r3, r7, r1
 800050a:	799a      	ldrb	r2, [r3, #6]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	72da      	strb	r2, [r3, #11]

    return 0x01U;
 8000510:	2301      	movs	r3, #1
 8000512:	e000      	b.n	8000516 <Get_Time+0xf0>
  }
  else
  {
	  return 0xFFU;
 8000514:	23ff      	movs	r3, #255	; 0xff
  }
}
 8000516:	0018      	movs	r0, r3
 8000518:	46bd      	mov	sp, r7
 800051a:	b006      	add	sp, #24
 800051c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000520 <itoa>:
/**
 * C++ version 0.4 char* style "itoa":
 * Written by Lukás Chmela
 * Released under GPLv3.
 */
char* itoa(int value, char* result, int base) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
    // check that the base if valid
    if (base < 2 || base > 36) { *result = '\0'; return result; }
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b01      	cmp	r3, #1
 8000530:	dd02      	ble.n	8000538 <itoa+0x18>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b24      	cmp	r3, #36	; 0x24
 8000536:	dd04      	ble.n	8000542 <itoa+0x22>
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	e03f      	b.n	80005c2 <itoa+0xa2>

    char* ptr = result, *ptr1 = result, tmp_char;
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	61fb      	str	r3, [r7, #28]
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	61bb      	str	r3, [r7, #24]
    int tmp_value;

    do {
        tmp_value = value;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	617b      	str	r3, [r7, #20]
        value /= base;
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	68f8      	ldr	r0, [r7, #12]
 8000552:	f7ff fe63 	bl	800021c <__divsi3>
 8000556:	0003      	movs	r3, r0
 8000558:	60fb      	str	r3, [r7, #12]
        *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	4353      	muls	r3, r2
 8000560:	697a      	ldr	r2, [r7, #20]
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	3323      	adds	r3, #35	; 0x23
 8000566:	001a      	movs	r2, r3
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	1c59      	adds	r1, r3, #1
 800056c:	61f9      	str	r1, [r7, #28]
 800056e:	4917      	ldr	r1, [pc, #92]	; (80005cc <itoa+0xac>)
 8000570:	5c8a      	ldrb	r2, [r1, r2]
 8000572:	701a      	strb	r2, [r3, #0]
    } while ( value );
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1e7      	bne.n	800054a <itoa+0x2a>

    // Apply negative sign
    if (tmp_value < 0) *ptr++ = '-';
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	2b00      	cmp	r3, #0
 800057e:	da04      	bge.n	800058a <itoa+0x6a>
 8000580:	69fb      	ldr	r3, [r7, #28]
 8000582:	1c5a      	adds	r2, r3, #1
 8000584:	61fa      	str	r2, [r7, #28]
 8000586:	222d      	movs	r2, #45	; 0x2d
 8000588:	701a      	strb	r2, [r3, #0]
    *ptr-- = '\0';
 800058a:	69fb      	ldr	r3, [r7, #28]
 800058c:	1e5a      	subs	r2, r3, #1
 800058e:	61fa      	str	r2, [r7, #28]
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
    while(ptr1 < ptr) {
 8000594:	e010      	b.n	80005b8 <itoa+0x98>
        tmp_char = *ptr;
 8000596:	2113      	movs	r1, #19
 8000598:	187b      	adds	r3, r7, r1
 800059a:	69fa      	ldr	r2, [r7, #28]
 800059c:	7812      	ldrb	r2, [r2, #0]
 800059e:	701a      	strb	r2, [r3, #0]
        *ptr--= *ptr1;
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	1e5a      	subs	r2, r3, #1
 80005a4:	61fa      	str	r2, [r7, #28]
 80005a6:	69ba      	ldr	r2, [r7, #24]
 80005a8:	7812      	ldrb	r2, [r2, #0]
 80005aa:	701a      	strb	r2, [r3, #0]
        *ptr1++ = tmp_char;
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	61ba      	str	r2, [r7, #24]
 80005b2:	187a      	adds	r2, r7, r1
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	701a      	strb	r2, [r3, #0]
    while(ptr1 < ptr) {
 80005b8:	69ba      	ldr	r2, [r7, #24]
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d3ea      	bcc.n	8000596 <itoa+0x76>
    }
    return result;
 80005c0:	68bb      	ldr	r3, [r7, #8]
}
 80005c2:	0018      	movs	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b008      	add	sp, #32
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	08004448 	.word	0x08004448

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fc90 	bl	8000ef8 <HAL_Init>
  #endif

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f81a 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f916 	bl	800080c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005e0:	f000 f87a 	bl	80006d8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80005e4:	f000 f8e2 	bl	80007ac <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80005e8:	f000 f8b6 	bl	8000758 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <main+0x34>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f002 fa90 	bl	8002b14 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1,&recvd_data,1);
 80005f4:	4904      	ldr	r1, [pc, #16]	; (8000608 <main+0x38>)
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <main+0x3c>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	0018      	movs	r0, r3
 80005fc:	f002 fd86 	bl	800310c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x30>
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	2000007c 	.word	0x2000007c
 8000608:	20000158 	.word	0x20000158
 800060c:	200000c4 	.word	0x200000c4

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b095      	sub	sp, #84	; 0x54
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	2420      	movs	r4, #32
 8000618:	193b      	adds	r3, r7, r4
 800061a:	0018      	movs	r0, r3
 800061c:	2330      	movs	r3, #48	; 0x30
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f003 fed9 	bl	80043d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000626:	2310      	movs	r3, #16
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	0018      	movs	r0, r3
 800062c:	2310      	movs	r3, #16
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f003 fed1 	bl	80043d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000636:	003b      	movs	r3, r7
 8000638:	0018      	movs	r0, r3
 800063a:	2310      	movs	r3, #16
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f003 feca 	bl	80043d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	0021      	movs	r1, r4
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2202      	movs	r2, #2
 800064a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2201      	movs	r2, #1
 8000650:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2210      	movs	r2, #16
 8000656:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2202      	movs	r2, #2
 800065c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2200      	movs	r2, #0
 8000662:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	22a0      	movs	r2, #160	; 0xa0
 8000668:	0392      	lsls	r2, r2, #14
 800066a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	187b      	adds	r3, r7, r1
 8000674:	0018      	movs	r0, r3
 8000676:	f001 fcd1 	bl	800201c <HAL_RCC_OscConfig>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800067e:	f000 fadd 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	2110      	movs	r1, #16
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2207      	movs	r2, #7
 8000688:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2202      	movs	r2, #2
 800068e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2101      	movs	r1, #1
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 ffd5 	bl	8002650 <HAL_RCC_ClockConfig>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006aa:	f000 fac7 	bl	8000c3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80006ae:	003b      	movs	r3, r7
 80006b0:	2221      	movs	r2, #33	; 0x21
 80006b2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006b4:	003b      	movs	r3, r7
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80006ba:	003b      	movs	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006c0:	003b      	movs	r3, r7
 80006c2:	0018      	movs	r0, r3
 80006c4:	f002 f908 	bl	80028d8 <HAL_RCCEx_PeriphCLKConfig>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006cc:	f000 fab6 	bl	8000c3c <Error_Handler>
  }
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b015      	add	sp, #84	; 0x54
 80006d6:	bd90      	pop	{r4, r7, pc}

080006d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_I2C1_Init+0x74>)
 80006de:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <MX_I2C1_Init+0x78>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_I2C1_Init+0x74>)
 80006e4:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <MX_I2C1_Init+0x7c>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_I2C1_Init+0x74>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_I2C1_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2C1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_I2C1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2C1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2C1_Init+0x74>)
 8000714:	0018      	movs	r0, r3
 8000716:	f000 ff89 	bl	800162c <HAL_I2C_Init>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800071e:	f000 fa8d 	bl	8000c3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_I2C1_Init+0x74>)
 8000724:	2100      	movs	r1, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f001 fbe0 	bl	8001eec <HAL_I2CEx_ConfigAnalogFilter>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000730:	f000 fa84 	bl	8000c3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <MX_I2C1_Init+0x74>)
 8000736:	2100      	movs	r1, #0
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fc23 	bl	8001f84 <HAL_I2CEx_ConfigDigitalFilter>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000742:	f000 fa7b 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000028 	.word	0x20000028
 8000750:	40005400 	.word	0x40005400
 8000754:	2000090e 	.word	0x2000090e

08000758 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_TIM16_Init+0x44>)
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <MX_TIM16_Init+0x48>)
 8000760:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000-1;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_TIM16_Init+0x44>)
 8000764:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <MX_TIM16_Init+0x4c>)
 8000766:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_TIM16_Init+0x44>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_TIM16_Init+0x44>)
 8000770:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <MX_TIM16_Init+0x50>)
 8000772:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_TIM16_Init+0x44>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_TIM16_Init+0x44>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_TIM16_Init+0x44>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <MX_TIM16_Init+0x44>)
 8000788:	0018      	movs	r0, r3
 800078a:	f002 f973 	bl	8002a74 <HAL_TIM_Base_Init>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000792:	f000 fa53 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000007c 	.word	0x2000007c
 80007a0:	40014400 	.word	0x40014400
 80007a4:	0000bb7f 	.word	0x0000bb7f
 80007a8:	000003e7 	.word	0x000003e7

080007ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <MX_USART1_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007b8:	2296      	movs	r2, #150	; 0x96
 80007ba:	0212      	lsls	r2, r2, #8
 80007bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 fb97 	bl	8002f24 <HAL_UART_Init>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 fa1f 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000c4 	.word	0x200000c4
 8000808:	40013800 	.word	0x40013800

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	240c      	movs	r4, #12
 8000814:	193b      	adds	r3, r7, r4
 8000816:	0018      	movs	r0, r3
 8000818:	2314      	movs	r3, #20
 800081a:	001a      	movs	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	f003 fddb 	bl	80043d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000822:	4b63      	ldr	r3, [pc, #396]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 8000824:	695a      	ldr	r2, [r3, #20]
 8000826:	4b62      	ldr	r3, [pc, #392]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	03c9      	lsls	r1, r1, #15
 800082c:	430a      	orrs	r2, r1
 800082e:	615a      	str	r2, [r3, #20]
 8000830:	4b5f      	ldr	r3, [pc, #380]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 8000832:	695a      	ldr	r2, [r3, #20]
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	03db      	lsls	r3, r3, #15
 8000838:	4013      	ands	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b5c      	ldr	r3, [pc, #368]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 8000840:	695a      	ldr	r2, [r3, #20]
 8000842:	4b5b      	ldr	r3, [pc, #364]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	0289      	lsls	r1, r1, #10
 8000848:	430a      	orrs	r2, r1
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	4b58      	ldr	r3, [pc, #352]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 800084e:	695a      	ldr	r2, [r3, #20]
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	029b      	lsls	r3, r3, #10
 8000854:	4013      	ands	r3, r2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b55      	ldr	r3, [pc, #340]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 800085c:	695a      	ldr	r2, [r3, #20]
 800085e:	4b54      	ldr	r3, [pc, #336]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	02c9      	lsls	r1, r1, #11
 8000864:	430a      	orrs	r2, r1
 8000866:	615a      	str	r2, [r3, #20]
 8000868:	4b51      	ldr	r3, [pc, #324]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 800086a:	695a      	ldr	r2, [r3, #20]
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	02db      	lsls	r3, r3, #11
 8000870:	4013      	ands	r3, r2
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_TEMP_SENS_Pin|USR_LED_GREEN_Pin|USR_RLY_4_Pin|USR_RLY_3_Pin, GPIO_PIN_RESET);
 8000876:	4b4f      	ldr	r3, [pc, #316]	; (80009b4 <MX_GPIO_Init+0x1a8>)
 8000878:	2200      	movs	r2, #0
 800087a:	213a      	movs	r1, #58	; 0x3a
 800087c:	0018      	movs	r0, r3
 800087e:	f000 fe80 	bl	8001582 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USR_RLY_1_Pin|USR_RLY_2_Pin, GPIO_PIN_RESET);
 8000882:	2390      	movs	r3, #144	; 0x90
 8000884:	0119      	lsls	r1, r3, #4
 8000886:	2390      	movs	r3, #144	; 0x90
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	2200      	movs	r2, #0
 800088c:	0018      	movs	r0, r3
 800088e:	f000 fe78 	bl	8001582 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_BTN_2_Pin USR_BTN_3_Pin */
  GPIO_InitStruct.Pin = USR_BTN_2_Pin|USR_BTN_3_Pin;
 8000892:	193b      	adds	r3, r7, r4
 8000894:	2281      	movs	r2, #129	; 0x81
 8000896:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000898:	193b      	adds	r3, r7, r4
 800089a:	22c4      	movs	r2, #196	; 0xc4
 800089c:	0392      	lsls	r2, r2, #14
 800089e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	2201      	movs	r2, #1
 80008a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	4a42      	ldr	r2, [pc, #264]	; (80009b4 <MX_GPIO_Init+0x1a8>)
 80008aa:	0019      	movs	r1, r3
 80008ac:	0010      	movs	r0, r2
 80008ae:	f000 fce3 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_TEMP_SENS_Pin */
  GPIO_InitStruct.Pin = USR_TEMP_SENS_Pin;
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	2202      	movs	r2, #2
 80008b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	2201      	movs	r2, #1
 80008bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	2201      	movs	r2, #1
 80008c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	2203      	movs	r2, #3
 80008c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USR_TEMP_SENS_GPIO_Port, &GPIO_InitStruct);
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	4a39      	ldr	r2, [pc, #228]	; (80009b4 <MX_GPIO_Init+0x1a8>)
 80008ce:	0019      	movs	r1, r3
 80008d0:	0010      	movs	r0, r2
 80008d2:	f000 fcd1 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_RLY_1_Pin USR_RLY_2_Pin */
  GPIO_InitStruct.Pin = USR_RLY_1_Pin|USR_RLY_2_Pin;
 80008d6:	0021      	movs	r1, r4
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2290      	movs	r2, #144	; 0x90
 80008dc:	0112      	lsls	r2, r2, #4
 80008de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	000c      	movs	r4, r1
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	2201      	movs	r2, #1
 80008e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	193a      	adds	r2, r7, r4
 80008f6:	2390      	movs	r3, #144	; 0x90
 80008f8:	05db      	lsls	r3, r3, #23
 80008fa:	0011      	movs	r1, r2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fcbb 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_BTN_1_Pin */
  GPIO_InitStruct.Pin = USR_BTN_1_Pin;
 8000902:	193b      	adds	r3, r7, r4
 8000904:	2280      	movs	r2, #128	; 0x80
 8000906:	0152      	lsls	r2, r2, #5
 8000908:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800090a:	193b      	adds	r3, r7, r4
 800090c:	22c4      	movs	r2, #196	; 0xc4
 800090e:	0392      	lsls	r2, r2, #14
 8000910:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000912:	193b      	adds	r3, r7, r4
 8000914:	2201      	movs	r2, #1
 8000916:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USR_BTN_1_GPIO_Port, &GPIO_InitStruct);
 8000918:	193a      	adds	r2, r7, r4
 800091a:	2390      	movs	r3, #144	; 0x90
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	0011      	movs	r1, r2
 8000920:	0018      	movs	r0, r3
 8000922:	f000 fca9 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_LED_GREEN_Pin USR_RLY_4_Pin USR_RLY_3_Pin */
  GPIO_InitStruct.Pin = USR_LED_GREEN_Pin|USR_RLY_4_Pin|USR_RLY_3_Pin;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2238      	movs	r2, #56	; 0x38
 800092a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2201      	movs	r2, #1
 8000930:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	193b      	adds	r3, r7, r4
 8000940:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <MX_GPIO_Init+0x1a8>)
 8000942:	0019      	movs	r1, r3
 8000944:	0010      	movs	r0, r2
 8000946:	f000 fc97 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_WIND_SENS_Pin */
  GPIO_InitStruct.Pin = USR_WIND_SENS_Pin;
 800094a:	0021      	movs	r1, r4
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2240      	movs	r2, #64	; 0x40
 8000950:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2201      	movs	r2, #1
 800095c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USR_WIND_SENS_GPIO_Port, &GPIO_InitStruct);
 800095e:	187b      	adds	r3, r7, r1
 8000960:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <MX_GPIO_Init+0x1a8>)
 8000962:	0019      	movs	r1, r3
 8000964:	0010      	movs	r0, r2
 8000966:	f000 fc87 	bl	8001278 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2005      	movs	r0, #5
 8000970:	f000 fbd2 	bl	8001118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000974:	2005      	movs	r0, #5
 8000976:	f000 fbe4 	bl	8001142 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	2007      	movs	r0, #7
 8000980:	f000 fbca 	bl	8001118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000984:	2007      	movs	r0, #7
 8000986:	f000 fbdc 	bl	8001142 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, USR_RLY_4_Pin|USR_RLY_3_Pin, GPIO_PIN_SET);
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <MX_GPIO_Init+0x1a8>)
 800098c:	2201      	movs	r2, #1
 800098e:	2130      	movs	r1, #48	; 0x30
 8000990:	0018      	movs	r0, r3
 8000992:	f000 fdf6 	bl	8001582 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, USR_RLY_1_Pin|USR_RLY_2_Pin, GPIO_PIN_SET);
 8000996:	2390      	movs	r3, #144	; 0x90
 8000998:	0119      	lsls	r1, r3, #4
 800099a:	2390      	movs	r3, #144	; 0x90
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	2201      	movs	r2, #1
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 fdee 	bl	8001582 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b009      	add	sp, #36	; 0x24
 80009ac:	bd90      	pop	{r4, r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	40021000 	.word	0x40021000
 80009b4:	48000400 	.word	0x48000400

080009b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	if(htim == &htim16)
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d10a      	bne.n	80009de <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		HAL_GPIO_TogglePin(GPIOB, USR_LED_GREEN_Pin);
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80009ca:	2108      	movs	r1, #8
 80009cc:	0018      	movs	r0, r3
 80009ce:	f000 fdf5 	bl	80015bc <HAL_GPIO_TogglePin>
		Get_Time(&ds3231_data, &hi2c1);
 80009d2:	4a07      	ldr	r2, [pc, #28]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009d6:	0011      	movs	r1, r2
 80009d8:	0018      	movs	r0, r3
 80009da:	f7ff fd24 	bl	8000426 <Get_Time>
	}
}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	2000007c 	.word	0x2000007c
 80009ec:	48000400 	.word	0x48000400
 80009f0:	20000028 	.word	0x20000028
 80009f4:	2000014c 	.word	0x2000014c

080009f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	0002      	movs	r2, r0
 8000a00:	1dbb      	adds	r3, r7, #6
 8000a02:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == USR_BTN_1_Pin)
 8000a04:	1dbb      	adds	r3, r7, #6
 8000a06:	881a      	ldrh	r2, [r3, #0]
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	015b      	lsls	r3, r3, #5
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d11e      	bne.n	8000a4e <HAL_GPIO_EXTI_Callback+0x56>
	{
		switch(HAL_GPIO_ReadPin(USR_BTN_1_GPIO_Port, USR_BTN_1_Pin))
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	015a      	lsls	r2, r3, #5
 8000a14:	2390      	movs	r3, #144	; 0x90
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 fd94 	bl	8001548 <HAL_GPIO_ReadPin>
 8000a20:	1e03      	subs	r3, r0, #0
 8000a22:	d002      	beq.n	8000a2a <HAL_GPIO_EXTI_Callback+0x32>
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d009      	beq.n	8000a3c <HAL_GPIO_EXTI_Callback+0x44>
			break;
		case GPIO_PIN_SET:
			HAL_GPIO_WritePin(GPIOA, USR_RLY_1_Pin, GPIO_PIN_SET);
			break;
		default:
			break;
 8000a28:	e011      	b.n	8000a4e <HAL_GPIO_EXTI_Callback+0x56>
			HAL_GPIO_WritePin(GPIOA, USR_RLY_1_Pin, GPIO_PIN_RESET);
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	0059      	lsls	r1, r3, #1
 8000a2e:	2390      	movs	r3, #144	; 0x90
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	2200      	movs	r2, #0
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 fda4 	bl	8001582 <HAL_GPIO_WritePin>
			break;
 8000a3a:	e008      	b.n	8000a4e <HAL_GPIO_EXTI_Callback+0x56>
			HAL_GPIO_WritePin(GPIOA, USR_RLY_1_Pin, GPIO_PIN_SET);
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	0059      	lsls	r1, r3, #1
 8000a40:	2390      	movs	r3, #144	; 0x90
 8000a42:	05db      	lsls	r3, r3, #23
 8000a44:	2201      	movs	r2, #1
 8000a46:	0018      	movs	r0, r3
 8000a48:	f000 fd9b 	bl	8001582 <HAL_GPIO_WritePin>
			break;
 8000a4c:	46c0      	nop			; (mov r8, r8)
		}
	}
	if(GPIO_Pin == USR_BTN_2_Pin)
 8000a4e:	1dbb      	adds	r3, r7, #6
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d11b      	bne.n	8000a8e <HAL_GPIO_EXTI_Callback+0x96>
	{
		switch(HAL_GPIO_ReadPin(USR_BTN_2_GPIO_Port, USR_BTN_2_Pin))
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 fd74 	bl	8001548 <HAL_GPIO_ReadPin>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d002      	beq.n	8000a6a <HAL_GPIO_EXTI_Callback+0x72>
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d009      	beq.n	8000a7c <HAL_GPIO_EXTI_Callback+0x84>
			break;
		case GPIO_PIN_SET:
			HAL_GPIO_WritePin(GPIOA, USR_RLY_2_Pin, GPIO_PIN_SET);
			break;
		default:
			break;
 8000a68:	e011      	b.n	8000a8e <HAL_GPIO_EXTI_Callback+0x96>
			HAL_GPIO_WritePin(GPIOA, USR_RLY_2_Pin, GPIO_PIN_RESET);
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	0119      	lsls	r1, r3, #4
 8000a6e:	2390      	movs	r3, #144	; 0x90
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	2200      	movs	r2, #0
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 fd84 	bl	8001582 <HAL_GPIO_WritePin>
			break;
 8000a7a:	e008      	b.n	8000a8e <HAL_GPIO_EXTI_Callback+0x96>
			HAL_GPIO_WritePin(GPIOA, USR_RLY_2_Pin, GPIO_PIN_SET);
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	0119      	lsls	r1, r3, #4
 8000a80:	2390      	movs	r3, #144	; 0x90
 8000a82:	05db      	lsls	r3, r3, #23
 8000a84:	2201      	movs	r2, #1
 8000a86:	0018      	movs	r0, r3
 8000a88:	f000 fd7b 	bl	8001582 <HAL_GPIO_WritePin>
			break;
 8000a8c:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b002      	add	sp, #8
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	48000400 	.word	0x48000400

08000a9c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0

	char msg[15];
	HAL_UART_IRQHandler(&huart1);
 8000aa2:	4b5d      	ldr	r3, [pc, #372]	; (8000c18 <USART1_IRQHandler+0x17c>)
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f002 fb89 	bl	80031bc <HAL_UART_IRQHandler>

	switch(recvd_data)
 8000aaa:	4b5c      	ldr	r3, [pc, #368]	; (8000c1c <USART1_IRQHandler+0x180>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b74      	cmp	r3, #116	; 0x74
 8000ab0:	d01b      	beq.n	8000aea <USART1_IRQHandler+0x4e>
 8000ab2:	dd00      	ble.n	8000ab6 <USART1_IRQHandler+0x1a>
 8000ab4:	e0a4      	b.n	8000c00 <USART1_IRQHandler+0x164>
 8000ab6:	2b6c      	cmp	r3, #108	; 0x6c
 8000ab8:	d011      	beq.n	8000ade <USART1_IRQHandler+0x42>
 8000aba:	dd00      	ble.n	8000abe <USART1_IRQHandler+0x22>
 8000abc:	e0a0      	b.n	8000c00 <USART1_IRQHandler+0x164>
 8000abe:	2b34      	cmp	r3, #52	; 0x34
 8000ac0:	d100      	bne.n	8000ac4 <USART1_IRQHandler+0x28>
 8000ac2:	e097      	b.n	8000bf4 <USART1_IRQHandler+0x158>
 8000ac4:	dd00      	ble.n	8000ac8 <USART1_IRQHandler+0x2c>
 8000ac6:	e09b      	b.n	8000c00 <USART1_IRQHandler+0x164>
 8000ac8:	2b33      	cmp	r3, #51	; 0x33
 8000aca:	d100      	bne.n	8000ace <USART1_IRQHandler+0x32>
 8000acc:	e08c      	b.n	8000be8 <USART1_IRQHandler+0x14c>
 8000ace:	dd00      	ble.n	8000ad2 <USART1_IRQHandler+0x36>
 8000ad0:	e096      	b.n	8000c00 <USART1_IRQHandler+0x164>
 8000ad2:	2b31      	cmp	r3, #49	; 0x31
 8000ad4:	d076      	beq.n	8000bc4 <USART1_IRQHandler+0x128>
 8000ad6:	2b32      	cmp	r3, #50	; 0x32
 8000ad8:	d100      	bne.n	8000adc <USART1_IRQHandler+0x40>
 8000ada:	e07c      	b.n	8000bd6 <USART1_IRQHandler+0x13a>
		break;
	case '4':
		HAL_GPIO_TogglePin(GPIOB, USR_RLY_4_Pin);
		break;
	default:
		break;
 8000adc:	e090      	b.n	8000c00 <USART1_IRQHandler+0x164>
    	HAL_GPIO_TogglePin(GPIOB, USR_LED_GREEN_Pin);
 8000ade:	4b50      	ldr	r3, [pc, #320]	; (8000c20 <USART1_IRQHandler+0x184>)
 8000ae0:	2108      	movs	r1, #8
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 fd6a 	bl	80015bc <HAL_GPIO_TogglePin>
	    break;
 8000ae8:	e08b      	b.n	8000c02 <USART1_IRQHandler+0x166>
		HAL_UART_Transmit(&huart1,(uint8_t*)"time:\n\r",7,1000);
 8000aea:	23fa      	movs	r3, #250	; 0xfa
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	494d      	ldr	r1, [pc, #308]	; (8000c24 <USART1_IRQHandler+0x188>)
 8000af0:	4849      	ldr	r0, [pc, #292]	; (8000c18 <USART1_IRQHandler+0x17c>)
 8000af2:	2207      	movs	r2, #7
 8000af4:	f002 fa6a 	bl	8002fcc <HAL_UART_Transmit>
		if(Get_Time(&ds3231_data, &hi2c1) == 0xFF)
 8000af8:	4a4b      	ldr	r2, [pc, #300]	; (8000c28 <USART1_IRQHandler+0x18c>)
 8000afa:	4b4c      	ldr	r3, [pc, #304]	; (8000c2c <USART1_IRQHandler+0x190>)
 8000afc:	0011      	movs	r1, r2
 8000afe:	0018      	movs	r0, r3
 8000b00:	f7ff fc91 	bl	8000426 <Get_Time>
 8000b04:	0003      	movs	r3, r0
 8000b06:	2bff      	cmp	r3, #255	; 0xff
 8000b08:	d107      	bne.n	8000b1a <USART1_IRQHandler+0x7e>
			HAL_UART_Transmit(&huart1,(uint8_t*)"error!\n\r",8,1000);
 8000b0a:	23fa      	movs	r3, #250	; 0xfa
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	4948      	ldr	r1, [pc, #288]	; (8000c30 <USART1_IRQHandler+0x194>)
 8000b10:	4841      	ldr	r0, [pc, #260]	; (8000c18 <USART1_IRQHandler+0x17c>)
 8000b12:	2208      	movs	r2, #8
 8000b14:	f002 fa5a 	bl	8002fcc <HAL_UART_Transmit>
		break;
 8000b18:	e073      	b.n	8000c02 <USART1_IRQHandler+0x166>
			memset(msg,0,15);
 8000b1a:	003b      	movs	r3, r7
 8000b1c:	220f      	movs	r2, #15
 8000b1e:	2100      	movs	r1, #0
 8000b20:	0018      	movs	r0, r3
 8000b22:	f003 fc59 	bl	80043d8 <memset>
			itoa(ds3231_data.hour,msg,10);
 8000b26:	4b41      	ldr	r3, [pc, #260]	; (8000c2c <USART1_IRQHandler+0x190>)
 8000b28:	789b      	ldrb	r3, [r3, #2]
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	003b      	movs	r3, r7
 8000b2e:	220a      	movs	r2, #10
 8000b30:	0019      	movs	r1, r3
 8000b32:	f7ff fcf5 	bl	8000520 <itoa>
			HAL_UART_Transmit(&huart1,(uint8_t*)msg,sizeof(msg),1000);
 8000b36:	23fa      	movs	r3, #250	; 0xfa
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	0039      	movs	r1, r7
 8000b3c:	4836      	ldr	r0, [pc, #216]	; (8000c18 <USART1_IRQHandler+0x17c>)
 8000b3e:	220f      	movs	r2, #15
 8000b40:	f002 fa44 	bl	8002fcc <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)":",1,1000);
 8000b44:	23fa      	movs	r3, #250	; 0xfa
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	493a      	ldr	r1, [pc, #232]	; (8000c34 <USART1_IRQHandler+0x198>)
 8000b4a:	4833      	ldr	r0, [pc, #204]	; (8000c18 <USART1_IRQHandler+0x17c>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f002 fa3d 	bl	8002fcc <HAL_UART_Transmit>
			memset(msg,0,15);
 8000b52:	003b      	movs	r3, r7
 8000b54:	220f      	movs	r2, #15
 8000b56:	2100      	movs	r1, #0
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f003 fc3d 	bl	80043d8 <memset>
			itoa(ds3231_data.min,msg,10);
 8000b5e:	4b33      	ldr	r3, [pc, #204]	; (8000c2c <USART1_IRQHandler+0x190>)
 8000b60:	785b      	ldrb	r3, [r3, #1]
 8000b62:	0018      	movs	r0, r3
 8000b64:	003b      	movs	r3, r7
 8000b66:	220a      	movs	r2, #10
 8000b68:	0019      	movs	r1, r3
 8000b6a:	f7ff fcd9 	bl	8000520 <itoa>
			HAL_UART_Transmit(&huart1,(uint8_t*)msg,sizeof(msg),1000);
 8000b6e:	23fa      	movs	r3, #250	; 0xfa
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	0039      	movs	r1, r7
 8000b74:	4828      	ldr	r0, [pc, #160]	; (8000c18 <USART1_IRQHandler+0x17c>)
 8000b76:	220f      	movs	r2, #15
 8000b78:	f002 fa28 	bl	8002fcc <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)":",1,1000);
 8000b7c:	23fa      	movs	r3, #250	; 0xfa
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	492c      	ldr	r1, [pc, #176]	; (8000c34 <USART1_IRQHandler+0x198>)
 8000b82:	4825      	ldr	r0, [pc, #148]	; (8000c18 <USART1_IRQHandler+0x17c>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	f002 fa21 	bl	8002fcc <HAL_UART_Transmit>
			memset(msg,0,15);
 8000b8a:	003b      	movs	r3, r7
 8000b8c:	220f      	movs	r2, #15
 8000b8e:	2100      	movs	r1, #0
 8000b90:	0018      	movs	r0, r3
 8000b92:	f003 fc21 	bl	80043d8 <memset>
			itoa(ds3231_data.sec,msg,10);
 8000b96:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <USART1_IRQHandler+0x190>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	003b      	movs	r3, r7
 8000b9e:	220a      	movs	r2, #10
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	f7ff fcbd 	bl	8000520 <itoa>
			HAL_UART_Transmit(&huart1,(uint8_t*)msg,sizeof(msg),1000);
 8000ba6:	23fa      	movs	r3, #250	; 0xfa
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	0039      	movs	r1, r7
 8000bac:	481a      	ldr	r0, [pc, #104]	; (8000c18 <USART1_IRQHandler+0x17c>)
 8000bae:	220f      	movs	r2, #15
 8000bb0:	f002 fa0c 	bl	8002fcc <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r",2,1000);
 8000bb4:	23fa      	movs	r3, #250	; 0xfa
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	491f      	ldr	r1, [pc, #124]	; (8000c38 <USART1_IRQHandler+0x19c>)
 8000bba:	4817      	ldr	r0, [pc, #92]	; (8000c18 <USART1_IRQHandler+0x17c>)
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	f002 fa05 	bl	8002fcc <HAL_UART_Transmit>
		break;
 8000bc2:	e01e      	b.n	8000c02 <USART1_IRQHandler+0x166>
		HAL_GPIO_TogglePin(GPIOA, USR_RLY_1_Pin);
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	005a      	lsls	r2, r3, #1
 8000bc8:	2390      	movs	r3, #144	; 0x90
 8000bca:	05db      	lsls	r3, r3, #23
 8000bcc:	0011      	movs	r1, r2
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f000 fcf4 	bl	80015bc <HAL_GPIO_TogglePin>
		break;
 8000bd4:	e015      	b.n	8000c02 <USART1_IRQHandler+0x166>
		HAL_GPIO_TogglePin(GPIOA, USR_RLY_2_Pin);
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	011a      	lsls	r2, r3, #4
 8000bda:	2390      	movs	r3, #144	; 0x90
 8000bdc:	05db      	lsls	r3, r3, #23
 8000bde:	0011      	movs	r1, r2
 8000be0:	0018      	movs	r0, r3
 8000be2:	f000 fceb 	bl	80015bc <HAL_GPIO_TogglePin>
		break;
 8000be6:	e00c      	b.n	8000c02 <USART1_IRQHandler+0x166>
		HAL_GPIO_TogglePin(GPIOB, USR_RLY_3_Pin);
 8000be8:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <USART1_IRQHandler+0x184>)
 8000bea:	2120      	movs	r1, #32
 8000bec:	0018      	movs	r0, r3
 8000bee:	f000 fce5 	bl	80015bc <HAL_GPIO_TogglePin>
		break;
 8000bf2:	e006      	b.n	8000c02 <USART1_IRQHandler+0x166>
		HAL_GPIO_TogglePin(GPIOB, USR_RLY_4_Pin);
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <USART1_IRQHandler+0x184>)
 8000bf6:	2110      	movs	r1, #16
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f000 fcdf 	bl	80015bc <HAL_GPIO_TogglePin>
		break;
 8000bfe:	e000      	b.n	8000c02 <USART1_IRQHandler+0x166>
		break;
 8000c00:	46c0      	nop			; (mov r8, r8)
	}

	HAL_UART_Receive_IT(&huart1,&recvd_data,1);
 8000c02:	4906      	ldr	r1, [pc, #24]	; (8000c1c <USART1_IRQHandler+0x180>)
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <USART1_IRQHandler+0x17c>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f002 fa7f 	bl	800310c <HAL_UART_Receive_IT>

}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b004      	add	sp, #16
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	200000c4 	.word	0x200000c4
 8000c1c:	20000158 	.word	0x20000158
 8000c20:	48000400 	.word	0x48000400
 8000c24:	08004490 	.word	0x08004490
 8000c28:	20000028 	.word	0x20000028
 8000c2c:	2000014c 	.word	0x2000014c
 8000c30:	08004498 	.word	0x08004498
 8000c34:	080044a4 	.word	0x080044a4
 8000c38:	080044a8 	.word	0x080044a8

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_MspInit+0x44>)
 8000c50:	699a      	ldr	r2, [r3, #24]
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_MspInit+0x44>)
 8000c54:	2101      	movs	r1, #1
 8000c56:	430a      	orrs	r2, r1
 8000c58:	619a      	str	r2, [r3, #24]
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_MspInit+0x44>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4013      	ands	r3, r2
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x44>)
 8000c68:	69da      	ldr	r2, [r3, #28]
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_MspInit+0x44>)
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	0549      	lsls	r1, r1, #21
 8000c70:	430a      	orrs	r2, r1
 8000c72:	61da      	str	r2, [r3, #28]
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_MspInit+0x44>)
 8000c76:	69da      	ldr	r2, [r3, #28]
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	055b      	lsls	r3, r3, #21
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b002      	add	sp, #8
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b08b      	sub	sp, #44	; 0x2c
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	2414      	movs	r4, #20
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	2314      	movs	r3, #20
 8000ca0:	001a      	movs	r2, r3
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	f003 fb98 	bl	80043d8 <memset>
  if(hi2c->Instance==I2C1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <HAL_I2C_MspInit+0x94>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d133      	bne.n	8000d1a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <HAL_I2C_MspInit+0x98>)
 8000cb4:	695a      	ldr	r2, [r3, #20]
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <HAL_I2C_MspInit+0x98>)
 8000cb8:	2180      	movs	r1, #128	; 0x80
 8000cba:	0289      	lsls	r1, r1, #10
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_I2C_MspInit+0x98>)
 8000cc2:	695a      	ldr	r2, [r3, #20]
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	029b      	lsls	r3, r3, #10
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	22c0      	movs	r2, #192	; 0xc0
 8000cd2:	00d2      	lsls	r2, r2, #3
 8000cd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cd6:	0021      	movs	r1, r4
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2212      	movs	r2, #18
 8000cdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2204      	movs	r2, #4
 8000cee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	187a      	adds	r2, r7, r1
 8000cf2:	2390      	movs	r3, #144	; 0x90
 8000cf4:	05db      	lsls	r3, r3, #23
 8000cf6:	0011      	movs	r1, r2
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f000 fabd 	bl	8001278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_I2C_MspInit+0x98>)
 8000d00:	69da      	ldr	r2, [r3, #28]
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <HAL_I2C_MspInit+0x98>)
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	0389      	lsls	r1, r1, #14
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	61da      	str	r2, [r3, #28]
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_I2C_MspInit+0x98>)
 8000d0e:	69da      	ldr	r2, [r3, #28]
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	039b      	lsls	r3, r3, #14
 8000d14:	4013      	ands	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	b00b      	add	sp, #44	; 0x2c
 8000d20:	bd90      	pop	{r4, r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	40005400 	.word	0x40005400
 8000d28:	40021000 	.word	0x40021000

08000d2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <HAL_TIM_Base_MspInit+0x48>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d115      	bne.n	8000d6a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_TIM_Base_MspInit+0x4c>)
 8000d40:	699a      	ldr	r2, [r3, #24]
 8000d42:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <HAL_TIM_Base_MspInit+0x4c>)
 8000d44:	2180      	movs	r1, #128	; 0x80
 8000d46:	0289      	lsls	r1, r1, #10
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	619a      	str	r2, [r3, #24]
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <HAL_TIM_Base_MspInit+0x4c>)
 8000d4e:	699a      	ldr	r2, [r3, #24]
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	029b      	lsls	r3, r3, #10
 8000d54:	4013      	ands	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2015      	movs	r0, #21
 8000d60:	f000 f9da 	bl	8001118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000d64:	2015      	movs	r0, #21
 8000d66:	f000 f9ec 	bl	8001142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b004      	add	sp, #16
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	40014400 	.word	0x40014400
 8000d78:	40021000 	.word	0x40021000

08000d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b08b      	sub	sp, #44	; 0x2c
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	2414      	movs	r4, #20
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	0018      	movs	r0, r3
 8000d8a:	2314      	movs	r3, #20
 8000d8c:	001a      	movs	r2, r3
 8000d8e:	2100      	movs	r1, #0
 8000d90:	f003 fb22 	bl	80043d8 <memset>
  if(huart->Instance==USART1)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a20      	ldr	r2, [pc, #128]	; (8000e1c <HAL_UART_MspInit+0xa0>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d13a      	bne.n	8000e14 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <HAL_UART_MspInit+0xa4>)
 8000da0:	699a      	ldr	r2, [r3, #24]
 8000da2:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <HAL_UART_MspInit+0xa4>)
 8000da4:	2180      	movs	r1, #128	; 0x80
 8000da6:	01c9      	lsls	r1, r1, #7
 8000da8:	430a      	orrs	r2, r1
 8000daa:	619a      	str	r2, [r3, #24]
 8000dac:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <HAL_UART_MspInit+0xa4>)
 8000dae:	699a      	ldr	r2, [r3, #24]
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	01db      	lsls	r3, r3, #7
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <HAL_UART_MspInit+0xa4>)
 8000dbc:	695a      	ldr	r2, [r3, #20]
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <HAL_UART_MspInit+0xa4>)
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	0289      	lsls	r1, r1, #10
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	615a      	str	r2, [r3, #20]
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_UART_MspInit+0xa4>)
 8000dca:	695a      	ldr	r2, [r3, #20]
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	029b      	lsls	r3, r3, #10
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000dd6:	0021      	movs	r1, r4
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <HAL_UART_MspInit+0xa8>)
 8000ddc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2202      	movs	r2, #2
 8000de2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2203      	movs	r2, #3
 8000dee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	2201      	movs	r2, #1
 8000df4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	187a      	adds	r2, r7, r1
 8000df8:	2390      	movs	r3, #144	; 0x90
 8000dfa:	05db      	lsls	r3, r3, #23
 8000dfc:	0011      	movs	r1, r2
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f000 fa3a 	bl	8001278 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2100      	movs	r1, #0
 8000e08:	201b      	movs	r0, #27
 8000e0a:	f000 f985 	bl	8001118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e0e:	201b      	movs	r0, #27
 8000e10:	f000 f997 	bl	8001142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b00b      	add	sp, #44	; 0x2c
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	40013800 	.word	0x40013800
 8000e20:	40021000 	.word	0x40021000
 8000e24:	00008004 	.word	0x00008004

08000e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <NMI_Handler+0x4>

08000e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <HardFault_Handler+0x4>

08000e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4c:	f000 f89c 	bl	8000f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_2_Pin);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f000 fbca 	bl	80015f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_3_Pin);
 8000e6a:	2080      	movs	r0, #128	; 0x80
 8000e6c:	f000 fbc2 	bl	80015f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_1_Pin);
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	015b      	lsls	r3, r3, #5
 8000e74:	0018      	movs	r0, r3
 8000e76:	f000 fbbd 	bl	80015f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <TIM16_IRQHandler+0x14>)
 8000e86:	0018      	movs	r0, r3
 8000e88:	f001 fe90 	bl	8002bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	2000007c 	.word	0x2000007c

08000e98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ea6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea8:	f7ff fff6 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eae:	490d      	ldr	r1, [pc, #52]	; (8000ee4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <LoopForever+0xe>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec4:	4c0a      	ldr	r4, [pc, #40]	; (8000ef0 <LoopForever+0x16>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ed2:	f003 fa89 	bl	80043e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ed6:	f7ff fb7b 	bl	80005d0 <main>

08000eda <LoopForever>:

LoopForever:
    b LoopForever
 8000eda:	e7fe      	b.n	8000eda <LoopForever>
  ldr   r0, =_estack
 8000edc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ee8:	080044ec 	.word	0x080044ec
  ldr r2, =_sbss
 8000eec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ef0:	20000160 	.word	0x20000160

08000ef4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC1_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <HAL_Init+0x24>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_Init+0x24>)
 8000f02:	2110      	movs	r1, #16
 8000f04:	430a      	orrs	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f000 f809 	bl	8000f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0e:	f7ff fe9b 	bl	8000c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	0018      	movs	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	40022000 	.word	0x40022000

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_InitTick+0x5c>)
 8000f2a:	681c      	ldr	r4, [r3, #0]
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_InitTick+0x60>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	0019      	movs	r1, r3
 8000f32:	23fa      	movs	r3, #250	; 0xfa
 8000f34:	0098      	lsls	r0, r3, #2
 8000f36:	f7ff f8e7 	bl	8000108 <__udivsi3>
 8000f3a:	0003      	movs	r3, r0
 8000f3c:	0019      	movs	r1, r3
 8000f3e:	0020      	movs	r0, r4
 8000f40:	f7ff f8e2 	bl	8000108 <__udivsi3>
 8000f44:	0003      	movs	r3, r0
 8000f46:	0018      	movs	r0, r3
 8000f48:	f000 f90b 	bl	8001162 <HAL_SYSTICK_Config>
 8000f4c:	1e03      	subs	r3, r0, #0
 8000f4e:	d001      	beq.n	8000f54 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e00f      	b.n	8000f74 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d80b      	bhi.n	8000f72 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	425b      	negs	r3, r3
 8000f60:	2200      	movs	r2, #0
 8000f62:	0018      	movs	r0, r3
 8000f64:	f000 f8d8 	bl	8001118 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_InitTick+0x64>)
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	e000      	b.n	8000f74 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b003      	add	sp, #12
 8000f7a:	bd90      	pop	{r4, r7, pc}
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000004 	.word	0x20000004

08000f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <HAL_IncTick+0x1c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	001a      	movs	r2, r3
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	18d2      	adds	r2, r2, r3
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_IncTick+0x20>)
 8000f9a:	601a      	str	r2, [r3, #0]
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	2000015c 	.word	0x2000015c

08000fac <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <HAL_GetTick+0x10>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	2000015c 	.word	0x2000015c

08000fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	1dfb      	adds	r3, r7, #7
 8000fca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	1dfb      	adds	r3, r7, #7
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b7f      	cmp	r3, #127	; 0x7f
 8000fd2:	d809      	bhi.n	8000fe8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd4:	1dfb      	adds	r3, r7, #7
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	001a      	movs	r2, r3
 8000fda:	231f      	movs	r3, #31
 8000fdc:	401a      	ands	r2, r3
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_EnableIRQ+0x30>)
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	4091      	lsls	r1, r2
 8000fe4:	000a      	movs	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
  }
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b002      	add	sp, #8
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001002:	1dfb      	adds	r3, r7, #7
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b7f      	cmp	r3, #127	; 0x7f
 8001008:	d828      	bhi.n	800105c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800100a:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <__NVIC_SetPriority+0xd4>)
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	b25b      	sxtb	r3, r3
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	33c0      	adds	r3, #192	; 0xc0
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	589b      	ldr	r3, [r3, r2]
 800101a:	1dfa      	adds	r2, r7, #7
 800101c:	7812      	ldrb	r2, [r2, #0]
 800101e:	0011      	movs	r1, r2
 8001020:	2203      	movs	r2, #3
 8001022:	400a      	ands	r2, r1
 8001024:	00d2      	lsls	r2, r2, #3
 8001026:	21ff      	movs	r1, #255	; 0xff
 8001028:	4091      	lsls	r1, r2
 800102a:	000a      	movs	r2, r1
 800102c:	43d2      	mvns	r2, r2
 800102e:	401a      	ands	r2, r3
 8001030:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	019b      	lsls	r3, r3, #6
 8001036:	22ff      	movs	r2, #255	; 0xff
 8001038:	401a      	ands	r2, r3
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	0018      	movs	r0, r3
 8001040:	2303      	movs	r3, #3
 8001042:	4003      	ands	r3, r0
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001048:	481f      	ldr	r0, [pc, #124]	; (80010c8 <__NVIC_SetPriority+0xd4>)
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b25b      	sxtb	r3, r3
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	430a      	orrs	r2, r1
 8001054:	33c0      	adds	r3, #192	; 0xc0
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800105a:	e031      	b.n	80010c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800105c:	4a1b      	ldr	r2, [pc, #108]	; (80010cc <__NVIC_SetPriority+0xd8>)
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	0019      	movs	r1, r3
 8001064:	230f      	movs	r3, #15
 8001066:	400b      	ands	r3, r1
 8001068:	3b08      	subs	r3, #8
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3306      	adds	r3, #6
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	18d3      	adds	r3, r2, r3
 8001072:	3304      	adds	r3, #4
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	1dfa      	adds	r2, r7, #7
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	0011      	movs	r1, r2
 800107c:	2203      	movs	r2, #3
 800107e:	400a      	ands	r2, r1
 8001080:	00d2      	lsls	r2, r2, #3
 8001082:	21ff      	movs	r1, #255	; 0xff
 8001084:	4091      	lsls	r1, r2
 8001086:	000a      	movs	r2, r1
 8001088:	43d2      	mvns	r2, r2
 800108a:	401a      	ands	r2, r3
 800108c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	019b      	lsls	r3, r3, #6
 8001092:	22ff      	movs	r2, #255	; 0xff
 8001094:	401a      	ands	r2, r3
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	0018      	movs	r0, r3
 800109c:	2303      	movs	r3, #3
 800109e:	4003      	ands	r3, r0
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010a4:	4809      	ldr	r0, [pc, #36]	; (80010cc <__NVIC_SetPriority+0xd8>)
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	001c      	movs	r4, r3
 80010ac:	230f      	movs	r3, #15
 80010ae:	4023      	ands	r3, r4
 80010b0:	3b08      	subs	r3, #8
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	430a      	orrs	r2, r1
 80010b6:	3306      	adds	r3, #6
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	18c3      	adds	r3, r0, r3
 80010bc:	3304      	adds	r3, #4
 80010be:	601a      	str	r2, [r3, #0]
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b003      	add	sp, #12
 80010c6:	bd90      	pop	{r4, r7, pc}
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	1e5a      	subs	r2, r3, #1
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	045b      	lsls	r3, r3, #17
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d301      	bcc.n	80010e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e4:	2301      	movs	r3, #1
 80010e6:	e010      	b.n	800110a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <SysTick_Config+0x44>)
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	3a01      	subs	r2, #1
 80010ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f0:	2301      	movs	r3, #1
 80010f2:	425b      	negs	r3, r3
 80010f4:	2103      	movs	r1, #3
 80010f6:	0018      	movs	r0, r3
 80010f8:	f7ff ff7c 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SysTick_Config+0x44>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SysTick_Config+0x44>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	210f      	movs	r1, #15
 8001124:	187b      	adds	r3, r7, r1
 8001126:	1c02      	adds	r2, r0, #0
 8001128:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	187b      	adds	r3, r7, r1
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b25b      	sxtb	r3, r3
 8001132:	0011      	movs	r1, r2
 8001134:	0018      	movs	r0, r3
 8001136:	f7ff ff5d 	bl	8000ff4 <__NVIC_SetPriority>
}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	46bd      	mov	sp, r7
 800113e:	b004      	add	sp, #16
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	0002      	movs	r2, r0
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	b25b      	sxtb	r3, r3
 8001154:	0018      	movs	r0, r3
 8001156:	f7ff ff33 	bl	8000fc0 <__NVIC_EnableIRQ>
}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	b002      	add	sp, #8
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	0018      	movs	r0, r3
 800116e:	f7ff ffaf 	bl	80010d0 <SysTick_Config>
 8001172:	0003      	movs	r3, r0
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b002      	add	sp, #8
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2221      	movs	r2, #33	; 0x21
 8001188:	5c9b      	ldrb	r3, [r3, r2]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d008      	beq.n	80011a2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2204      	movs	r2, #4
 8001194:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2220      	movs	r2, #32
 800119a:	2100      	movs	r1, #0
 800119c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e020      	b.n	80011e4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	210e      	movs	r1, #14
 80011ae:	438a      	bics	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2101      	movs	r1, #1
 80011be:	438a      	bics	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ca:	2101      	movs	r1, #1
 80011cc:	4091      	lsls	r1, r2
 80011ce:	000a      	movs	r2, r1
 80011d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2221      	movs	r2, #33	; 0x21
 80011d6:	2101      	movs	r1, #1
 80011d8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2220      	movs	r2, #32
 80011de:	2100      	movs	r1, #0
 80011e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	0018      	movs	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b002      	add	sp, #8
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f4:	210f      	movs	r1, #15
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2221      	movs	r2, #33	; 0x21
 8001200:	5c9b      	ldrb	r3, [r3, r2]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d006      	beq.n	8001216 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2204      	movs	r2, #4
 800120c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
 8001214:	e028      	b.n	8001268 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	210e      	movs	r1, #14
 8001222:	438a      	bics	r2, r1
 8001224:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	438a      	bics	r2, r1
 8001234:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800123e:	2101      	movs	r1, #1
 8001240:	4091      	lsls	r1, r2
 8001242:	000a      	movs	r2, r1
 8001244:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2221      	movs	r2, #33	; 0x21
 800124a:	2101      	movs	r1, #1
 800124c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2220      	movs	r2, #32
 8001252:	2100      	movs	r1, #0
 8001254:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125a:	2b00      	cmp	r3, #0
 800125c:	d004      	beq.n	8001268 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	0010      	movs	r0, r2
 8001266:	4798      	blx	r3
    }
  }
  return status;
 8001268:	230f      	movs	r3, #15
 800126a:	18fb      	adds	r3, r7, r3
 800126c:	781b      	ldrb	r3, [r3, #0]
}
 800126e:	0018      	movs	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	b004      	add	sp, #16
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001286:	e149      	b.n	800151c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2101      	movs	r1, #1
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	4091      	lsls	r1, r2
 8001292:	000a      	movs	r2, r1
 8001294:	4013      	ands	r3, r2
 8001296:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d100      	bne.n	80012a0 <HAL_GPIO_Init+0x28>
 800129e:	e13a      	b.n	8001516 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2203      	movs	r2, #3
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d005      	beq.n	80012b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2203      	movs	r2, #3
 80012b2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d130      	bne.n	800131a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	2203      	movs	r2, #3
 80012c4:	409a      	lsls	r2, r3
 80012c6:	0013      	movs	r3, r2
 80012c8:	43da      	mvns	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	409a      	lsls	r2, r3
 80012da:	0013      	movs	r3, r2
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ee:	2201      	movs	r2, #1
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	409a      	lsls	r2, r3
 80012f4:	0013      	movs	r3, r2
 80012f6:	43da      	mvns	r2, r3
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	091b      	lsrs	r3, r3, #4
 8001304:	2201      	movs	r2, #1
 8001306:	401a      	ands	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2203      	movs	r2, #3
 8001320:	4013      	ands	r3, r2
 8001322:	2b03      	cmp	r3, #3
 8001324:	d017      	beq.n	8001356 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	43da      	mvns	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4013      	ands	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	409a      	lsls	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2203      	movs	r2, #3
 800135c:	4013      	ands	r3, r2
 800135e:	2b02      	cmp	r3, #2
 8001360:	d123      	bne.n	80013aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	08da      	lsrs	r2, r3, #3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3208      	adds	r2, #8
 800136a:	0092      	lsls	r2, r2, #2
 800136c:	58d3      	ldr	r3, [r2, r3]
 800136e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2207      	movs	r2, #7
 8001374:	4013      	ands	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	220f      	movs	r2, #15
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	43da      	mvns	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	691a      	ldr	r2, [r3, #16]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	2107      	movs	r1, #7
 800138e:	400b      	ands	r3, r1
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	08da      	lsrs	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3208      	adds	r2, #8
 80013a4:	0092      	lsls	r2, r2, #2
 80013a6:	6939      	ldr	r1, [r7, #16]
 80013a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	2203      	movs	r2, #3
 80013b6:	409a      	lsls	r2, r3
 80013b8:	0013      	movs	r3, r2
 80013ba:	43da      	mvns	r2, r3
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4013      	ands	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2203      	movs	r2, #3
 80013c8:	401a      	ands	r2, r3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	409a      	lsls	r2, r3
 80013d0:	0013      	movs	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	23c0      	movs	r3, #192	; 0xc0
 80013e4:	029b      	lsls	r3, r3, #10
 80013e6:	4013      	ands	r3, r2
 80013e8:	d100      	bne.n	80013ec <HAL_GPIO_Init+0x174>
 80013ea:	e094      	b.n	8001516 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ec:	4b51      	ldr	r3, [pc, #324]	; (8001534 <HAL_GPIO_Init+0x2bc>)
 80013ee:	699a      	ldr	r2, [r3, #24]
 80013f0:	4b50      	ldr	r3, [pc, #320]	; (8001534 <HAL_GPIO_Init+0x2bc>)
 80013f2:	2101      	movs	r1, #1
 80013f4:	430a      	orrs	r2, r1
 80013f6:	619a      	str	r2, [r3, #24]
 80013f8:	4b4e      	ldr	r3, [pc, #312]	; (8001534 <HAL_GPIO_Init+0x2bc>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	2201      	movs	r2, #1
 80013fe:	4013      	ands	r3, r2
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001404:	4a4c      	ldr	r2, [pc, #304]	; (8001538 <HAL_GPIO_Init+0x2c0>)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	089b      	lsrs	r3, r3, #2
 800140a:	3302      	adds	r3, #2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	589b      	ldr	r3, [r3, r2]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	2203      	movs	r2, #3
 8001416:	4013      	ands	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	220f      	movs	r2, #15
 800141c:	409a      	lsls	r2, r3
 800141e:	0013      	movs	r3, r2
 8001420:	43da      	mvns	r2, r3
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	2390      	movs	r3, #144	; 0x90
 800142c:	05db      	lsls	r3, r3, #23
 800142e:	429a      	cmp	r2, r3
 8001430:	d00d      	beq.n	800144e <HAL_GPIO_Init+0x1d6>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a41      	ldr	r2, [pc, #260]	; (800153c <HAL_GPIO_Init+0x2c4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d007      	beq.n	800144a <HAL_GPIO_Init+0x1d2>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a40      	ldr	r2, [pc, #256]	; (8001540 <HAL_GPIO_Init+0x2c8>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d101      	bne.n	8001446 <HAL_GPIO_Init+0x1ce>
 8001442:	2302      	movs	r3, #2
 8001444:	e004      	b.n	8001450 <HAL_GPIO_Init+0x1d8>
 8001446:	2305      	movs	r3, #5
 8001448:	e002      	b.n	8001450 <HAL_GPIO_Init+0x1d8>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x1d8>
 800144e:	2300      	movs	r3, #0
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	2103      	movs	r1, #3
 8001454:	400a      	ands	r2, r1
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	4093      	lsls	r3, r2
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001460:	4935      	ldr	r1, [pc, #212]	; (8001538 <HAL_GPIO_Init+0x2c0>)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800146e:	4b35      	ldr	r3, [pc, #212]	; (8001544 <HAL_GPIO_Init+0x2cc>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43da      	mvns	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	035b      	lsls	r3, r3, #13
 8001486:	4013      	ands	r3, r2
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001492:	4b2c      	ldr	r3, [pc, #176]	; (8001544 <HAL_GPIO_Init+0x2cc>)
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001498:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_GPIO_Init+0x2cc>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43da      	mvns	r2, r3
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	039b      	lsls	r3, r3, #14
 80014b0:	4013      	ands	r3, r2
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <HAL_GPIO_Init+0x2cc>)
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80014c2:	4b20      	ldr	r3, [pc, #128]	; (8001544 <HAL_GPIO_Init+0x2cc>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43da      	mvns	r2, r3
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	029b      	lsls	r3, r3, #10
 80014da:	4013      	ands	r3, r2
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_GPIO_Init+0x2cc>)
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_GPIO_Init+0x2cc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43da      	mvns	r2, r3
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	025b      	lsls	r3, r3, #9
 8001504:	4013      	ands	r3, r2
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_GPIO_Init+0x2cc>)
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	40da      	lsrs	r2, r3
 8001524:	1e13      	subs	r3, r2, #0
 8001526:	d000      	beq.n	800152a <HAL_GPIO_Init+0x2b2>
 8001528:	e6ae      	b.n	8001288 <HAL_GPIO_Init+0x10>
  } 
}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b006      	add	sp, #24
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	40010000 	.word	0x40010000
 800153c:	48000400 	.word	0x48000400
 8001540:	48000800 	.word	0x48000800
 8001544:	40010400 	.word	0x40010400

08001548 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	000a      	movs	r2, r1
 8001552:	1cbb      	adds	r3, r7, #2
 8001554:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	1cba      	adds	r2, r7, #2
 800155c:	8812      	ldrh	r2, [r2, #0]
 800155e:	4013      	ands	r3, r2
 8001560:	d004      	beq.n	800156c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001562:	230f      	movs	r3, #15
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	e003      	b.n	8001574 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800156c:	230f      	movs	r3, #15
 800156e:	18fb      	adds	r3, r7, r3
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001574:	230f      	movs	r3, #15
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	781b      	ldrb	r3, [r3, #0]
  }
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b004      	add	sp, #16
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	0008      	movs	r0, r1
 800158c:	0011      	movs	r1, r2
 800158e:	1cbb      	adds	r3, r7, #2
 8001590:	1c02      	adds	r2, r0, #0
 8001592:	801a      	strh	r2, [r3, #0]
 8001594:	1c7b      	adds	r3, r7, #1
 8001596:	1c0a      	adds	r2, r1, #0
 8001598:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800159a:	1c7b      	adds	r3, r7, #1
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d004      	beq.n	80015ac <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015a2:	1cbb      	adds	r3, r7, #2
 80015a4:	881a      	ldrh	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015aa:	e003      	b.n	80015b4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ac:	1cbb      	adds	r3, r7, #2
 80015ae:	881a      	ldrh	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b002      	add	sp, #8
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	000a      	movs	r2, r1
 80015c6:	1cbb      	adds	r3, r7, #2
 80015c8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695b      	ldr	r3, [r3, #20]
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015d0:	1cbb      	adds	r3, r7, #2
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	041a      	lsls	r2, r3, #16
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43db      	mvns	r3, r3
 80015de:	1cb9      	adds	r1, r7, #2
 80015e0:	8809      	ldrh	r1, [r1, #0]
 80015e2:	400b      	ands	r3, r1
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	619a      	str	r2, [r3, #24]
}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b004      	add	sp, #16
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	0002      	movs	r2, r0
 80015fc:	1dbb      	adds	r3, r7, #6
 80015fe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	1dba      	adds	r2, r7, #6
 8001606:	8812      	ldrh	r2, [r2, #0]
 8001608:	4013      	ands	r3, r2
 800160a:	d008      	beq.n	800161e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800160e:	1dba      	adds	r2, r7, #6
 8001610:	8812      	ldrh	r2, [r2, #0]
 8001612:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001614:	1dbb      	adds	r3, r7, #6
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	0018      	movs	r0, r3
 800161a:	f7ff f9ed 	bl	80009f8 <HAL_GPIO_EXTI_Callback>
  }
}
 800161e:	46c0      	nop			; (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	b002      	add	sp, #8
 8001624:	bd80      	pop	{r7, pc}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	40010400 	.word	0x40010400

0800162c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e082      	b.n	8001744 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2241      	movs	r2, #65	; 0x41
 8001642:	5c9b      	ldrb	r3, [r3, r2]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d107      	bne.n	800165a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2240      	movs	r2, #64	; 0x40
 800164e:	2100      	movs	r1, #0
 8001650:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff fb1b 	bl	8000c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2241      	movs	r2, #65	; 0x41
 800165e:	2124      	movs	r1, #36	; 0x24
 8001660:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2101      	movs	r1, #1
 800166e:	438a      	bics	r2, r1
 8001670:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4934      	ldr	r1, [pc, #208]	; (800174c <HAL_I2C_Init+0x120>)
 800167c:	400a      	ands	r2, r1
 800167e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689a      	ldr	r2, [r3, #8]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4931      	ldr	r1, [pc, #196]	; (8001750 <HAL_I2C_Init+0x124>)
 800168c:	400a      	ands	r2, r1
 800168e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d108      	bne.n	80016aa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	0209      	lsls	r1, r1, #8
 80016a4:	430a      	orrs	r2, r1
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	e007      	b.n	80016ba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2184      	movs	r1, #132	; 0x84
 80016b4:	0209      	lsls	r1, r1, #8
 80016b6:	430a      	orrs	r2, r1
 80016b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d104      	bne.n	80016cc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2280      	movs	r2, #128	; 0x80
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	491f      	ldr	r1, [pc, #124]	; (8001754 <HAL_I2C_Init+0x128>)
 80016d8:	430a      	orrs	r2, r1
 80016da:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	491a      	ldr	r1, [pc, #104]	; (8001750 <HAL_I2C_Init+0x124>)
 80016e8:	400a      	ands	r2, r1
 80016ea:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	431a      	orrs	r2, r3
 80016f6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	430a      	orrs	r2, r1
 8001704:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69d9      	ldr	r1, [r3, #28]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1a      	ldr	r2, [r3, #32]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2101      	movs	r1, #1
 8001722:	430a      	orrs	r2, r1
 8001724:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2241      	movs	r2, #65	; 0x41
 8001730:	2120      	movs	r1, #32
 8001732:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2242      	movs	r2, #66	; 0x42
 800173e:	2100      	movs	r1, #0
 8001740:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	0018      	movs	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	b002      	add	sp, #8
 800174a:	bd80      	pop	{r7, pc}
 800174c:	f0ffffff 	.word	0xf0ffffff
 8001750:	ffff7fff 	.word	0xffff7fff
 8001754:	02008000 	.word	0x02008000

08001758 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b089      	sub	sp, #36	; 0x24
 800175c:	af02      	add	r7, sp, #8
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	000c      	movs	r4, r1
 8001762:	0010      	movs	r0, r2
 8001764:	0019      	movs	r1, r3
 8001766:	230a      	movs	r3, #10
 8001768:	18fb      	adds	r3, r7, r3
 800176a:	1c22      	adds	r2, r4, #0
 800176c:	801a      	strh	r2, [r3, #0]
 800176e:	2308      	movs	r3, #8
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	1c02      	adds	r2, r0, #0
 8001774:	801a      	strh	r2, [r3, #0]
 8001776:	1dbb      	adds	r3, r7, #6
 8001778:	1c0a      	adds	r2, r1, #0
 800177a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2241      	movs	r2, #65	; 0x41
 8001780:	5c9b      	ldrb	r3, [r3, r2]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b20      	cmp	r3, #32
 8001786:	d000      	beq.n	800178a <HAL_I2C_Mem_Read+0x32>
 8001788:	e110      	b.n	80019ac <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800178a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <HAL_I2C_Mem_Read+0x42>
 8001790:	232c      	movs	r3, #44	; 0x2c
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	881b      	ldrh	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d105      	bne.n	80017a6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	0092      	lsls	r2, r2, #2
 80017a0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e103      	b.n	80019ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2240      	movs	r2, #64	; 0x40
 80017aa:	5c9b      	ldrb	r3, [r3, r2]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_I2C_Mem_Read+0x5c>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e0fc      	b.n	80019ae <HAL_I2C_Mem_Read+0x256>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2240      	movs	r2, #64	; 0x40
 80017b8:	2101      	movs	r1, #1
 80017ba:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017bc:	f7ff fbf6 	bl	8000fac <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	0219      	lsls	r1, r3, #8
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2319      	movs	r3, #25
 80017d0:	2201      	movs	r2, #1
 80017d2:	f000 f979 	bl	8001ac8 <I2C_WaitOnFlagUntilTimeout>
 80017d6:	1e03      	subs	r3, r0, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e0e7      	b.n	80019ae <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2241      	movs	r2, #65	; 0x41
 80017e2:	2122      	movs	r1, #34	; 0x22
 80017e4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2242      	movs	r2, #66	; 0x42
 80017ea:	2140      	movs	r1, #64	; 0x40
 80017ec:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2200      	movs	r2, #0
 80017f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	222c      	movs	r2, #44	; 0x2c
 80017fe:	18ba      	adds	r2, r7, r2
 8001800:	8812      	ldrh	r2, [r2, #0]
 8001802:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800180a:	1dbb      	adds	r3, r7, #6
 800180c:	881c      	ldrh	r4, [r3, #0]
 800180e:	2308      	movs	r3, #8
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	881a      	ldrh	r2, [r3, #0]
 8001814:	230a      	movs	r3, #10
 8001816:	18fb      	adds	r3, r7, r3
 8001818:	8819      	ldrh	r1, [r3, #0]
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	0023      	movs	r3, r4
 8001826:	f000 f8cb 	bl	80019c0 <I2C_RequestMemoryRead>
 800182a:	1e03      	subs	r3, r0, #0
 800182c:	d005      	beq.n	800183a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2240      	movs	r2, #64	; 0x40
 8001832:	2100      	movs	r1, #0
 8001834:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e0b9      	b.n	80019ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183e:	b29b      	uxth	r3, r3
 8001840:	2bff      	cmp	r3, #255	; 0xff
 8001842:	d911      	bls.n	8001868 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	22ff      	movs	r2, #255	; 0xff
 8001848:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184e:	b2da      	uxtb	r2, r3
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	045c      	lsls	r4, r3, #17
 8001854:	230a      	movs	r3, #10
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	8819      	ldrh	r1, [r3, #0]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <HAL_I2C_Mem_Read+0x260>)
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	0023      	movs	r3, r4
 8001862:	f000 fb09 	bl	8001e78 <I2C_TransferConfig>
 8001866:	e012      	b.n	800188e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800186c:	b29a      	uxth	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001876:	b2da      	uxtb	r2, r3
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	049c      	lsls	r4, r3, #18
 800187c:	230a      	movs	r3, #10
 800187e:	18fb      	adds	r3, r7, r3
 8001880:	8819      	ldrh	r1, [r3, #0]
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	4b4c      	ldr	r3, [pc, #304]	; (80019b8 <HAL_I2C_Mem_Read+0x260>)
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	0023      	movs	r3, r4
 800188a:	f000 faf5 	bl	8001e78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800188e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	0013      	movs	r3, r2
 8001898:	2200      	movs	r2, #0
 800189a:	2104      	movs	r1, #4
 800189c:	f000 f914 	bl	8001ac8 <I2C_WaitOnFlagUntilTimeout>
 80018a0:	1e03      	subs	r3, r0, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e082      	b.n	80019ae <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018de:	b29b      	uxth	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d03a      	beq.n	800195a <HAL_I2C_Mem_Read+0x202>
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d136      	bne.n	800195a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	0013      	movs	r3, r2
 80018f6:	2200      	movs	r2, #0
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	f000 f8e5 	bl	8001ac8 <I2C_WaitOnFlagUntilTimeout>
 80018fe:	1e03      	subs	r3, r0, #0
 8001900:	d001      	beq.n	8001906 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e053      	b.n	80019ae <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190a:	b29b      	uxth	r3, r3
 800190c:	2bff      	cmp	r3, #255	; 0xff
 800190e:	d911      	bls.n	8001934 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	22ff      	movs	r2, #255	; 0xff
 8001914:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191a:	b2da      	uxtb	r2, r3
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	045c      	lsls	r4, r3, #17
 8001920:	230a      	movs	r3, #10
 8001922:	18fb      	adds	r3, r7, r3
 8001924:	8819      	ldrh	r1, [r3, #0]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	2300      	movs	r3, #0
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	0023      	movs	r3, r4
 800192e:	f000 faa3 	bl	8001e78 <I2C_TransferConfig>
 8001932:	e012      	b.n	800195a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001938:	b29a      	uxth	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001942:	b2da      	uxtb	r2, r3
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	049c      	lsls	r4, r3, #18
 8001948:	230a      	movs	r3, #10
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	8819      	ldrh	r1, [r3, #0]
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	2300      	movs	r3, #0
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	0023      	movs	r3, r4
 8001956:	f000 fa8f 	bl	8001e78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195e:	b29b      	uxth	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d194      	bne.n	800188e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	0018      	movs	r0, r3
 800196c:	f000 f940 	bl	8001bf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001970:	1e03      	subs	r3, r0, #0
 8001972:	d001      	beq.n	8001978 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e01a      	b.n	80019ae <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2220      	movs	r2, #32
 800197e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	490c      	ldr	r1, [pc, #48]	; (80019bc <HAL_I2C_Mem_Read+0x264>)
 800198c:	400a      	ands	r2, r1
 800198e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2241      	movs	r2, #65	; 0x41
 8001994:	2120      	movs	r1, #32
 8001996:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2242      	movs	r2, #66	; 0x42
 800199c:	2100      	movs	r1, #0
 800199e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2240      	movs	r2, #64	; 0x40
 80019a4:	2100      	movs	r1, #0
 80019a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	e000      	b.n	80019ae <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80019ac:	2302      	movs	r3, #2
  }
}
 80019ae:	0018      	movs	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b007      	add	sp, #28
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	80002400 	.word	0x80002400
 80019bc:	fe00e800 	.word	0xfe00e800

080019c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	000c      	movs	r4, r1
 80019ca:	0010      	movs	r0, r2
 80019cc:	0019      	movs	r1, r3
 80019ce:	250a      	movs	r5, #10
 80019d0:	197b      	adds	r3, r7, r5
 80019d2:	1c22      	adds	r2, r4, #0
 80019d4:	801a      	strh	r2, [r3, #0]
 80019d6:	2308      	movs	r3, #8
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	1c02      	adds	r2, r0, #0
 80019dc:	801a      	strh	r2, [r3, #0]
 80019de:	1dbb      	adds	r3, r7, #6
 80019e0:	1c0a      	adds	r2, r1, #0
 80019e2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80019e4:	1dbb      	adds	r3, r7, #6
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	197b      	adds	r3, r7, r5
 80019ec:	8819      	ldrh	r1, [r3, #0]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	4b23      	ldr	r3, [pc, #140]	; (8001a80 <I2C_RequestMemoryRead+0xc0>)
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2300      	movs	r3, #0
 80019f6:	f000 fa3f 	bl	8001e78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fc:	6a39      	ldr	r1, [r7, #32]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f000 f8af 	bl	8001b64 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a06:	1e03      	subs	r3, r0, #0
 8001a08:	d001      	beq.n	8001a0e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e033      	b.n	8001a76 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a0e:	1dbb      	adds	r3, r7, #6
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d107      	bne.n	8001a26 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a16:	2308      	movs	r3, #8
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
 8001a24:	e019      	b.n	8001a5a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a26:	2308      	movs	r3, #8
 8001a28:	18fb      	adds	r3, r7, r3
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a3a:	6a39      	ldr	r1, [r7, #32]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f000 f890 	bl	8001b64 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a44:	1e03      	subs	r3, r0, #0
 8001a46:	d001      	beq.n	8001a4c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e014      	b.n	8001a76 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001a5a:	6a3a      	ldr	r2, [r7, #32]
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	0013      	movs	r3, r2
 8001a64:	2200      	movs	r2, #0
 8001a66:	2140      	movs	r1, #64	; 0x40
 8001a68:	f000 f82e 	bl	8001ac8 <I2C_WaitOnFlagUntilTimeout>
 8001a6c:	1e03      	subs	r3, r0, #0
 8001a6e:	d001      	beq.n	8001a74 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	0018      	movs	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	b004      	add	sp, #16
 8001a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	80002000 	.word	0x80002000

08001a84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	2202      	movs	r2, #2
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d103      	bne.n	8001aa2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4013      	ands	r3, r2
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d007      	beq.n	8001ac0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699a      	ldr	r2, [r3, #24]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2101      	movs	r1, #1
 8001abc:	430a      	orrs	r2, r1
 8001abe:	619a      	str	r2, [r3, #24]
  }
}
 8001ac0:	46c0      	nop			; (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	1dfb      	adds	r3, r7, #7
 8001ad6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ad8:	e030      	b.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	3301      	adds	r3, #1
 8001ade:	d02d      	beq.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ae0:	f7ff fa64 	bl	8000fac <HAL_GetTick>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d302      	bcc.n	8001af6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d122      	bne.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	4013      	ands	r3, r2
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	425a      	negs	r2, r3
 8001b06:	4153      	adcs	r3, r2
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	001a      	movs	r2, r3
 8001b0c:	1dfb      	adds	r3, r7, #7
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d113      	bne.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b18:	2220      	movs	r2, #32
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2241      	movs	r2, #65	; 0x41
 8001b24:	2120      	movs	r1, #32
 8001b26:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2242      	movs	r2, #66	; 0x42
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2240      	movs	r2, #64	; 0x40
 8001b34:	2100      	movs	r1, #0
 8001b36:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e00f      	b.n	8001b5c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	4013      	ands	r3, r2
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	425a      	negs	r2, r3
 8001b4c:	4153      	adcs	r3, r2
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	001a      	movs	r2, r3
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d0bf      	beq.n	8001ada <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b004      	add	sp, #16
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b70:	e032      	b.n	8001bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	68b9      	ldr	r1, [r7, #8]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f000 f87d 	bl	8001c78 <I2C_IsErrorOccurred>
 8001b7e:	1e03      	subs	r3, r0, #0
 8001b80:	d001      	beq.n	8001b86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e030      	b.n	8001be8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	d025      	beq.n	8001bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b8c:	f7ff fa0e 	bl	8000fac <HAL_GetTick>
 8001b90:	0002      	movs	r2, r0
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d302      	bcc.n	8001ba2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d11a      	bne.n	8001bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d013      	beq.n	8001bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2241      	movs	r2, #65	; 0x41
 8001bc0:	2120      	movs	r1, #32
 8001bc2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2242      	movs	r2, #66	; 0x42
 8001bc8:	2100      	movs	r1, #0
 8001bca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2240      	movs	r2, #64	; 0x40
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e007      	b.n	8001be8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2202      	movs	r2, #2
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d1c5      	bne.n	8001b72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	0018      	movs	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	b004      	add	sp, #16
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bfc:	e02f      	b.n	8001c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	0018      	movs	r0, r3
 8001c06:	f000 f837 	bl	8001c78 <I2C_IsErrorOccurred>
 8001c0a:	1e03      	subs	r3, r0, #0
 8001c0c:	d001      	beq.n	8001c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e02d      	b.n	8001c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c12:	f7ff f9cb 	bl	8000fac <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d302      	bcc.n	8001c28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d11a      	bne.n	8001c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b20      	cmp	r3, #32
 8001c34:	d013      	beq.n	8001c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2241      	movs	r2, #65	; 0x41
 8001c46:	2120      	movs	r1, #32
 8001c48:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2242      	movs	r2, #66	; 0x42
 8001c4e:	2100      	movs	r1, #0
 8001c50:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2240      	movs	r2, #64	; 0x40
 8001c56:	2100      	movs	r1, #0
 8001c58:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e007      	b.n	8001c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	2220      	movs	r2, #32
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b20      	cmp	r3, #32
 8001c6a:	d1c8      	bne.n	8001bfe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b004      	add	sp, #16
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c78:	b590      	push	{r4, r7, lr}
 8001c7a:	b08b      	sub	sp, #44	; 0x2c
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c84:	2327      	movs	r3, #39	; 0x27
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2210      	movs	r2, #16
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d100      	bne.n	8001ca6 <I2C_IsErrorOccurred+0x2e>
 8001ca4:	e082      	b.n	8001dac <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2210      	movs	r2, #16
 8001cac:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cae:	e060      	b.n	8001d72 <I2C_IsErrorOccurred+0xfa>
 8001cb0:	2427      	movs	r4, #39	; 0x27
 8001cb2:	193b      	adds	r3, r7, r4
 8001cb4:	193a      	adds	r2, r7, r4
 8001cb6:	7812      	ldrb	r2, [r2, #0]
 8001cb8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	d058      	beq.n	8001d72 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cc0:	f7ff f974 	bl	8000fac <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d306      	bcc.n	8001cde <I2C_IsErrorOccurred+0x66>
 8001cd0:	193b      	adds	r3, r7, r4
 8001cd2:	193a      	adds	r2, r7, r4
 8001cd4:	7812      	ldrb	r2, [r2, #0]
 8001cd6:	701a      	strb	r2, [r3, #0]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d149      	bne.n	8001d72 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	01db      	lsls	r3, r3, #7
 8001ce8:	4013      	ands	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001cec:	2013      	movs	r0, #19
 8001cee:	183b      	adds	r3, r7, r0
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	2142      	movs	r1, #66	; 0x42
 8001cf4:	5c52      	ldrb	r2, [r2, r1]
 8001cf6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699a      	ldr	r2, [r3, #24]
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	401a      	ands	r2, r3
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d126      	bne.n	8001d5a <I2C_IsErrorOccurred+0xe2>
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	01db      	lsls	r3, r3, #7
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d021      	beq.n	8001d5a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001d16:	183b      	adds	r3, r7, r0
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b20      	cmp	r3, #32
 8001d1c:	d01d      	beq.n	8001d5a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	01c9      	lsls	r1, r1, #7
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d30:	f7ff f93c 	bl	8000fac <HAL_GetTick>
 8001d34:	0003      	movs	r3, r0
 8001d36:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d38:	e00f      	b.n	8001d5a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d3a:	f7ff f937 	bl	8000fac <HAL_GetTick>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b19      	cmp	r3, #25
 8001d46:	d908      	bls.n	8001d5a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001d50:	2327      	movs	r3, #39	; 0x27
 8001d52:	18fb      	adds	r3, r7, r3
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]

              break;
 8001d58:	e00b      	b.n	8001d72 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	2220      	movs	r2, #32
 8001d62:	4013      	ands	r3, r2
 8001d64:	2127      	movs	r1, #39	; 0x27
 8001d66:	187a      	adds	r2, r7, r1
 8001d68:	1879      	adds	r1, r7, r1
 8001d6a:	7809      	ldrb	r1, [r1, #0]
 8001d6c:	7011      	strb	r1, [r2, #0]
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	d1e3      	bne.n	8001d3a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b20      	cmp	r3, #32
 8001d7e:	d004      	beq.n	8001d8a <I2C_IsErrorOccurred+0x112>
 8001d80:	2327      	movs	r3, #39	; 0x27
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d092      	beq.n	8001cb0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d8a:	2327      	movs	r3, #39	; 0x27
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d103      	bne.n	8001d9c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d9c:	6a3b      	ldr	r3, [r7, #32]
 8001d9e:	2204      	movs	r2, #4
 8001da0:	4313      	orrs	r3, r2
 8001da2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001da4:	2327      	movs	r3, #39	; 0x27
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d00c      	beq.n	8001dd8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2280      	movs	r2, #128	; 0x80
 8001dcc:	0052      	lsls	r2, r2, #1
 8001dce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001dd0:	2327      	movs	r3, #39	; 0x27
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4013      	ands	r3, r2
 8001de0:	d00c      	beq.n	8001dfc <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	2208      	movs	r2, #8
 8001de6:	4313      	orrs	r3, r2
 8001de8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	00d2      	lsls	r2, r2, #3
 8001df2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001df4:	2327      	movs	r3, #39	; 0x27
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4013      	ands	r3, r2
 8001e04:	d00c      	beq.n	8001e20 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	2202      	movs	r2, #2
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2280      	movs	r2, #128	; 0x80
 8001e14:	0092      	lsls	r2, r2, #2
 8001e16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e18:	2327      	movs	r3, #39	; 0x27
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001e20:	2327      	movs	r3, #39	; 0x27
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d01d      	beq.n	8001e66 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7ff fe29 	bl	8001a84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	490d      	ldr	r1, [pc, #52]	; (8001e74 <I2C_IsErrorOccurred+0x1fc>)
 8001e3e:	400a      	ands	r2, r1
 8001e40:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2241      	movs	r2, #65	; 0x41
 8001e52:	2120      	movs	r1, #32
 8001e54:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2242      	movs	r2, #66	; 0x42
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2240      	movs	r2, #64	; 0x40
 8001e62:	2100      	movs	r1, #0
 8001e64:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001e66:	2327      	movs	r3, #39	; 0x27
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
}
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b00b      	add	sp, #44	; 0x2c
 8001e72:	bd90      	pop	{r4, r7, pc}
 8001e74:	fe00e800 	.word	0xfe00e800

08001e78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	0008      	movs	r0, r1
 8001e82:	0011      	movs	r1, r2
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	240a      	movs	r4, #10
 8001e88:	193b      	adds	r3, r7, r4
 8001e8a:	1c02      	adds	r2, r0, #0
 8001e8c:	801a      	strh	r2, [r3, #0]
 8001e8e:	2009      	movs	r0, #9
 8001e90:	183b      	adds	r3, r7, r0
 8001e92:	1c0a      	adds	r2, r1, #0
 8001e94:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e96:	193b      	adds	r3, r7, r4
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	059b      	lsls	r3, r3, #22
 8001e9c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e9e:	183b      	adds	r3, r7, r0
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	0419      	lsls	r1, r3, #16
 8001ea4:	23ff      	movs	r3, #255	; 0xff
 8001ea6:	041b      	lsls	r3, r3, #16
 8001ea8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eaa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	085b      	lsrs	r3, r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ec2:	0d51      	lsrs	r1, r2, #21
 8001ec4:	2280      	movs	r2, #128	; 0x80
 8001ec6:	00d2      	lsls	r2, r2, #3
 8001ec8:	400a      	ands	r2, r1
 8001eca:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <I2C_TransferConfig+0x70>)
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	43d2      	mvns	r2, r2
 8001ed0:	401a      	ands	r2, r3
 8001ed2:	0011      	movs	r1, r2
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b007      	add	sp, #28
 8001ee4:	bd90      	pop	{r4, r7, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	03ff63ff 	.word	0x03ff63ff

08001eec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2241      	movs	r2, #65	; 0x41
 8001efa:	5c9b      	ldrb	r3, [r3, r2]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b20      	cmp	r3, #32
 8001f00:	d138      	bne.n	8001f74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2240      	movs	r2, #64	; 0x40
 8001f06:	5c9b      	ldrb	r3, [r3, r2]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e032      	b.n	8001f76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2240      	movs	r2, #64	; 0x40
 8001f14:	2101      	movs	r1, #1
 8001f16:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2241      	movs	r2, #65	; 0x41
 8001f1c:	2124      	movs	r1, #36	; 0x24
 8001f1e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	438a      	bics	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4911      	ldr	r1, [pc, #68]	; (8001f80 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6819      	ldr	r1, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2241      	movs	r2, #65	; 0x41
 8001f64:	2120      	movs	r1, #32
 8001f66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2240      	movs	r2, #64	; 0x40
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e000      	b.n	8001f76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f74:	2302      	movs	r3, #2
  }
}
 8001f76:	0018      	movs	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b002      	add	sp, #8
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	ffffefff 	.word	0xffffefff

08001f84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2241      	movs	r2, #65	; 0x41
 8001f92:	5c9b      	ldrb	r3, [r3, r2]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	d139      	bne.n	800200e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2240      	movs	r2, #64	; 0x40
 8001f9e:	5c9b      	ldrb	r3, [r3, r2]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e033      	b.n	8002010 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2240      	movs	r2, #64	; 0x40
 8001fac:	2101      	movs	r1, #1
 8001fae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2241      	movs	r2, #65	; 0x41
 8001fb4:	2124      	movs	r1, #36	; 0x24
 8001fb6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	438a      	bics	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4a11      	ldr	r2, [pc, #68]	; (8002018 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2241      	movs	r2, #65	; 0x41
 8001ffe:	2120      	movs	r1, #32
 8002000:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2240      	movs	r2, #64	; 0x40
 8002006:	2100      	movs	r1, #0
 8002008:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	e000      	b.n	8002010 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800200e:	2302      	movs	r3, #2
  }
}
 8002010:	0018      	movs	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	b004      	add	sp, #16
 8002016:	bd80      	pop	{r7, pc}
 8002018:	fffff0ff 	.word	0xfffff0ff

0800201c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e301      	b.n	8002632 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2201      	movs	r2, #1
 8002034:	4013      	ands	r3, r2
 8002036:	d100      	bne.n	800203a <HAL_RCC_OscConfig+0x1e>
 8002038:	e08d      	b.n	8002156 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800203a:	4bc3      	ldr	r3, [pc, #780]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	220c      	movs	r2, #12
 8002040:	4013      	ands	r3, r2
 8002042:	2b04      	cmp	r3, #4
 8002044:	d00e      	beq.n	8002064 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002046:	4bc0      	ldr	r3, [pc, #768]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	220c      	movs	r2, #12
 800204c:	4013      	ands	r3, r2
 800204e:	2b08      	cmp	r3, #8
 8002050:	d116      	bne.n	8002080 <HAL_RCC_OscConfig+0x64>
 8002052:	4bbd      	ldr	r3, [pc, #756]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	025b      	lsls	r3, r3, #9
 800205a:	401a      	ands	r2, r3
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	025b      	lsls	r3, r3, #9
 8002060:	429a      	cmp	r2, r3
 8002062:	d10d      	bne.n	8002080 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002064:	4bb8      	ldr	r3, [pc, #736]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	029b      	lsls	r3, r3, #10
 800206c:	4013      	ands	r3, r2
 800206e:	d100      	bne.n	8002072 <HAL_RCC_OscConfig+0x56>
 8002070:	e070      	b.n	8002154 <HAL_RCC_OscConfig+0x138>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d000      	beq.n	800207c <HAL_RCC_OscConfig+0x60>
 800207a:	e06b      	b.n	8002154 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e2d8      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d107      	bne.n	8002098 <HAL_RCC_OscConfig+0x7c>
 8002088:	4baf      	ldr	r3, [pc, #700]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4bae      	ldr	r3, [pc, #696]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 800208e:	2180      	movs	r1, #128	; 0x80
 8002090:	0249      	lsls	r1, r1, #9
 8002092:	430a      	orrs	r2, r1
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	e02f      	b.n	80020f8 <HAL_RCC_OscConfig+0xdc>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10c      	bne.n	80020ba <HAL_RCC_OscConfig+0x9e>
 80020a0:	4ba9      	ldr	r3, [pc, #676]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4ba8      	ldr	r3, [pc, #672]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020a6:	49a9      	ldr	r1, [pc, #676]	; (800234c <HAL_RCC_OscConfig+0x330>)
 80020a8:	400a      	ands	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	4ba6      	ldr	r3, [pc, #664]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4ba5      	ldr	r3, [pc, #660]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020b2:	49a7      	ldr	r1, [pc, #668]	; (8002350 <HAL_RCC_OscConfig+0x334>)
 80020b4:	400a      	ands	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	e01e      	b.n	80020f8 <HAL_RCC_OscConfig+0xdc>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d10e      	bne.n	80020e0 <HAL_RCC_OscConfig+0xc4>
 80020c2:	4ba1      	ldr	r3, [pc, #644]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4ba0      	ldr	r3, [pc, #640]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020c8:	2180      	movs	r1, #128	; 0x80
 80020ca:	02c9      	lsls	r1, r1, #11
 80020cc:	430a      	orrs	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	4b9d      	ldr	r3, [pc, #628]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b9c      	ldr	r3, [pc, #624]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020d6:	2180      	movs	r1, #128	; 0x80
 80020d8:	0249      	lsls	r1, r1, #9
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	e00b      	b.n	80020f8 <HAL_RCC_OscConfig+0xdc>
 80020e0:	4b99      	ldr	r3, [pc, #612]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b98      	ldr	r3, [pc, #608]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020e6:	4999      	ldr	r1, [pc, #612]	; (800234c <HAL_RCC_OscConfig+0x330>)
 80020e8:	400a      	ands	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	4b96      	ldr	r3, [pc, #600]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b95      	ldr	r3, [pc, #596]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80020f2:	4997      	ldr	r1, [pc, #604]	; (8002350 <HAL_RCC_OscConfig+0x334>)
 80020f4:	400a      	ands	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d014      	beq.n	800212a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7fe ff54 	bl	8000fac <HAL_GetTick>
 8002104:	0003      	movs	r3, r0
 8002106:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800210a:	f7fe ff4f 	bl	8000fac <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b64      	cmp	r3, #100	; 0x64
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e28a      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211c:	4b8a      	ldr	r3, [pc, #552]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	029b      	lsls	r3, r3, #10
 8002124:	4013      	ands	r3, r2
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0xee>
 8002128:	e015      	b.n	8002156 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7fe ff3f 	bl	8000fac <HAL_GetTick>
 800212e:	0003      	movs	r3, r0
 8002130:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002134:	f7fe ff3a 	bl	8000fac <HAL_GetTick>
 8002138:	0002      	movs	r2, r0
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e275      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	4b80      	ldr	r3, [pc, #512]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	029b      	lsls	r3, r3, #10
 800214e:	4013      	ands	r3, r2
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x118>
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2202      	movs	r2, #2
 800215c:	4013      	ands	r3, r2
 800215e:	d100      	bne.n	8002162 <HAL_RCC_OscConfig+0x146>
 8002160:	e069      	b.n	8002236 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002162:	4b79      	ldr	r3, [pc, #484]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	220c      	movs	r2, #12
 8002168:	4013      	ands	r3, r2
 800216a:	d00b      	beq.n	8002184 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800216c:	4b76      	ldr	r3, [pc, #472]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	220c      	movs	r2, #12
 8002172:	4013      	ands	r3, r2
 8002174:	2b08      	cmp	r3, #8
 8002176:	d11c      	bne.n	80021b2 <HAL_RCC_OscConfig+0x196>
 8002178:	4b73      	ldr	r3, [pc, #460]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	025b      	lsls	r3, r3, #9
 8002180:	4013      	ands	r3, r2
 8002182:	d116      	bne.n	80021b2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002184:	4b70      	ldr	r3, [pc, #448]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2202      	movs	r2, #2
 800218a:	4013      	ands	r3, r2
 800218c:	d005      	beq.n	800219a <HAL_RCC_OscConfig+0x17e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d001      	beq.n	800219a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e24b      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219a:	4b6b      	ldr	r3, [pc, #428]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	22f8      	movs	r2, #248	; 0xf8
 80021a0:	4393      	bics	r3, r2
 80021a2:	0019      	movs	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	00da      	lsls	r2, r3, #3
 80021aa:	4b67      	ldr	r3, [pc, #412]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b0:	e041      	b.n	8002236 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d024      	beq.n	8002204 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ba:	4b63      	ldr	r3, [pc, #396]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	4b62      	ldr	r3, [pc, #392]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80021c0:	2101      	movs	r1, #1
 80021c2:	430a      	orrs	r2, r1
 80021c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c6:	f7fe fef1 	bl	8000fac <HAL_GetTick>
 80021ca:	0003      	movs	r3, r0
 80021cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d0:	f7fe feec 	bl	8000fac <HAL_GetTick>
 80021d4:	0002      	movs	r2, r0
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e227      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e2:	4b59      	ldr	r3, [pc, #356]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2202      	movs	r2, #2
 80021e8:	4013      	ands	r3, r2
 80021ea:	d0f1      	beq.n	80021d0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	4b56      	ldr	r3, [pc, #344]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	22f8      	movs	r2, #248	; 0xf8
 80021f2:	4393      	bics	r3, r2
 80021f4:	0019      	movs	r1, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00da      	lsls	r2, r3, #3
 80021fc:	4b52      	ldr	r3, [pc, #328]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e018      	b.n	8002236 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002204:	4b50      	ldr	r3, [pc, #320]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b4f      	ldr	r3, [pc, #316]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 800220a:	2101      	movs	r1, #1
 800220c:	438a      	bics	r2, r1
 800220e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f7fe fecc 	bl	8000fac <HAL_GetTick>
 8002214:	0003      	movs	r3, r0
 8002216:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800221a:	f7fe fec7 	bl	8000fac <HAL_GetTick>
 800221e:	0002      	movs	r2, r0
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e202      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222c:	4b46      	ldr	r3, [pc, #280]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2202      	movs	r2, #2
 8002232:	4013      	ands	r3, r2
 8002234:	d1f1      	bne.n	800221a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2208      	movs	r2, #8
 800223c:	4013      	ands	r3, r2
 800223e:	d036      	beq.n	80022ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d019      	beq.n	800227c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002248:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 800224a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800224c:	4b3e      	ldr	r3, [pc, #248]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 800224e:	2101      	movs	r1, #1
 8002250:	430a      	orrs	r2, r1
 8002252:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002254:	f7fe feaa 	bl	8000fac <HAL_GetTick>
 8002258:	0003      	movs	r3, r0
 800225a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800225e:	f7fe fea5 	bl	8000fac <HAL_GetTick>
 8002262:	0002      	movs	r2, r0
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e1e0      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002270:	4b35      	ldr	r3, [pc, #212]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	2202      	movs	r2, #2
 8002276:	4013      	ands	r3, r2
 8002278:	d0f1      	beq.n	800225e <HAL_RCC_OscConfig+0x242>
 800227a:	e018      	b.n	80022ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227c:	4b32      	ldr	r3, [pc, #200]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 800227e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002280:	4b31      	ldr	r3, [pc, #196]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002282:	2101      	movs	r1, #1
 8002284:	438a      	bics	r2, r1
 8002286:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002288:	f7fe fe90 	bl	8000fac <HAL_GetTick>
 800228c:	0003      	movs	r3, r0
 800228e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002292:	f7fe fe8b 	bl	8000fac <HAL_GetTick>
 8002296:	0002      	movs	r2, r0
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e1c6      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	2202      	movs	r2, #2
 80022aa:	4013      	ands	r3, r2
 80022ac:	d1f1      	bne.n	8002292 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2204      	movs	r2, #4
 80022b4:	4013      	ands	r3, r2
 80022b6:	d100      	bne.n	80022ba <HAL_RCC_OscConfig+0x29e>
 80022b8:	e0b4      	b.n	8002424 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ba:	201f      	movs	r0, #31
 80022bc:	183b      	adds	r3, r7, r0
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c2:	4b21      	ldr	r3, [pc, #132]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80022c4:	69da      	ldr	r2, [r3, #28]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	055b      	lsls	r3, r3, #21
 80022ca:	4013      	ands	r3, r2
 80022cc:	d110      	bne.n	80022f0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80022d0:	69da      	ldr	r2, [r3, #28]
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80022d4:	2180      	movs	r1, #128	; 0x80
 80022d6:	0549      	lsls	r1, r1, #21
 80022d8:	430a      	orrs	r2, r1
 80022da:	61da      	str	r2, [r3, #28]
 80022dc:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	055b      	lsls	r3, r3, #21
 80022e4:	4013      	ands	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022ea:	183b      	adds	r3, r7, r0
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	4b18      	ldr	r3, [pc, #96]	; (8002354 <HAL_RCC_OscConfig+0x338>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4013      	ands	r3, r2
 80022fa:	d11a      	bne.n	8002332 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022fc:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_RCC_OscConfig+0x338>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b14      	ldr	r3, [pc, #80]	; (8002354 <HAL_RCC_OscConfig+0x338>)
 8002302:	2180      	movs	r1, #128	; 0x80
 8002304:	0049      	lsls	r1, r1, #1
 8002306:	430a      	orrs	r2, r1
 8002308:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230a:	f7fe fe4f 	bl	8000fac <HAL_GetTick>
 800230e:	0003      	movs	r3, r0
 8002310:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002314:	f7fe fe4a 	bl	8000fac <HAL_GetTick>
 8002318:	0002      	movs	r2, r0
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e185      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_RCC_OscConfig+0x338>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4013      	ands	r3, r2
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10e      	bne.n	8002358 <HAL_RCC_OscConfig+0x33c>
 800233a:	4b03      	ldr	r3, [pc, #12]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 800233c:	6a1a      	ldr	r2, [r3, #32]
 800233e:	4b02      	ldr	r3, [pc, #8]	; (8002348 <HAL_RCC_OscConfig+0x32c>)
 8002340:	2101      	movs	r1, #1
 8002342:	430a      	orrs	r2, r1
 8002344:	621a      	str	r2, [r3, #32]
 8002346:	e035      	b.n	80023b4 <HAL_RCC_OscConfig+0x398>
 8002348:	40021000 	.word	0x40021000
 800234c:	fffeffff 	.word	0xfffeffff
 8002350:	fffbffff 	.word	0xfffbffff
 8002354:	40007000 	.word	0x40007000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10c      	bne.n	800237a <HAL_RCC_OscConfig+0x35e>
 8002360:	4bb6      	ldr	r3, [pc, #728]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002362:	6a1a      	ldr	r2, [r3, #32]
 8002364:	4bb5      	ldr	r3, [pc, #724]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002366:	2101      	movs	r1, #1
 8002368:	438a      	bics	r2, r1
 800236a:	621a      	str	r2, [r3, #32]
 800236c:	4bb3      	ldr	r3, [pc, #716]	; (800263c <HAL_RCC_OscConfig+0x620>)
 800236e:	6a1a      	ldr	r2, [r3, #32]
 8002370:	4bb2      	ldr	r3, [pc, #712]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002372:	2104      	movs	r1, #4
 8002374:	438a      	bics	r2, r1
 8002376:	621a      	str	r2, [r3, #32]
 8002378:	e01c      	b.n	80023b4 <HAL_RCC_OscConfig+0x398>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2b05      	cmp	r3, #5
 8002380:	d10c      	bne.n	800239c <HAL_RCC_OscConfig+0x380>
 8002382:	4bae      	ldr	r3, [pc, #696]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002384:	6a1a      	ldr	r2, [r3, #32]
 8002386:	4bad      	ldr	r3, [pc, #692]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002388:	2104      	movs	r1, #4
 800238a:	430a      	orrs	r2, r1
 800238c:	621a      	str	r2, [r3, #32]
 800238e:	4bab      	ldr	r3, [pc, #684]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002390:	6a1a      	ldr	r2, [r3, #32]
 8002392:	4baa      	ldr	r3, [pc, #680]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002394:	2101      	movs	r1, #1
 8002396:	430a      	orrs	r2, r1
 8002398:	621a      	str	r2, [r3, #32]
 800239a:	e00b      	b.n	80023b4 <HAL_RCC_OscConfig+0x398>
 800239c:	4ba7      	ldr	r3, [pc, #668]	; (800263c <HAL_RCC_OscConfig+0x620>)
 800239e:	6a1a      	ldr	r2, [r3, #32]
 80023a0:	4ba6      	ldr	r3, [pc, #664]	; (800263c <HAL_RCC_OscConfig+0x620>)
 80023a2:	2101      	movs	r1, #1
 80023a4:	438a      	bics	r2, r1
 80023a6:	621a      	str	r2, [r3, #32]
 80023a8:	4ba4      	ldr	r3, [pc, #656]	; (800263c <HAL_RCC_OscConfig+0x620>)
 80023aa:	6a1a      	ldr	r2, [r3, #32]
 80023ac:	4ba3      	ldr	r3, [pc, #652]	; (800263c <HAL_RCC_OscConfig+0x620>)
 80023ae:	2104      	movs	r1, #4
 80023b0:	438a      	bics	r2, r1
 80023b2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d014      	beq.n	80023e6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023bc:	f7fe fdf6 	bl	8000fac <HAL_GetTick>
 80023c0:	0003      	movs	r3, r0
 80023c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c4:	e009      	b.n	80023da <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c6:	f7fe fdf1 	bl	8000fac <HAL_GetTick>
 80023ca:	0002      	movs	r2, r0
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	4a9b      	ldr	r2, [pc, #620]	; (8002640 <HAL_RCC_OscConfig+0x624>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e12b      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023da:	4b98      	ldr	r3, [pc, #608]	; (800263c <HAL_RCC_OscConfig+0x620>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	2202      	movs	r2, #2
 80023e0:	4013      	ands	r3, r2
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x3aa>
 80023e4:	e013      	b.n	800240e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e6:	f7fe fde1 	bl	8000fac <HAL_GetTick>
 80023ea:	0003      	movs	r3, r0
 80023ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ee:	e009      	b.n	8002404 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f0:	f7fe fddc 	bl	8000fac <HAL_GetTick>
 80023f4:	0002      	movs	r2, r0
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	4a91      	ldr	r2, [pc, #580]	; (8002640 <HAL_RCC_OscConfig+0x624>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e116      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002404:	4b8d      	ldr	r3, [pc, #564]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	2202      	movs	r2, #2
 800240a:	4013      	ands	r3, r2
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800240e:	231f      	movs	r3, #31
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002418:	4b88      	ldr	r3, [pc, #544]	; (800263c <HAL_RCC_OscConfig+0x620>)
 800241a:	69da      	ldr	r2, [r3, #28]
 800241c:	4b87      	ldr	r3, [pc, #540]	; (800263c <HAL_RCC_OscConfig+0x620>)
 800241e:	4989      	ldr	r1, [pc, #548]	; (8002644 <HAL_RCC_OscConfig+0x628>)
 8002420:	400a      	ands	r2, r1
 8002422:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2210      	movs	r2, #16
 800242a:	4013      	ands	r3, r2
 800242c:	d063      	beq.n	80024f6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d12a      	bne.n	800248c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002436:	4b81      	ldr	r3, [pc, #516]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002438:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800243a:	4b80      	ldr	r3, [pc, #512]	; (800263c <HAL_RCC_OscConfig+0x620>)
 800243c:	2104      	movs	r1, #4
 800243e:	430a      	orrs	r2, r1
 8002440:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002442:	4b7e      	ldr	r3, [pc, #504]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002446:	4b7d      	ldr	r3, [pc, #500]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002448:	2101      	movs	r1, #1
 800244a:	430a      	orrs	r2, r1
 800244c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244e:	f7fe fdad 	bl	8000fac <HAL_GetTick>
 8002452:	0003      	movs	r3, r0
 8002454:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002458:	f7fe fda8 	bl	8000fac <HAL_GetTick>
 800245c:	0002      	movs	r2, r0
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e0e3      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800246a:	4b74      	ldr	r3, [pc, #464]	; (800263c <HAL_RCC_OscConfig+0x620>)
 800246c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246e:	2202      	movs	r2, #2
 8002470:	4013      	ands	r3, r2
 8002472:	d0f1      	beq.n	8002458 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002474:	4b71      	ldr	r3, [pc, #452]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002478:	22f8      	movs	r2, #248	; 0xf8
 800247a:	4393      	bics	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	00da      	lsls	r2, r3, #3
 8002484:	4b6d      	ldr	r3, [pc, #436]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002486:	430a      	orrs	r2, r1
 8002488:	635a      	str	r2, [r3, #52]	; 0x34
 800248a:	e034      	b.n	80024f6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	3305      	adds	r3, #5
 8002492:	d111      	bne.n	80024b8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002494:	4b69      	ldr	r3, [pc, #420]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002498:	4b68      	ldr	r3, [pc, #416]	; (800263c <HAL_RCC_OscConfig+0x620>)
 800249a:	2104      	movs	r1, #4
 800249c:	438a      	bics	r2, r1
 800249e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024a0:	4b66      	ldr	r3, [pc, #408]	; (800263c <HAL_RCC_OscConfig+0x620>)
 80024a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a4:	22f8      	movs	r2, #248	; 0xf8
 80024a6:	4393      	bics	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	00da      	lsls	r2, r3, #3
 80024b0:	4b62      	ldr	r3, [pc, #392]	; (800263c <HAL_RCC_OscConfig+0x620>)
 80024b2:	430a      	orrs	r2, r1
 80024b4:	635a      	str	r2, [r3, #52]	; 0x34
 80024b6:	e01e      	b.n	80024f6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80024b8:	4b60      	ldr	r3, [pc, #384]	; (800263c <HAL_RCC_OscConfig+0x620>)
 80024ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024bc:	4b5f      	ldr	r3, [pc, #380]	; (800263c <HAL_RCC_OscConfig+0x620>)
 80024be:	2104      	movs	r1, #4
 80024c0:	430a      	orrs	r2, r1
 80024c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80024c4:	4b5d      	ldr	r3, [pc, #372]	; (800263c <HAL_RCC_OscConfig+0x620>)
 80024c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c8:	4b5c      	ldr	r3, [pc, #368]	; (800263c <HAL_RCC_OscConfig+0x620>)
 80024ca:	2101      	movs	r1, #1
 80024cc:	438a      	bics	r2, r1
 80024ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d0:	f7fe fd6c 	bl	8000fac <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024da:	f7fe fd67 	bl	8000fac <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e0a2      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80024ec:	4b53      	ldr	r3, [pc, #332]	; (800263c <HAL_RCC_OscConfig+0x620>)
 80024ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f0:	2202      	movs	r2, #2
 80024f2:	4013      	ands	r3, r2
 80024f4:	d1f1      	bne.n	80024da <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d100      	bne.n	8002500 <HAL_RCC_OscConfig+0x4e4>
 80024fe:	e097      	b.n	8002630 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002500:	4b4e      	ldr	r3, [pc, #312]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	220c      	movs	r2, #12
 8002506:	4013      	ands	r3, r2
 8002508:	2b08      	cmp	r3, #8
 800250a:	d100      	bne.n	800250e <HAL_RCC_OscConfig+0x4f2>
 800250c:	e06b      	b.n	80025e6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d14c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002516:	4b49      	ldr	r3, [pc, #292]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4b48      	ldr	r3, [pc, #288]	; (800263c <HAL_RCC_OscConfig+0x620>)
 800251c:	494a      	ldr	r1, [pc, #296]	; (8002648 <HAL_RCC_OscConfig+0x62c>)
 800251e:	400a      	ands	r2, r1
 8002520:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7fe fd43 	bl	8000fac <HAL_GetTick>
 8002526:	0003      	movs	r3, r0
 8002528:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252c:	f7fe fd3e 	bl	8000fac <HAL_GetTick>
 8002530:	0002      	movs	r2, r0
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e079      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253e:	4b3f      	ldr	r3, [pc, #252]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	049b      	lsls	r3, r3, #18
 8002546:	4013      	ands	r3, r2
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800254a:	4b3c      	ldr	r3, [pc, #240]	; (800263c <HAL_RCC_OscConfig+0x620>)
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	220f      	movs	r2, #15
 8002550:	4393      	bics	r3, r2
 8002552:	0019      	movs	r1, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002558:	4b38      	ldr	r3, [pc, #224]	; (800263c <HAL_RCC_OscConfig+0x620>)
 800255a:	430a      	orrs	r2, r1
 800255c:	62da      	str	r2, [r3, #44]	; 0x2c
 800255e:	4b37      	ldr	r3, [pc, #220]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4a3a      	ldr	r2, [pc, #232]	; (800264c <HAL_RCC_OscConfig+0x630>)
 8002564:	4013      	ands	r3, r2
 8002566:	0019      	movs	r1, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	431a      	orrs	r2, r3
 8002572:	4b32      	ldr	r3, [pc, #200]	; (800263c <HAL_RCC_OscConfig+0x620>)
 8002574:	430a      	orrs	r2, r1
 8002576:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002578:	4b30      	ldr	r3, [pc, #192]	; (800263c <HAL_RCC_OscConfig+0x620>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b2f      	ldr	r3, [pc, #188]	; (800263c <HAL_RCC_OscConfig+0x620>)
 800257e:	2180      	movs	r1, #128	; 0x80
 8002580:	0449      	lsls	r1, r1, #17
 8002582:	430a      	orrs	r2, r1
 8002584:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7fe fd11 	bl	8000fac <HAL_GetTick>
 800258a:	0003      	movs	r3, r0
 800258c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002590:	f7fe fd0c 	bl	8000fac <HAL_GetTick>
 8002594:	0002      	movs	r2, r0
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e047      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a2:	4b26      	ldr	r3, [pc, #152]	; (800263c <HAL_RCC_OscConfig+0x620>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	049b      	lsls	r3, r3, #18
 80025aa:	4013      	ands	r3, r2
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0x574>
 80025ae:	e03f      	b.n	8002630 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b0:	4b22      	ldr	r3, [pc, #136]	; (800263c <HAL_RCC_OscConfig+0x620>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b21      	ldr	r3, [pc, #132]	; (800263c <HAL_RCC_OscConfig+0x620>)
 80025b6:	4924      	ldr	r1, [pc, #144]	; (8002648 <HAL_RCC_OscConfig+0x62c>)
 80025b8:	400a      	ands	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fcf6 	bl	8000fac <HAL_GetTick>
 80025c0:	0003      	movs	r3, r0
 80025c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c6:	f7fe fcf1 	bl	8000fac <HAL_GetTick>
 80025ca:	0002      	movs	r2, r0
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e02c      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d8:	4b18      	ldr	r3, [pc, #96]	; (800263c <HAL_RCC_OscConfig+0x620>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	2380      	movs	r3, #128	; 0x80
 80025de:	049b      	lsls	r3, r3, #18
 80025e0:	4013      	ands	r3, r2
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x5aa>
 80025e4:	e024      	b.n	8002630 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e01f      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_RCC_OscConfig+0x620>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80025f8:	4b10      	ldr	r3, [pc, #64]	; (800263c <HAL_RCC_OscConfig+0x620>)
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	025b      	lsls	r3, r3, #9
 8002604:	401a      	ands	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	429a      	cmp	r2, r3
 800260c:	d10e      	bne.n	800262c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	220f      	movs	r2, #15
 8002612:	401a      	ands	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d107      	bne.n	800262c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	23f0      	movs	r3, #240	; 0xf0
 8002620:	039b      	lsls	r3, r3, #14
 8002622:	401a      	ands	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	0018      	movs	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	b008      	add	sp, #32
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	40021000 	.word	0x40021000
 8002640:	00001388 	.word	0x00001388
 8002644:	efffffff 	.word	0xefffffff
 8002648:	feffffff 	.word	0xfeffffff
 800264c:	ffc2ffff 	.word	0xffc2ffff

08002650 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0b3      	b.n	80027cc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002664:	4b5b      	ldr	r3, [pc, #364]	; (80027d4 <HAL_RCC_ClockConfig+0x184>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2201      	movs	r2, #1
 800266a:	4013      	ands	r3, r2
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d911      	bls.n	8002696 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b58      	ldr	r3, [pc, #352]	; (80027d4 <HAL_RCC_ClockConfig+0x184>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2201      	movs	r2, #1
 8002678:	4393      	bics	r3, r2
 800267a:	0019      	movs	r1, r3
 800267c:	4b55      	ldr	r3, [pc, #340]	; (80027d4 <HAL_RCC_ClockConfig+0x184>)
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002684:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <HAL_RCC_ClockConfig+0x184>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2201      	movs	r2, #1
 800268a:	4013      	ands	r3, r2
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d001      	beq.n	8002696 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e09a      	b.n	80027cc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2202      	movs	r2, #2
 800269c:	4013      	ands	r3, r2
 800269e:	d015      	beq.n	80026cc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2204      	movs	r2, #4
 80026a6:	4013      	ands	r3, r2
 80026a8:	d006      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026aa:	4b4b      	ldr	r3, [pc, #300]	; (80027d8 <HAL_RCC_ClockConfig+0x188>)
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	4b4a      	ldr	r3, [pc, #296]	; (80027d8 <HAL_RCC_ClockConfig+0x188>)
 80026b0:	21e0      	movs	r1, #224	; 0xe0
 80026b2:	00c9      	lsls	r1, r1, #3
 80026b4:	430a      	orrs	r2, r1
 80026b6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b8:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <HAL_RCC_ClockConfig+0x188>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	22f0      	movs	r2, #240	; 0xf0
 80026be:	4393      	bics	r3, r2
 80026c0:	0019      	movs	r1, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	4b44      	ldr	r3, [pc, #272]	; (80027d8 <HAL_RCC_ClockConfig+0x188>)
 80026c8:	430a      	orrs	r2, r1
 80026ca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2201      	movs	r2, #1
 80026d2:	4013      	ands	r3, r2
 80026d4:	d040      	beq.n	8002758 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d107      	bne.n	80026ee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	4b3e      	ldr	r3, [pc, #248]	; (80027d8 <HAL_RCC_ClockConfig+0x188>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	2380      	movs	r3, #128	; 0x80
 80026e4:	029b      	lsls	r3, r3, #10
 80026e6:	4013      	ands	r3, r2
 80026e8:	d114      	bne.n	8002714 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e06e      	b.n	80027cc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f6:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <HAL_RCC_ClockConfig+0x188>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	049b      	lsls	r3, r3, #18
 80026fe:	4013      	ands	r3, r2
 8002700:	d108      	bne.n	8002714 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e062      	b.n	80027cc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002706:	4b34      	ldr	r3, [pc, #208]	; (80027d8 <HAL_RCC_ClockConfig+0x188>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2202      	movs	r2, #2
 800270c:	4013      	ands	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e05b      	b.n	80027cc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002714:	4b30      	ldr	r3, [pc, #192]	; (80027d8 <HAL_RCC_ClockConfig+0x188>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2203      	movs	r2, #3
 800271a:	4393      	bics	r3, r2
 800271c:	0019      	movs	r1, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	4b2d      	ldr	r3, [pc, #180]	; (80027d8 <HAL_RCC_ClockConfig+0x188>)
 8002724:	430a      	orrs	r2, r1
 8002726:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002728:	f7fe fc40 	bl	8000fac <HAL_GetTick>
 800272c:	0003      	movs	r3, r0
 800272e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002730:	e009      	b.n	8002746 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002732:	f7fe fc3b 	bl	8000fac <HAL_GetTick>
 8002736:	0002      	movs	r2, r0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	4a27      	ldr	r2, [pc, #156]	; (80027dc <HAL_RCC_ClockConfig+0x18c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e042      	b.n	80027cc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <HAL_RCC_ClockConfig+0x188>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	220c      	movs	r2, #12
 800274c:	401a      	ands	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	429a      	cmp	r2, r3
 8002756:	d1ec      	bne.n	8002732 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002758:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <HAL_RCC_ClockConfig+0x184>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2201      	movs	r2, #1
 800275e:	4013      	ands	r3, r2
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d211      	bcs.n	800278a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_RCC_ClockConfig+0x184>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2201      	movs	r2, #1
 800276c:	4393      	bics	r3, r2
 800276e:	0019      	movs	r1, r3
 8002770:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <HAL_RCC_ClockConfig+0x184>)
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <HAL_RCC_ClockConfig+0x184>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2201      	movs	r2, #1
 800277e:	4013      	ands	r3, r2
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d001      	beq.n	800278a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e020      	b.n	80027cc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2204      	movs	r2, #4
 8002790:	4013      	ands	r3, r2
 8002792:	d009      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002794:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <HAL_RCC_ClockConfig+0x188>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <HAL_RCC_ClockConfig+0x190>)
 800279a:	4013      	ands	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	4b0d      	ldr	r3, [pc, #52]	; (80027d8 <HAL_RCC_ClockConfig+0x188>)
 80027a4:	430a      	orrs	r2, r1
 80027a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027a8:	f000 f820 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 80027ac:	0001      	movs	r1, r0
 80027ae:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <HAL_RCC_ClockConfig+0x188>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	220f      	movs	r2, #15
 80027b6:	4013      	ands	r3, r2
 80027b8:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <HAL_RCC_ClockConfig+0x194>)
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	000a      	movs	r2, r1
 80027be:	40da      	lsrs	r2, r3
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_RCC_ClockConfig+0x198>)
 80027c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7fe fbab 	bl	8000f20 <HAL_InitTick>
  
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b004      	add	sp, #16
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40022000 	.word	0x40022000
 80027d8:	40021000 	.word	0x40021000
 80027dc:	00001388 	.word	0x00001388
 80027e0:	fffff8ff 	.word	0xfffff8ff
 80027e4:	080044ac 	.word	0x080044ac
 80027e8:	20000000 	.word	0x20000000

080027ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	2300      	movs	r3, #0
 8002800:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	220c      	movs	r2, #12
 8002810:	4013      	ands	r3, r2
 8002812:	2b04      	cmp	r3, #4
 8002814:	d002      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x30>
 8002816:	2b08      	cmp	r3, #8
 8002818:	d003      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x36>
 800281a:	e02c      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_RCC_GetSysClockFreq+0xa0>)
 800281e:	613b      	str	r3, [r7, #16]
      break;
 8002820:	e02c      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	0c9b      	lsrs	r3, r3, #18
 8002826:	220f      	movs	r2, #15
 8002828:	4013      	ands	r3, r2
 800282a:	4a19      	ldr	r2, [pc, #100]	; (8002890 <HAL_RCC_GetSysClockFreq+0xa4>)
 800282c:	5cd3      	ldrb	r3, [r2, r3]
 800282e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002830:	4b15      	ldr	r3, [pc, #84]	; (8002888 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002834:	220f      	movs	r2, #15
 8002836:	4013      	ands	r3, r2
 8002838:	4a16      	ldr	r2, [pc, #88]	; (8002894 <HAL_RCC_GetSysClockFreq+0xa8>)
 800283a:	5cd3      	ldrb	r3, [r2, r3]
 800283c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	025b      	lsls	r3, r3, #9
 8002844:	4013      	ands	r3, r2
 8002846:	d009      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	4810      	ldr	r0, [pc, #64]	; (800288c <HAL_RCC_GetSysClockFreq+0xa0>)
 800284c:	f7fd fc5c 	bl	8000108 <__udivsi3>
 8002850:	0003      	movs	r3, r0
 8002852:	001a      	movs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4353      	muls	r3, r2
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e009      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	000a      	movs	r2, r1
 8002860:	0152      	lsls	r2, r2, #5
 8002862:	1a52      	subs	r2, r2, r1
 8002864:	0193      	lsls	r3, r2, #6
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	185b      	adds	r3, r3, r1
 800286c:	021b      	lsls	r3, r3, #8
 800286e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	613b      	str	r3, [r7, #16]
      break;
 8002874:	e002      	b.n	800287c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002878:	613b      	str	r3, [r7, #16]
      break;
 800287a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800287c:	693b      	ldr	r3, [r7, #16]
}
 800287e:	0018      	movs	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	b006      	add	sp, #24
 8002884:	bd80      	pop	{r7, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	40021000 	.word	0x40021000
 800288c:	007a1200 	.word	0x007a1200
 8002890:	080044c4 	.word	0x080044c4
 8002894:	080044d4 	.word	0x080044d4

08002898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800289c:	4b02      	ldr	r3, [pc, #8]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	0018      	movs	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	20000000 	.word	0x20000000

080028ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80028b0:	f7ff fff2 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028b4:	0001      	movs	r1, r0
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	0a1b      	lsrs	r3, r3, #8
 80028bc:	2207      	movs	r2, #7
 80028be:	4013      	ands	r3, r2
 80028c0:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	40d9      	lsrs	r1, r3
 80028c6:	000b      	movs	r3, r1
}    
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	40021000 	.word	0x40021000
 80028d4:	080044bc 	.word	0x080044bc

080028d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	025b      	lsls	r3, r3, #9
 80028f0:	4013      	ands	r3, r2
 80028f2:	d100      	bne.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80028f4:	e08e      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80028f6:	2017      	movs	r0, #23
 80028f8:	183b      	adds	r3, r7, r0
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028fe:	4b57      	ldr	r3, [pc, #348]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002900:	69da      	ldr	r2, [r3, #28]
 8002902:	2380      	movs	r3, #128	; 0x80
 8002904:	055b      	lsls	r3, r3, #21
 8002906:	4013      	ands	r3, r2
 8002908:	d110      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800290a:	4b54      	ldr	r3, [pc, #336]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	4b53      	ldr	r3, [pc, #332]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002910:	2180      	movs	r1, #128	; 0x80
 8002912:	0549      	lsls	r1, r1, #21
 8002914:	430a      	orrs	r2, r1
 8002916:	61da      	str	r2, [r3, #28]
 8002918:	4b50      	ldr	r3, [pc, #320]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800291a:	69da      	ldr	r2, [r3, #28]
 800291c:	2380      	movs	r3, #128	; 0x80
 800291e:	055b      	lsls	r3, r3, #21
 8002920:	4013      	ands	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002926:	183b      	adds	r3, r7, r0
 8002928:	2201      	movs	r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292c:	4b4c      	ldr	r3, [pc, #304]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4013      	ands	r3, r2
 8002936:	d11a      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002938:	4b49      	ldr	r3, [pc, #292]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b48      	ldr	r3, [pc, #288]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800293e:	2180      	movs	r1, #128	; 0x80
 8002940:	0049      	lsls	r1, r1, #1
 8002942:	430a      	orrs	r2, r1
 8002944:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002946:	f7fe fb31 	bl	8000fac <HAL_GetTick>
 800294a:	0003      	movs	r3, r0
 800294c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294e:	e008      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002950:	f7fe fb2c 	bl	8000fac <HAL_GetTick>
 8002954:	0002      	movs	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	; 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e077      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002962:	4b3f      	ldr	r3, [pc, #252]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	4013      	ands	r3, r2
 800296c:	d0f0      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800296e:	4b3b      	ldr	r3, [pc, #236]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002970:	6a1a      	ldr	r2, [r3, #32]
 8002972:	23c0      	movs	r3, #192	; 0xc0
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4013      	ands	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d034      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	23c0      	movs	r3, #192	; 0xc0
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4013      	ands	r3, r2
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	429a      	cmp	r2, r3
 800298e:	d02c      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002990:	4b32      	ldr	r3, [pc, #200]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	4a33      	ldr	r2, [pc, #204]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002996:	4013      	ands	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800299a:	4b30      	ldr	r3, [pc, #192]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800299c:	6a1a      	ldr	r2, [r3, #32]
 800299e:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029a0:	2180      	movs	r1, #128	; 0x80
 80029a2:	0249      	lsls	r1, r1, #9
 80029a4:	430a      	orrs	r2, r1
 80029a6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029a8:	4b2c      	ldr	r3, [pc, #176]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029aa:	6a1a      	ldr	r2, [r3, #32]
 80029ac:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029ae:	492e      	ldr	r1, [pc, #184]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80029b0:	400a      	ands	r2, r1
 80029b2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029b4:	4b29      	ldr	r3, [pc, #164]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2201      	movs	r2, #1
 80029be:	4013      	ands	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7fe faf3 	bl	8000fac <HAL_GetTick>
 80029c6:	0003      	movs	r3, r0
 80029c8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ca:	e009      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029cc:	f7fe faee 	bl	8000fac <HAL_GetTick>
 80029d0:	0002      	movs	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	4a25      	ldr	r2, [pc, #148]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e038      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e0:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	2202      	movs	r2, #2
 80029e6:	4013      	ands	r3, r2
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ea:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	0019      	movs	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029fa:	430a      	orrs	r2, r1
 80029fc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029fe:	2317      	movs	r3, #23
 8002a00:	18fb      	adds	r3, r7, r3
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d105      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a0e:	4918      	ldr	r1, [pc, #96]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002a10:	400a      	ands	r2, r1
 8002a12:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d009      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	2203      	movs	r2, #3
 8002a24:	4393      	bics	r3, r2
 8002a26:	0019      	movs	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2220      	movs	r2, #32
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d009      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a3c:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	2210      	movs	r2, #16
 8002a42:	4393      	bics	r3, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	0018      	movs	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b006      	add	sp, #24
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40007000 	.word	0x40007000
 8002a64:	fffffcff 	.word	0xfffffcff
 8002a68:	fffeffff 	.word	0xfffeffff
 8002a6c:	00001388 	.word	0x00001388
 8002a70:	efffffff 	.word	0xefffffff

08002a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e042      	b.n	8002b0c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	223d      	movs	r2, #61	; 0x3d
 8002a8a:	5c9b      	ldrb	r3, [r3, r2]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d107      	bne.n	8002aa2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	223c      	movs	r2, #60	; 0x3c
 8002a96:	2100      	movs	r1, #0
 8002a98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f7fe f945 	bl	8000d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	223d      	movs	r2, #61	; 0x3d
 8002aa6:	2102      	movs	r1, #2
 8002aa8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	0010      	movs	r0, r2
 8002ab6:	f000 f9af 	bl	8002e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2246      	movs	r2, #70	; 0x46
 8002abe:	2101      	movs	r1, #1
 8002ac0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	223e      	movs	r2, #62	; 0x3e
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	5499      	strb	r1, [r3, r2]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	223f      	movs	r2, #63	; 0x3f
 8002ace:	2101      	movs	r1, #1
 8002ad0:	5499      	strb	r1, [r3, r2]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2240      	movs	r2, #64	; 0x40
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	5499      	strb	r1, [r3, r2]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2241      	movs	r2, #65	; 0x41
 8002ade:	2101      	movs	r1, #1
 8002ae0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2242      	movs	r2, #66	; 0x42
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	5499      	strb	r1, [r3, r2]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2243      	movs	r2, #67	; 0x43
 8002aee:	2101      	movs	r1, #1
 8002af0:	5499      	strb	r1, [r3, r2]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2244      	movs	r2, #68	; 0x44
 8002af6:	2101      	movs	r1, #1
 8002af8:	5499      	strb	r1, [r3, r2]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2245      	movs	r2, #69	; 0x45
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	223d      	movs	r2, #61	; 0x3d
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b002      	add	sp, #8
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	223d      	movs	r2, #61	; 0x3d
 8002b20:	5c9b      	ldrb	r3, [r3, r2]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d001      	beq.n	8002b2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e036      	b.n	8002b9a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	223d      	movs	r2, #61	; 0x3d
 8002b30:	2102      	movs	r1, #2
 8002b32:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2101      	movs	r1, #1
 8002b40:	430a      	orrs	r2, r1
 8002b42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a16      	ldr	r2, [pc, #88]	; (8002ba4 <HAL_TIM_Base_Start_IT+0x90>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00a      	beq.n	8002b64 <HAL_TIM_Base_Start_IT+0x50>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	05db      	lsls	r3, r3, #23
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d004      	beq.n	8002b64 <HAL_TIM_Base_Start_IT+0x50>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a12      	ldr	r2, [pc, #72]	; (8002ba8 <HAL_TIM_Base_Start_IT+0x94>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d111      	bne.n	8002b88 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2207      	movs	r2, #7
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2b06      	cmp	r3, #6
 8002b74:	d010      	beq.n	8002b98 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2101      	movs	r1, #1
 8002b82:	430a      	orrs	r2, r1
 8002b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b86:	e007      	b.n	8002b98 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2101      	movs	r1, #1
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b004      	add	sp, #16
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	40012c00 	.word	0x40012c00
 8002ba8:	40000400 	.word	0x40000400

08002bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d124      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d11d      	bne.n	8002c0c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	4252      	negs	r2, r2
 8002bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2203      	movs	r2, #3
 8002be8:	4013      	ands	r3, r2
 8002bea:	d004      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 f8fa 	bl	8002de8 <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e007      	b.n	8002c06 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f000 f8ed 	bl	8002dd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	0018      	movs	r0, r3
 8002c02:	f000 f8f9 	bl	8002df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2204      	movs	r2, #4
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d125      	bne.n	8002c66 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2204      	movs	r2, #4
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d11e      	bne.n	8002c66 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2205      	movs	r2, #5
 8002c2e:	4252      	negs	r2, r2
 8002c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2202      	movs	r2, #2
 8002c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	23c0      	movs	r3, #192	; 0xc0
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4013      	ands	r3, r2
 8002c44:	d004      	beq.n	8002c50 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 f8cd 	bl	8002de8 <HAL_TIM_IC_CaptureCallback>
 8002c4e:	e007      	b.n	8002c60 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	0018      	movs	r0, r3
 8002c54:	f000 f8c0 	bl	8002dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f000 f8cc 	bl	8002df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d124      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2208      	movs	r2, #8
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d11d      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2209      	movs	r2, #9
 8002c88:	4252      	negs	r2, r2
 8002c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2204      	movs	r2, #4
 8002c90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	2203      	movs	r2, #3
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d004      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f000 f8a1 	bl	8002de8 <HAL_TIM_IC_CaptureCallback>
 8002ca6:	e007      	b.n	8002cb8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	0018      	movs	r0, r3
 8002cac:	f000 f894 	bl	8002dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f000 f8a0 	bl	8002df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2210      	movs	r2, #16
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d125      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2210      	movs	r2, #16
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d11e      	bne.n	8002d18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2211      	movs	r2, #17
 8002ce0:	4252      	negs	r2, r2
 8002ce2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	23c0      	movs	r3, #192	; 0xc0
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d004      	beq.n	8002d02 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 f874 	bl	8002de8 <HAL_TIM_IC_CaptureCallback>
 8002d00:	e007      	b.n	8002d12 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 f867 	bl	8002dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f000 f873 	bl	8002df8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d10f      	bne.n	8002d46 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d108      	bne.n	8002d46 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	4252      	negs	r2, r2
 8002d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f7fd fe39 	bl	80009b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	2280      	movs	r2, #128	; 0x80
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b80      	cmp	r3, #128	; 0x80
 8002d52:	d10f      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2280      	movs	r2, #128	; 0x80
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b80      	cmp	r3, #128	; 0x80
 8002d60:	d108      	bne.n	8002d74 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2281      	movs	r2, #129	; 0x81
 8002d68:	4252      	negs	r2, r2
 8002d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f000 f8d0 	bl	8002f14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	2240      	movs	r2, #64	; 0x40
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	2b40      	cmp	r3, #64	; 0x40
 8002d80:	d10f      	bne.n	8002da2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	2240      	movs	r2, #64	; 0x40
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b40      	cmp	r3, #64	; 0x40
 8002d8e:	d108      	bne.n	8002da2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2241      	movs	r2, #65	; 0x41
 8002d96:	4252      	negs	r2, r2
 8002d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f000 f833 	bl	8002e08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2220      	movs	r2, #32
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b20      	cmp	r3, #32
 8002dae:	d10f      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	d108      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2221      	movs	r2, #33	; 0x21
 8002dc4:	4252      	negs	r2, r2
 8002dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f000 f89a 	bl	8002f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b002      	add	sp, #8
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b002      	add	sp, #8
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002df0:	46c0      	nop			; (mov r8, r8)
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b002      	add	sp, #8
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e00:	46c0      	nop			; (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b002      	add	sp, #8
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e10:	46c0      	nop			; (mov r8, r8)
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b002      	add	sp, #8
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a30      	ldr	r2, [pc, #192]	; (8002eec <TIM_Base_SetConfig+0xd4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d008      	beq.n	8002e42 <TIM_Base_SetConfig+0x2a>
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	2380      	movs	r3, #128	; 0x80
 8002e34:	05db      	lsls	r3, r3, #23
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d003      	beq.n	8002e42 <TIM_Base_SetConfig+0x2a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a2c      	ldr	r2, [pc, #176]	; (8002ef0 <TIM_Base_SetConfig+0xd8>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d108      	bne.n	8002e54 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2270      	movs	r2, #112	; 0x70
 8002e46:	4393      	bics	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a25      	ldr	r2, [pc, #148]	; (8002eec <TIM_Base_SetConfig+0xd4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d014      	beq.n	8002e86 <TIM_Base_SetConfig+0x6e>
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	05db      	lsls	r3, r3, #23
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d00f      	beq.n	8002e86 <TIM_Base_SetConfig+0x6e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a21      	ldr	r2, [pc, #132]	; (8002ef0 <TIM_Base_SetConfig+0xd8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00b      	beq.n	8002e86 <TIM_Base_SetConfig+0x6e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a20      	ldr	r2, [pc, #128]	; (8002ef4 <TIM_Base_SetConfig+0xdc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d007      	beq.n	8002e86 <TIM_Base_SetConfig+0x6e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a1f      	ldr	r2, [pc, #124]	; (8002ef8 <TIM_Base_SetConfig+0xe0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d003      	beq.n	8002e86 <TIM_Base_SetConfig+0x6e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a1e      	ldr	r2, [pc, #120]	; (8002efc <TIM_Base_SetConfig+0xe4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d108      	bne.n	8002e98 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4a1d      	ldr	r2, [pc, #116]	; (8002f00 <TIM_Base_SetConfig+0xe8>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	4393      	bics	r3, r2
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <TIM_Base_SetConfig+0xd4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d007      	beq.n	8002ed6 <TIM_Base_SetConfig+0xbe>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <TIM_Base_SetConfig+0xe0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d003      	beq.n	8002ed6 <TIM_Base_SetConfig+0xbe>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <TIM_Base_SetConfig+0xe4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d103      	bne.n	8002ede <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	615a      	str	r2, [r3, #20]
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b004      	add	sp, #16
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40002000 	.word	0x40002000
 8002ef8:	40014400 	.word	0x40014400
 8002efc:	40014800 	.word	0x40014800
 8002f00:	fffffcff 	.word	0xfffffcff

08002f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b002      	add	sp, #8
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e044      	b.n	8002fc0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2278      	movs	r2, #120	; 0x78
 8002f42:	2100      	movs	r1, #0
 8002f44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f7fd ff17 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2224      	movs	r2, #36	; 0x24
 8002f52:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2101      	movs	r1, #1
 8002f60:	438a      	bics	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	0018      	movs	r0, r3
 8002f68:	f000 fc2c 	bl	80037c4 <UART_SetConfig>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e024      	b.n	8002fc0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 fd47 	bl	8003a14 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	490d      	ldr	r1, [pc, #52]	; (8002fc8 <HAL_UART_Init+0xa4>)
 8002f92:	400a      	ands	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	212a      	movs	r1, #42	; 0x2a
 8002fa2:	438a      	bics	r2, r1
 8002fa4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f000 fddf 	bl	8003b7c <UART_CheckIdleState>
 8002fbe:	0003      	movs	r3, r0
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	b002      	add	sp, #8
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	ffffb7ff 	.word	0xffffb7ff

08002fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	; 0x28
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	1dbb      	adds	r3, r7, #6
 8002fda:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d000      	beq.n	8002fe6 <HAL_UART_Transmit+0x1a>
 8002fe4:	e08d      	b.n	8003102 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_UART_Transmit+0x28>
 8002fec:	1dbb      	adds	r3, r7, #6
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e085      	b.n	8003104 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	015b      	lsls	r3, r3, #5
 8003000:	429a      	cmp	r2, r3
 8003002:	d109      	bne.n	8003018 <HAL_UART_Transmit+0x4c>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d105      	bne.n	8003018 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2201      	movs	r2, #1
 8003010:	4013      	ands	r3, r2
 8003012:	d001      	beq.n	8003018 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e075      	b.n	8003104 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2284      	movs	r2, #132	; 0x84
 800301c:	2100      	movs	r1, #0
 800301e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2221      	movs	r2, #33	; 0x21
 8003024:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003026:	f7fd ffc1 	bl	8000fac <HAL_GetTick>
 800302a:	0003      	movs	r3, r0
 800302c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1dba      	adds	r2, r7, #6
 8003032:	2150      	movs	r1, #80	; 0x50
 8003034:	8812      	ldrh	r2, [r2, #0]
 8003036:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1dba      	adds	r2, r7, #6
 800303c:	2152      	movs	r1, #82	; 0x52
 800303e:	8812      	ldrh	r2, [r2, #0]
 8003040:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	015b      	lsls	r3, r3, #5
 800304a:	429a      	cmp	r2, r3
 800304c:	d108      	bne.n	8003060 <HAL_UART_Transmit+0x94>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d104      	bne.n	8003060 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	e003      	b.n	8003068 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003068:	e030      	b.n	80030cc <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	0013      	movs	r3, r2
 8003074:	2200      	movs	r2, #0
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	f000 fe28 	bl	8003ccc <UART_WaitOnFlagUntilTimeout>
 800307c:	1e03      	subs	r3, r0, #0
 800307e:	d004      	beq.n	800308a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e03c      	b.n	8003104 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10b      	bne.n	80030a8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	881a      	ldrh	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	05d2      	lsls	r2, r2, #23
 800309a:	0dd2      	lsrs	r2, r2, #23
 800309c:	b292      	uxth	r2, r2
 800309e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	3302      	adds	r3, #2
 80030a4:	61bb      	str	r3, [r7, #24]
 80030a6:	e008      	b.n	80030ba <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	b292      	uxth	r2, r2
 80030b2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	3301      	adds	r3, #1
 80030b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2252      	movs	r2, #82	; 0x52
 80030be:	5a9b      	ldrh	r3, [r3, r2]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b299      	uxth	r1, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2252      	movs	r2, #82	; 0x52
 80030ca:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2252      	movs	r2, #82	; 0x52
 80030d0:	5a9b      	ldrh	r3, [r3, r2]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1c8      	bne.n	800306a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	0013      	movs	r3, r2
 80030e2:	2200      	movs	r2, #0
 80030e4:	2140      	movs	r1, #64	; 0x40
 80030e6:	f000 fdf1 	bl	8003ccc <UART_WaitOnFlagUntilTimeout>
 80030ea:	1e03      	subs	r3, r0, #0
 80030ec:	d004      	beq.n	80030f8 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2220      	movs	r2, #32
 80030f2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e005      	b.n	8003104 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	e000      	b.n	8003104 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8003102:	2302      	movs	r3, #2
  }
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	b008      	add	sp, #32
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	1dbb      	adds	r3, r7, #6
 8003118:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2280      	movs	r2, #128	; 0x80
 800311e:	589b      	ldr	r3, [r3, r2]
 8003120:	2b20      	cmp	r3, #32
 8003122:	d145      	bne.n	80031b0 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_UART_Receive_IT+0x26>
 800312a:	1dbb      	adds	r3, r7, #6
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e03d      	b.n	80031b2 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	015b      	lsls	r3, r3, #5
 800313e:	429a      	cmp	r2, r3
 8003140:	d109      	bne.n	8003156 <HAL_UART_Receive_IT+0x4a>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d105      	bne.n	8003156 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2201      	movs	r2, #1
 800314e:	4013      	ands	r3, r2
 8003150:	d001      	beq.n	8003156 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e02d      	b.n	80031b2 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	2380      	movs	r3, #128	; 0x80
 8003164:	041b      	lsls	r3, r3, #16
 8003166:	4013      	ands	r3, r2
 8003168:	d019      	beq.n	800319e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800316a:	f3ef 8310 	mrs	r3, PRIMASK
 800316e:	613b      	str	r3, [r7, #16]
  return(result);
 8003170:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	2301      	movs	r3, #1
 8003176:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f383 8810 	msr	PRIMASK, r3
}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2180      	movs	r1, #128	; 0x80
 800318c:	04c9      	lsls	r1, r1, #19
 800318e:	430a      	orrs	r2, r1
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	f383 8810 	msr	PRIMASK, r3
}
 800319c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800319e:	1dbb      	adds	r3, r7, #6
 80031a0:	881a      	ldrh	r2, [r3, #0]
 80031a2:	68b9      	ldr	r1, [r7, #8]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	0018      	movs	r0, r3
 80031a8:	f000 fdfa 	bl	8003da0 <UART_Start_Receive_IT>
 80031ac:	0003      	movs	r3, r0
 80031ae:	e000      	b.n	80031b2 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
  }
}
 80031b2:	0018      	movs	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b008      	add	sp, #32
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031bc:	b590      	push	{r4, r7, lr}
 80031be:	b0ab      	sub	sp, #172	; 0xac
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	22a4      	movs	r2, #164	; 0xa4
 80031cc:	18b9      	adds	r1, r7, r2
 80031ce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	20a0      	movs	r0, #160	; 0xa0
 80031d8:	1839      	adds	r1, r7, r0
 80031da:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	219c      	movs	r1, #156	; 0x9c
 80031e4:	1879      	adds	r1, r7, r1
 80031e6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031e8:	0011      	movs	r1, r2
 80031ea:	18bb      	adds	r3, r7, r2
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a99      	ldr	r2, [pc, #612]	; (8003454 <HAL_UART_IRQHandler+0x298>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	2298      	movs	r2, #152	; 0x98
 80031f4:	18bc      	adds	r4, r7, r2
 80031f6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80031f8:	18bb      	adds	r3, r7, r2
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d114      	bne.n	800322a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003200:	187b      	adds	r3, r7, r1
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2220      	movs	r2, #32
 8003206:	4013      	ands	r3, r2
 8003208:	d00f      	beq.n	800322a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800320a:	183b      	adds	r3, r7, r0
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2220      	movs	r2, #32
 8003210:	4013      	ands	r3, r2
 8003212:	d00a      	beq.n	800322a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003218:	2b00      	cmp	r3, #0
 800321a:	d100      	bne.n	800321e <HAL_UART_IRQHandler+0x62>
 800321c:	e29e      	b.n	800375c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	0010      	movs	r0, r2
 8003226:	4798      	blx	r3
      }
      return;
 8003228:	e298      	b.n	800375c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800322a:	2398      	movs	r3, #152	; 0x98
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d100      	bne.n	8003236 <HAL_UART_IRQHandler+0x7a>
 8003234:	e114      	b.n	8003460 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003236:	239c      	movs	r3, #156	; 0x9c
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2201      	movs	r2, #1
 800323e:	4013      	ands	r3, r2
 8003240:	d106      	bne.n	8003250 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003242:	23a0      	movs	r3, #160	; 0xa0
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a83      	ldr	r2, [pc, #524]	; (8003458 <HAL_UART_IRQHandler+0x29c>)
 800324a:	4013      	ands	r3, r2
 800324c:	d100      	bne.n	8003250 <HAL_UART_IRQHandler+0x94>
 800324e:	e107      	b.n	8003460 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003250:	23a4      	movs	r3, #164	; 0xa4
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2201      	movs	r2, #1
 8003258:	4013      	ands	r3, r2
 800325a:	d012      	beq.n	8003282 <HAL_UART_IRQHandler+0xc6>
 800325c:	23a0      	movs	r3, #160	; 0xa0
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	4013      	ands	r3, r2
 8003268:	d00b      	beq.n	8003282 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2201      	movs	r2, #1
 8003270:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2284      	movs	r2, #132	; 0x84
 8003276:	589b      	ldr	r3, [r3, r2]
 8003278:	2201      	movs	r2, #1
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2184      	movs	r1, #132	; 0x84
 8003280:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003282:	23a4      	movs	r3, #164	; 0xa4
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2202      	movs	r2, #2
 800328a:	4013      	ands	r3, r2
 800328c:	d011      	beq.n	80032b2 <HAL_UART_IRQHandler+0xf6>
 800328e:	239c      	movs	r3, #156	; 0x9c
 8003290:	18fb      	adds	r3, r7, r3
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2201      	movs	r2, #1
 8003296:	4013      	ands	r3, r2
 8003298:	d00b      	beq.n	80032b2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2202      	movs	r2, #2
 80032a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2284      	movs	r2, #132	; 0x84
 80032a6:	589b      	ldr	r3, [r3, r2]
 80032a8:	2204      	movs	r2, #4
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2184      	movs	r1, #132	; 0x84
 80032b0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032b2:	23a4      	movs	r3, #164	; 0xa4
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2204      	movs	r2, #4
 80032ba:	4013      	ands	r3, r2
 80032bc:	d011      	beq.n	80032e2 <HAL_UART_IRQHandler+0x126>
 80032be:	239c      	movs	r3, #156	; 0x9c
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2201      	movs	r2, #1
 80032c6:	4013      	ands	r3, r2
 80032c8:	d00b      	beq.n	80032e2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2204      	movs	r2, #4
 80032d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2284      	movs	r2, #132	; 0x84
 80032d6:	589b      	ldr	r3, [r3, r2]
 80032d8:	2202      	movs	r2, #2
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2184      	movs	r1, #132	; 0x84
 80032e0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032e2:	23a4      	movs	r3, #164	; 0xa4
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2208      	movs	r2, #8
 80032ea:	4013      	ands	r3, r2
 80032ec:	d017      	beq.n	800331e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032ee:	23a0      	movs	r3, #160	; 0xa0
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2220      	movs	r2, #32
 80032f6:	4013      	ands	r3, r2
 80032f8:	d105      	bne.n	8003306 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80032fa:	239c      	movs	r3, #156	; 0x9c
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2201      	movs	r2, #1
 8003302:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003304:	d00b      	beq.n	800331e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2208      	movs	r2, #8
 800330c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2284      	movs	r2, #132	; 0x84
 8003312:	589b      	ldr	r3, [r3, r2]
 8003314:	2208      	movs	r2, #8
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2184      	movs	r1, #132	; 0x84
 800331c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800331e:	23a4      	movs	r3, #164	; 0xa4
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	2380      	movs	r3, #128	; 0x80
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	4013      	ands	r3, r2
 800332a:	d013      	beq.n	8003354 <HAL_UART_IRQHandler+0x198>
 800332c:	23a0      	movs	r3, #160	; 0xa0
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	2380      	movs	r3, #128	; 0x80
 8003334:	04db      	lsls	r3, r3, #19
 8003336:	4013      	ands	r3, r2
 8003338:	d00c      	beq.n	8003354 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2280      	movs	r2, #128	; 0x80
 8003340:	0112      	lsls	r2, r2, #4
 8003342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2284      	movs	r2, #132	; 0x84
 8003348:	589b      	ldr	r3, [r3, r2]
 800334a:	2220      	movs	r2, #32
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2184      	movs	r1, #132	; 0x84
 8003352:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2284      	movs	r2, #132	; 0x84
 8003358:	589b      	ldr	r3, [r3, r2]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d100      	bne.n	8003360 <HAL_UART_IRQHandler+0x1a4>
 800335e:	e1ff      	b.n	8003760 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003360:	23a4      	movs	r3, #164	; 0xa4
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2220      	movs	r2, #32
 8003368:	4013      	ands	r3, r2
 800336a:	d00e      	beq.n	800338a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800336c:	23a0      	movs	r3, #160	; 0xa0
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2220      	movs	r2, #32
 8003374:	4013      	ands	r3, r2
 8003376:	d008      	beq.n	800338a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800337c:	2b00      	cmp	r3, #0
 800337e:	d004      	beq.n	800338a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	0010      	movs	r0, r2
 8003388:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2284      	movs	r2, #132	; 0x84
 800338e:	589b      	ldr	r3, [r3, r2]
 8003390:	2194      	movs	r1, #148	; 0x94
 8003392:	187a      	adds	r2, r7, r1
 8003394:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2240      	movs	r2, #64	; 0x40
 800339e:	4013      	ands	r3, r2
 80033a0:	2b40      	cmp	r3, #64	; 0x40
 80033a2:	d004      	beq.n	80033ae <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033a4:	187b      	adds	r3, r7, r1
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2228      	movs	r2, #40	; 0x28
 80033aa:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033ac:	d047      	beq.n	800343e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	0018      	movs	r0, r3
 80033b2:	f000 fdab 	bl	8003f0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2240      	movs	r2, #64	; 0x40
 80033be:	4013      	ands	r3, r2
 80033c0:	2b40      	cmp	r3, #64	; 0x40
 80033c2:	d137      	bne.n	8003434 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c4:	f3ef 8310 	mrs	r3, PRIMASK
 80033c8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80033ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033cc:	2090      	movs	r0, #144	; 0x90
 80033ce:	183a      	adds	r2, r7, r0
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	2301      	movs	r3, #1
 80033d4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033d8:	f383 8810 	msr	PRIMASK, r3
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2140      	movs	r1, #64	; 0x40
 80033ea:	438a      	bics	r2, r1
 80033ec:	609a      	str	r2, [r3, #8]
 80033ee:	183b      	adds	r3, r7, r0
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033f6:	f383 8810 	msr	PRIMASK, r3
}
 80033fa:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003400:	2b00      	cmp	r3, #0
 8003402:	d012      	beq.n	800342a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003408:	4a14      	ldr	r2, [pc, #80]	; (800345c <HAL_UART_IRQHandler+0x2a0>)
 800340a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003410:	0018      	movs	r0, r3
 8003412:	f7fd feeb 	bl	80011ec <HAL_DMA_Abort_IT>
 8003416:	1e03      	subs	r3, r0, #0
 8003418:	d01a      	beq.n	8003450 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003424:	0018      	movs	r0, r3
 8003426:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003428:	e012      	b.n	8003450 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	0018      	movs	r0, r3
 800342e:	f000 f9b5 	bl	800379c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003432:	e00d      	b.n	8003450 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	0018      	movs	r0, r3
 8003438:	f000 f9b0 	bl	800379c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800343c:	e008      	b.n	8003450 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	0018      	movs	r0, r3
 8003442:	f000 f9ab 	bl	800379c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2284      	movs	r2, #132	; 0x84
 800344a:	2100      	movs	r1, #0
 800344c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800344e:	e187      	b.n	8003760 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003450:	46c0      	nop			; (mov r8, r8)
    return;
 8003452:	e185      	b.n	8003760 <HAL_UART_IRQHandler+0x5a4>
 8003454:	0000080f 	.word	0x0000080f
 8003458:	04000120 	.word	0x04000120
 800345c:	08003fd5 	.word	0x08003fd5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003464:	2b01      	cmp	r3, #1
 8003466:	d000      	beq.n	800346a <HAL_UART_IRQHandler+0x2ae>
 8003468:	e139      	b.n	80036de <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800346a:	23a4      	movs	r3, #164	; 0xa4
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2210      	movs	r2, #16
 8003472:	4013      	ands	r3, r2
 8003474:	d100      	bne.n	8003478 <HAL_UART_IRQHandler+0x2bc>
 8003476:	e132      	b.n	80036de <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003478:	23a0      	movs	r3, #160	; 0xa0
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2210      	movs	r2, #16
 8003480:	4013      	ands	r3, r2
 8003482:	d100      	bne.n	8003486 <HAL_UART_IRQHandler+0x2ca>
 8003484:	e12b      	b.n	80036de <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2210      	movs	r2, #16
 800348c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2240      	movs	r2, #64	; 0x40
 8003496:	4013      	ands	r3, r2
 8003498:	2b40      	cmp	r3, #64	; 0x40
 800349a:	d000      	beq.n	800349e <HAL_UART_IRQHandler+0x2e2>
 800349c:	e09f      	b.n	80035de <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	217e      	movs	r1, #126	; 0x7e
 80034a8:	187b      	adds	r3, r7, r1
 80034aa:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80034ac:	187b      	adds	r3, r7, r1
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d100      	bne.n	80034b6 <HAL_UART_IRQHandler+0x2fa>
 80034b4:	e156      	b.n	8003764 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2258      	movs	r2, #88	; 0x58
 80034ba:	5a9b      	ldrh	r3, [r3, r2]
 80034bc:	187a      	adds	r2, r7, r1
 80034be:	8812      	ldrh	r2, [r2, #0]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d300      	bcc.n	80034c6 <HAL_UART_IRQHandler+0x30a>
 80034c4:	e14e      	b.n	8003764 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	187a      	adds	r2, r7, r1
 80034ca:	215a      	movs	r1, #90	; 0x5a
 80034cc:	8812      	ldrh	r2, [r2, #0]
 80034ce:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d06f      	beq.n	80035ba <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034da:	f3ef 8310 	mrs	r3, PRIMASK
 80034de:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80034e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80034e4:	2301      	movs	r3, #1
 80034e6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ea:	f383 8810 	msr	PRIMASK, r3
}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	499e      	ldr	r1, [pc, #632]	; (8003774 <HAL_UART_IRQHandler+0x5b8>)
 80034fc:	400a      	ands	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003502:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003506:	f383 8810 	msr	PRIMASK, r3
}
 800350a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350c:	f3ef 8310 	mrs	r3, PRIMASK
 8003510:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003514:	677b      	str	r3, [r7, #116]	; 0x74
 8003516:	2301      	movs	r3, #1
 8003518:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800351c:	f383 8810 	msr	PRIMASK, r3
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2101      	movs	r1, #1
 800352e:	438a      	bics	r2, r1
 8003530:	609a      	str	r2, [r3, #8]
 8003532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003534:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003538:	f383 8810 	msr	PRIMASK, r3
}
 800353c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353e:	f3ef 8310 	mrs	r3, PRIMASK
 8003542:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003544:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003546:	673b      	str	r3, [r7, #112]	; 0x70
 8003548:	2301      	movs	r3, #1
 800354a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800354e:	f383 8810 	msr	PRIMASK, r3
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2140      	movs	r1, #64	; 0x40
 8003560:	438a      	bics	r2, r1
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003566:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800356a:	f383 8810 	msr	PRIMASK, r3
}
 800356e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2280      	movs	r2, #128	; 0x80
 8003574:	2120      	movs	r1, #32
 8003576:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357e:	f3ef 8310 	mrs	r3, PRIMASK
 8003582:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003584:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003586:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003588:	2301      	movs	r3, #1
 800358a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800358e:	f383 8810 	msr	PRIMASK, r3
}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2110      	movs	r1, #16
 80035a0:	438a      	bics	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035aa:	f383 8810 	msr	PRIMASK, r3
}
 80035ae:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7fd fde1 	bl	800117c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2202      	movs	r2, #2
 80035be:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2258      	movs	r2, #88	; 0x58
 80035c4:	5a9a      	ldrh	r2, [r3, r2]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	215a      	movs	r1, #90	; 0x5a
 80035ca:	5a5b      	ldrh	r3, [r3, r1]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	0011      	movs	r1, r2
 80035d6:	0018      	movs	r0, r3
 80035d8:	f000 f8e8 	bl	80037ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035dc:	e0c2      	b.n	8003764 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2258      	movs	r2, #88	; 0x58
 80035e2:	5a99      	ldrh	r1, [r3, r2]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	225a      	movs	r2, #90	; 0x5a
 80035e8:	5a9b      	ldrh	r3, [r3, r2]
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	208e      	movs	r0, #142	; 0x8e
 80035ee:	183b      	adds	r3, r7, r0
 80035f0:	1a8a      	subs	r2, r1, r2
 80035f2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	225a      	movs	r2, #90	; 0x5a
 80035f8:	5a9b      	ldrh	r3, [r3, r2]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d100      	bne.n	8003602 <HAL_UART_IRQHandler+0x446>
 8003600:	e0b2      	b.n	8003768 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8003602:	183b      	adds	r3, r7, r0
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d100      	bne.n	800360c <HAL_UART_IRQHandler+0x450>
 800360a:	e0ad      	b.n	8003768 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800360c:	f3ef 8310 	mrs	r3, PRIMASK
 8003610:	60fb      	str	r3, [r7, #12]
  return(result);
 8003612:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003614:	2488      	movs	r4, #136	; 0x88
 8003616:	193a      	adds	r2, r7, r4
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	2301      	movs	r3, #1
 800361c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f383 8810 	msr	PRIMASK, r3
}
 8003624:	46c0      	nop			; (mov r8, r8)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4951      	ldr	r1, [pc, #324]	; (8003778 <HAL_UART_IRQHandler+0x5bc>)
 8003632:	400a      	ands	r2, r1
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	193b      	adds	r3, r7, r4
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f383 8810 	msr	PRIMASK, r3
}
 8003642:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003644:	f3ef 8310 	mrs	r3, PRIMASK
 8003648:	61bb      	str	r3, [r7, #24]
  return(result);
 800364a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800364c:	2484      	movs	r4, #132	; 0x84
 800364e:	193a      	adds	r2, r7, r4
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	2301      	movs	r3, #1
 8003654:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f383 8810 	msr	PRIMASK, r3
}
 800365c:	46c0      	nop			; (mov r8, r8)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2101      	movs	r1, #1
 800366a:	438a      	bics	r2, r1
 800366c:	609a      	str	r2, [r3, #8]
 800366e:	193b      	adds	r3, r7, r4
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	f383 8810 	msr	PRIMASK, r3
}
 800367a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2280      	movs	r2, #128	; 0x80
 8003680:	2120      	movs	r1, #32
 8003682:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003690:	f3ef 8310 	mrs	r3, PRIMASK
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003698:	2480      	movs	r4, #128	; 0x80
 800369a:	193a      	adds	r2, r7, r4
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	2301      	movs	r3, #1
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	f383 8810 	msr	PRIMASK, r3
}
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2110      	movs	r1, #16
 80036b6:	438a      	bics	r2, r1
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	193b      	adds	r3, r7, r4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c2:	f383 8810 	msr	PRIMASK, r3
}
 80036c6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036ce:	183b      	adds	r3, r7, r0
 80036d0:	881a      	ldrh	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	0011      	movs	r1, r2
 80036d6:	0018      	movs	r0, r3
 80036d8:	f000 f868 	bl	80037ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036dc:	e044      	b.n	8003768 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036de:	23a4      	movs	r3, #164	; 0xa4
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	2380      	movs	r3, #128	; 0x80
 80036e6:	035b      	lsls	r3, r3, #13
 80036e8:	4013      	ands	r3, r2
 80036ea:	d010      	beq.n	800370e <HAL_UART_IRQHandler+0x552>
 80036ec:	239c      	movs	r3, #156	; 0x9c
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	03db      	lsls	r3, r3, #15
 80036f6:	4013      	ands	r3, r2
 80036f8:	d009      	beq.n	800370e <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2280      	movs	r2, #128	; 0x80
 8003700:	0352      	lsls	r2, r2, #13
 8003702:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	0018      	movs	r0, r3
 8003708:	f000 fe5e 	bl	80043c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800370c:	e02f      	b.n	800376e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800370e:	23a4      	movs	r3, #164	; 0xa4
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	4013      	ands	r3, r2
 8003718:	d00f      	beq.n	800373a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800371a:	23a0      	movs	r3, #160	; 0xa0
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2280      	movs	r2, #128	; 0x80
 8003722:	4013      	ands	r3, r2
 8003724:	d009      	beq.n	800373a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800372a:	2b00      	cmp	r3, #0
 800372c:	d01e      	beq.n	800376c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	0010      	movs	r0, r2
 8003736:	4798      	blx	r3
    }
    return;
 8003738:	e018      	b.n	800376c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800373a:	23a4      	movs	r3, #164	; 0xa4
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2240      	movs	r2, #64	; 0x40
 8003742:	4013      	ands	r3, r2
 8003744:	d013      	beq.n	800376e <HAL_UART_IRQHandler+0x5b2>
 8003746:	23a0      	movs	r3, #160	; 0xa0
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2240      	movs	r2, #64	; 0x40
 800374e:	4013      	ands	r3, r2
 8003750:	d00d      	beq.n	800376e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	0018      	movs	r0, r3
 8003756:	f000 fc54 	bl	8004002 <UART_EndTransmit_IT>
    return;
 800375a:	e008      	b.n	800376e <HAL_UART_IRQHandler+0x5b2>
      return;
 800375c:	46c0      	nop			; (mov r8, r8)
 800375e:	e006      	b.n	800376e <HAL_UART_IRQHandler+0x5b2>
    return;
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	e004      	b.n	800376e <HAL_UART_IRQHandler+0x5b2>
      return;
 8003764:	46c0      	nop			; (mov r8, r8)
 8003766:	e002      	b.n	800376e <HAL_UART_IRQHandler+0x5b2>
      return;
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	e000      	b.n	800376e <HAL_UART_IRQHandler+0x5b2>
    return;
 800376c:	46c0      	nop			; (mov r8, r8)
  }

}
 800376e:	46bd      	mov	sp, r7
 8003770:	b02b      	add	sp, #172	; 0xac
 8003772:	bd90      	pop	{r4, r7, pc}
 8003774:	fffffeff 	.word	0xfffffeff
 8003778:	fffffedf 	.word	0xfffffedf

0800377c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003784:	46c0      	nop			; (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b002      	add	sp, #8
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037a4:	46c0      	nop			; (mov r8, r8)
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b002      	add	sp, #8
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	000a      	movs	r2, r1
 80037b6:	1cbb      	adds	r3, r7, #2
 80037b8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	46bd      	mov	sp, r7
 80037be:	b002      	add	sp, #8
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037cc:	231e      	movs	r3, #30
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a83      	ldr	r2, [pc, #524]	; (8003a00 <UART_SetConfig+0x23c>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	0019      	movs	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	430a      	orrs	r2, r1
 8003800:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4a7e      	ldr	r2, [pc, #504]	; (8003a04 <UART_SetConfig+0x240>)
 800380a:	4013      	ands	r3, r2
 800380c:	0019      	movs	r1, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4313      	orrs	r3, r2
 8003828:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4a75      	ldr	r2, [pc, #468]	; (8003a08 <UART_SetConfig+0x244>)
 8003832:	4013      	ands	r3, r2
 8003834:	0019      	movs	r1, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	430a      	orrs	r2, r1
 800383e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003840:	4b72      	ldr	r3, [pc, #456]	; (8003a0c <UART_SetConfig+0x248>)
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	2203      	movs	r2, #3
 8003846:	4013      	ands	r3, r2
 8003848:	2b03      	cmp	r3, #3
 800384a:	d00d      	beq.n	8003868 <UART_SetConfig+0xa4>
 800384c:	d81b      	bhi.n	8003886 <UART_SetConfig+0xc2>
 800384e:	2b02      	cmp	r3, #2
 8003850:	d014      	beq.n	800387c <UART_SetConfig+0xb8>
 8003852:	d818      	bhi.n	8003886 <UART_SetConfig+0xc2>
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <UART_SetConfig+0x9a>
 8003858:	2b01      	cmp	r3, #1
 800385a:	d00a      	beq.n	8003872 <UART_SetConfig+0xae>
 800385c:	e013      	b.n	8003886 <UART_SetConfig+0xc2>
 800385e:	231f      	movs	r3, #31
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	2200      	movs	r2, #0
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	e012      	b.n	800388e <UART_SetConfig+0xca>
 8003868:	231f      	movs	r3, #31
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2202      	movs	r2, #2
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	e00d      	b.n	800388e <UART_SetConfig+0xca>
 8003872:	231f      	movs	r3, #31
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	2204      	movs	r2, #4
 8003878:	701a      	strb	r2, [r3, #0]
 800387a:	e008      	b.n	800388e <UART_SetConfig+0xca>
 800387c:	231f      	movs	r3, #31
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	2208      	movs	r2, #8
 8003882:	701a      	strb	r2, [r3, #0]
 8003884:	e003      	b.n	800388e <UART_SetConfig+0xca>
 8003886:	231f      	movs	r3, #31
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	2210      	movs	r2, #16
 800388c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	429a      	cmp	r2, r3
 8003898:	d15c      	bne.n	8003954 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 800389a:	231f      	movs	r3, #31
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d015      	beq.n	80038d0 <UART_SetConfig+0x10c>
 80038a4:	dc18      	bgt.n	80038d8 <UART_SetConfig+0x114>
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d00d      	beq.n	80038c6 <UART_SetConfig+0x102>
 80038aa:	dc15      	bgt.n	80038d8 <UART_SetConfig+0x114>
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <UART_SetConfig+0xf2>
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d005      	beq.n	80038c0 <UART_SetConfig+0xfc>
 80038b4:	e010      	b.n	80038d8 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b6:	f7fe fff9 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 80038ba:	0003      	movs	r3, r0
 80038bc:	61bb      	str	r3, [r7, #24]
        break;
 80038be:	e012      	b.n	80038e6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c0:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <UART_SetConfig+0x24c>)
 80038c2:	61bb      	str	r3, [r7, #24]
        break;
 80038c4:	e00f      	b.n	80038e6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c6:	f7fe ff91 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 80038ca:	0003      	movs	r3, r0
 80038cc:	61bb      	str	r3, [r7, #24]
        break;
 80038ce:	e00a      	b.n	80038e6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	61bb      	str	r3, [r7, #24]
        break;
 80038d6:	e006      	b.n	80038e6 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038dc:	231e      	movs	r3, #30
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	2201      	movs	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]
        break;
 80038e4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d100      	bne.n	80038ee <UART_SetConfig+0x12a>
 80038ec:	e07a      	b.n	80039e4 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	005a      	lsls	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	085b      	lsrs	r3, r3, #1
 80038f8:	18d2      	adds	r2, r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	0019      	movs	r1, r3
 8003900:	0010      	movs	r0, r2
 8003902:	f7fc fc01 	bl	8000108 <__udivsi3>
 8003906:	0003      	movs	r3, r0
 8003908:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b0f      	cmp	r3, #15
 800390e:	d91c      	bls.n	800394a <UART_SetConfig+0x186>
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	025b      	lsls	r3, r3, #9
 8003916:	429a      	cmp	r2, r3
 8003918:	d217      	bcs.n	800394a <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	b29a      	uxth	r2, r3
 800391e:	200e      	movs	r0, #14
 8003920:	183b      	adds	r3, r7, r0
 8003922:	210f      	movs	r1, #15
 8003924:	438a      	bics	r2, r1
 8003926:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	085b      	lsrs	r3, r3, #1
 800392c:	b29b      	uxth	r3, r3
 800392e:	2207      	movs	r2, #7
 8003930:	4013      	ands	r3, r2
 8003932:	b299      	uxth	r1, r3
 8003934:	183b      	adds	r3, r7, r0
 8003936:	183a      	adds	r2, r7, r0
 8003938:	8812      	ldrh	r2, [r2, #0]
 800393a:	430a      	orrs	r2, r1
 800393c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	183a      	adds	r2, r7, r0
 8003944:	8812      	ldrh	r2, [r2, #0]
 8003946:	60da      	str	r2, [r3, #12]
 8003948:	e04c      	b.n	80039e4 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 800394a:	231e      	movs	r3, #30
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	e047      	b.n	80039e4 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003954:	231f      	movs	r3, #31
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b08      	cmp	r3, #8
 800395c:	d015      	beq.n	800398a <UART_SetConfig+0x1c6>
 800395e:	dc18      	bgt.n	8003992 <UART_SetConfig+0x1ce>
 8003960:	2b04      	cmp	r3, #4
 8003962:	d00d      	beq.n	8003980 <UART_SetConfig+0x1bc>
 8003964:	dc15      	bgt.n	8003992 <UART_SetConfig+0x1ce>
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <UART_SetConfig+0x1ac>
 800396a:	2b02      	cmp	r3, #2
 800396c:	d005      	beq.n	800397a <UART_SetConfig+0x1b6>
 800396e:	e010      	b.n	8003992 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003970:	f7fe ff9c 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8003974:	0003      	movs	r3, r0
 8003976:	61bb      	str	r3, [r7, #24]
        break;
 8003978:	e012      	b.n	80039a0 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800397a:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <UART_SetConfig+0x24c>)
 800397c:	61bb      	str	r3, [r7, #24]
        break;
 800397e:	e00f      	b.n	80039a0 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003980:	f7fe ff34 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 8003984:	0003      	movs	r3, r0
 8003986:	61bb      	str	r3, [r7, #24]
        break;
 8003988:	e00a      	b.n	80039a0 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800398a:	2380      	movs	r3, #128	; 0x80
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	61bb      	str	r3, [r7, #24]
        break;
 8003990:	e006      	b.n	80039a0 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003996:	231e      	movs	r3, #30
 8003998:	18fb      	adds	r3, r7, r3
 800399a:	2201      	movs	r2, #1
 800399c:	701a      	strb	r2, [r3, #0]
        break;
 800399e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01e      	beq.n	80039e4 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	085a      	lsrs	r2, r3, #1
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	18d2      	adds	r2, r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	0019      	movs	r1, r3
 80039b6:	0010      	movs	r0, r2
 80039b8:	f7fc fba6 	bl	8000108 <__udivsi3>
 80039bc:	0003      	movs	r3, r0
 80039be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	2b0f      	cmp	r3, #15
 80039c4:	d90a      	bls.n	80039dc <UART_SetConfig+0x218>
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	2380      	movs	r3, #128	; 0x80
 80039ca:	025b      	lsls	r3, r3, #9
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d205      	bcs.n	80039dc <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	e003      	b.n	80039e4 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 80039dc:	231e      	movs	r3, #30
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	2201      	movs	r2, #1
 80039e2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039f0:	231e      	movs	r3, #30
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	781b      	ldrb	r3, [r3, #0]
}
 80039f6:	0018      	movs	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b008      	add	sp, #32
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	ffff69f3 	.word	0xffff69f3
 8003a04:	ffffcfff 	.word	0xffffcfff
 8003a08:	fffff4ff 	.word	0xfffff4ff
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	007a1200 	.word	0x007a1200

08003a14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a20:	2201      	movs	r2, #1
 8003a22:	4013      	ands	r3, r2
 8003a24:	d00b      	beq.n	8003a3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4a4a      	ldr	r2, [pc, #296]	; (8003b58 <UART_AdvFeatureConfig+0x144>)
 8003a2e:	4013      	ands	r3, r2
 8003a30:	0019      	movs	r1, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	2202      	movs	r2, #2
 8003a44:	4013      	ands	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	4a43      	ldr	r2, [pc, #268]	; (8003b5c <UART_AdvFeatureConfig+0x148>)
 8003a50:	4013      	ands	r3, r2
 8003a52:	0019      	movs	r1, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	2204      	movs	r2, #4
 8003a66:	4013      	ands	r3, r2
 8003a68:	d00b      	beq.n	8003a82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	4a3b      	ldr	r2, [pc, #236]	; (8003b60 <UART_AdvFeatureConfig+0x14c>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	0019      	movs	r1, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	2208      	movs	r2, #8
 8003a88:	4013      	ands	r3, r2
 8003a8a:	d00b      	beq.n	8003aa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	4a34      	ldr	r2, [pc, #208]	; (8003b64 <UART_AdvFeatureConfig+0x150>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	0019      	movs	r1, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d00b      	beq.n	8003ac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4a2c      	ldr	r2, [pc, #176]	; (8003b68 <UART_AdvFeatureConfig+0x154>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	0019      	movs	r1, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	2220      	movs	r2, #32
 8003acc:	4013      	ands	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	4a25      	ldr	r2, [pc, #148]	; (8003b6c <UART_AdvFeatureConfig+0x158>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	0019      	movs	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	2240      	movs	r2, #64	; 0x40
 8003aee:	4013      	ands	r3, r2
 8003af0:	d01d      	beq.n	8003b2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a1d      	ldr	r2, [pc, #116]	; (8003b70 <UART_AdvFeatureConfig+0x15c>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	0019      	movs	r1, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b0e:	2380      	movs	r3, #128	; 0x80
 8003b10:	035b      	lsls	r3, r3, #13
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d10b      	bne.n	8003b2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4a15      	ldr	r2, [pc, #84]	; (8003b74 <UART_AdvFeatureConfig+0x160>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	0019      	movs	r1, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	4013      	ands	r3, r2
 8003b36:	d00b      	beq.n	8003b50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4a0e      	ldr	r2, [pc, #56]	; (8003b78 <UART_AdvFeatureConfig+0x164>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	0019      	movs	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	605a      	str	r2, [r3, #4]
  }
}
 8003b50:	46c0      	nop			; (mov r8, r8)
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b002      	add	sp, #8
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	fffdffff 	.word	0xfffdffff
 8003b5c:	fffeffff 	.word	0xfffeffff
 8003b60:	fffbffff 	.word	0xfffbffff
 8003b64:	ffff7fff 	.word	0xffff7fff
 8003b68:	ffffefff 	.word	0xffffefff
 8003b6c:	ffffdfff 	.word	0xffffdfff
 8003b70:	ffefffff 	.word	0xffefffff
 8003b74:	ff9fffff 	.word	0xff9fffff
 8003b78:	fff7ffff 	.word	0xfff7ffff

08003b7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b092      	sub	sp, #72	; 0x48
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2284      	movs	r2, #132	; 0x84
 8003b88:	2100      	movs	r1, #0
 8003b8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b8c:	f7fd fa0e 	bl	8000fac <HAL_GetTick>
 8003b90:	0003      	movs	r3, r0
 8003b92:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d12c      	bne.n	8003bfc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba4:	2280      	movs	r2, #128	; 0x80
 8003ba6:	0391      	lsls	r1, r2, #14
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4a46      	ldr	r2, [pc, #280]	; (8003cc4 <UART_CheckIdleState+0x148>)
 8003bac:	9200      	str	r2, [sp, #0]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f000 f88c 	bl	8003ccc <UART_WaitOnFlagUntilTimeout>
 8003bb4:	1e03      	subs	r3, r0, #0
 8003bb6:	d021      	beq.n	8003bfc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc8:	f383 8810 	msr	PRIMASK, r3
}
 8003bcc:	46c0      	nop			; (mov r8, r8)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2180      	movs	r1, #128	; 0x80
 8003bda:	438a      	bics	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be4:	f383 8810 	msr	PRIMASK, r3
}
 8003be8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2278      	movs	r2, #120	; 0x78
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e05f      	b.n	8003cbc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2204      	movs	r2, #4
 8003c04:	4013      	ands	r3, r2
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d146      	bne.n	8003c98 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c0c:	2280      	movs	r2, #128	; 0x80
 8003c0e:	03d1      	lsls	r1, r2, #15
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	4a2c      	ldr	r2, [pc, #176]	; (8003cc4 <UART_CheckIdleState+0x148>)
 8003c14:	9200      	str	r2, [sp, #0]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f000 f858 	bl	8003ccc <UART_WaitOnFlagUntilTimeout>
 8003c1c:	1e03      	subs	r3, r0, #0
 8003c1e:	d03b      	beq.n	8003c98 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c20:	f3ef 8310 	mrs	r3, PRIMASK
 8003c24:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c26:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c28:	637b      	str	r3, [r7, #52]	; 0x34
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f383 8810 	msr	PRIMASK, r3
}
 8003c34:	46c0      	nop			; (mov r8, r8)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4921      	ldr	r1, [pc, #132]	; (8003cc8 <UART_CheckIdleState+0x14c>)
 8003c42:	400a      	ands	r2, r1
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f383 8810 	msr	PRIMASK, r3
}
 8003c50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c52:	f3ef 8310 	mrs	r3, PRIMASK
 8003c56:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c58:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5a:	633b      	str	r3, [r7, #48]	; 0x30
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f383 8810 	msr	PRIMASK, r3
}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2101      	movs	r1, #1
 8003c74:	438a      	bics	r2, r1
 8003c76:	609a      	str	r2, [r3, #8]
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	f383 8810 	msr	PRIMASK, r3
}
 8003c82:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2280      	movs	r2, #128	; 0x80
 8003c88:	2120      	movs	r1, #32
 8003c8a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2278      	movs	r2, #120	; 0x78
 8003c90:	2100      	movs	r1, #0
 8003c92:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e011      	b.n	8003cbc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2280      	movs	r2, #128	; 0x80
 8003ca2:	2120      	movs	r1, #32
 8003ca4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2278      	movs	r2, #120	; 0x78
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b010      	add	sp, #64	; 0x40
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	01ffffff 	.word	0x01ffffff
 8003cc8:	fffffedf 	.word	0xfffffedf

08003ccc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	1dfb      	adds	r3, r7, #7
 8003cda:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cdc:	e04b      	b.n	8003d76 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	d048      	beq.n	8003d76 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce4:	f7fd f962 	bl	8000fac <HAL_GetTick>
 8003ce8:	0002      	movs	r2, r0
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d302      	bcc.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x2e>
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e04b      	b.n	8003d96 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2204      	movs	r2, #4
 8003d06:	4013      	ands	r3, r2
 8003d08:	d035      	beq.n	8003d76 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	2208      	movs	r2, #8
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d111      	bne.n	8003d3c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	0018      	movs	r0, r3
 8003d24:	f000 f8f2 	bl	8003f0c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2284      	movs	r2, #132	; 0x84
 8003d2c:	2108      	movs	r1, #8
 8003d2e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2278      	movs	r2, #120	; 0x78
 8003d34:	2100      	movs	r1, #0
 8003d36:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e02c      	b.n	8003d96 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69da      	ldr	r2, [r3, #28]
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	401a      	ands	r2, r3
 8003d48:	2380      	movs	r3, #128	; 0x80
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d112      	bne.n	8003d76 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2280      	movs	r2, #128	; 0x80
 8003d56:	0112      	lsls	r2, r2, #4
 8003d58:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f000 f8d5 	bl	8003f0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2284      	movs	r2, #132	; 0x84
 8003d66:	2120      	movs	r1, #32
 8003d68:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2278      	movs	r2, #120	; 0x78
 8003d6e:	2100      	movs	r1, #0
 8003d70:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e00f      	b.n	8003d96 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	425a      	negs	r2, r3
 8003d86:	4153      	adcs	r3, r2
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	001a      	movs	r2, r3
 8003d8c:	1dfb      	adds	r3, r7, #7
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d0a4      	beq.n	8003cde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	0018      	movs	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b004      	add	sp, #16
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b090      	sub	sp, #64	; 0x40
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	1dbb      	adds	r3, r7, #6
 8003dac:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	1dba      	adds	r2, r7, #6
 8003db8:	2158      	movs	r1, #88	; 0x58
 8003dba:	8812      	ldrh	r2, [r2, #0]
 8003dbc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	1dba      	adds	r2, r7, #6
 8003dc2:	215a      	movs	r1, #90	; 0x5a
 8003dc4:	8812      	ldrh	r2, [r2, #0]
 8003dc6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	2380      	movs	r3, #128	; 0x80
 8003dd4:	015b      	lsls	r3, r3, #5
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d10d      	bne.n	8003df6 <UART_Start_Receive_IT+0x56>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d104      	bne.n	8003dec <UART_Start_Receive_IT+0x4c>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	225c      	movs	r2, #92	; 0x5c
 8003de6:	4946      	ldr	r1, [pc, #280]	; (8003f00 <UART_Start_Receive_IT+0x160>)
 8003de8:	5299      	strh	r1, [r3, r2]
 8003dea:	e01a      	b.n	8003e22 <UART_Start_Receive_IT+0x82>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	225c      	movs	r2, #92	; 0x5c
 8003df0:	21ff      	movs	r1, #255	; 0xff
 8003df2:	5299      	strh	r1, [r3, r2]
 8003df4:	e015      	b.n	8003e22 <UART_Start_Receive_IT+0x82>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10d      	bne.n	8003e1a <UART_Start_Receive_IT+0x7a>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d104      	bne.n	8003e10 <UART_Start_Receive_IT+0x70>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	225c      	movs	r2, #92	; 0x5c
 8003e0a:	21ff      	movs	r1, #255	; 0xff
 8003e0c:	5299      	strh	r1, [r3, r2]
 8003e0e:	e008      	b.n	8003e22 <UART_Start_Receive_IT+0x82>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	225c      	movs	r2, #92	; 0x5c
 8003e14:	217f      	movs	r1, #127	; 0x7f
 8003e16:	5299      	strh	r1, [r3, r2]
 8003e18:	e003      	b.n	8003e22 <UART_Start_Receive_IT+0x82>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	225c      	movs	r2, #92	; 0x5c
 8003e1e:	2100      	movs	r1, #0
 8003e20:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2284      	movs	r2, #132	; 0x84
 8003e26:	2100      	movs	r1, #0
 8003e28:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2280      	movs	r2, #128	; 0x80
 8003e2e:	2122      	movs	r1, #34	; 0x22
 8003e30:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e32:	f3ef 8310 	mrs	r3, PRIMASK
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e42:	f383 8810 	msr	PRIMASK, r3
}
 8003e46:	46c0      	nop			; (mov r8, r8)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2101      	movs	r1, #1
 8003e54:	430a      	orrs	r2, r1
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5e:	f383 8810 	msr	PRIMASK, r3
}
 8003e62:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	2380      	movs	r3, #128	; 0x80
 8003e6a:	015b      	lsls	r3, r3, #5
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d107      	bne.n	8003e80 <UART_Start_Receive_IT+0xe0>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d103      	bne.n	8003e80 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4a22      	ldr	r2, [pc, #136]	; (8003f04 <UART_Start_Receive_IT+0x164>)
 8003e7c:	669a      	str	r2, [r3, #104]	; 0x68
 8003e7e:	e002      	b.n	8003e86 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a21      	ldr	r2, [pc, #132]	; (8003f08 <UART_Start_Receive_IT+0x168>)
 8003e84:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d019      	beq.n	8003ec2 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e92:	61fb      	str	r3, [r7, #28]
  return(result);
 8003e94:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003e96:	637b      	str	r3, [r7, #52]	; 0x34
 8003e98:	2301      	movs	r3, #1
 8003e9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2190      	movs	r1, #144	; 0x90
 8003eb0:	0049      	lsls	r1, r1, #1
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	f383 8810 	msr	PRIMASK, r3
}
 8003ec0:	e018      	b.n	8003ef4 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec6:	613b      	str	r3, [r7, #16]
  return(result);
 8003ec8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003eca:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ecc:	2301      	movs	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f383 8810 	msr	PRIMASK, r3
}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2120      	movs	r1, #32
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	f383 8810 	msr	PRIMASK, r3
}
 8003ef2:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b010      	add	sp, #64	; 0x40
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	46c0      	nop			; (mov r8, r8)
 8003f00:	000001ff 	.word	0x000001ff
 8003f04:	08004211 	.word	0x08004211
 8003f08:	08004059 	.word	0x08004059

08003f0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08e      	sub	sp, #56	; 0x38
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f14:	f3ef 8310 	mrs	r3, PRIMASK
 8003f18:	617b      	str	r3, [r7, #20]
  return(result);
 8003f1a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f1e:	2301      	movs	r3, #1
 8003f20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	f383 8810 	msr	PRIMASK, r3
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4926      	ldr	r1, [pc, #152]	; (8003fd0 <UART_EndRxTransfer+0xc4>)
 8003f36:	400a      	ands	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f383 8810 	msr	PRIMASK, r3
}
 8003f44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f46:	f3ef 8310 	mrs	r3, PRIMASK
 8003f4a:	623b      	str	r3, [r7, #32]
  return(result);
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4e:	633b      	str	r3, [r7, #48]	; 0x30
 8003f50:	2301      	movs	r3, #1
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	f383 8810 	msr	PRIMASK, r3
}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2101      	movs	r1, #1
 8003f68:	438a      	bics	r2, r1
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	f383 8810 	msr	PRIMASK, r3
}
 8003f76:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d118      	bne.n	8003fb2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f80:	f3ef 8310 	mrs	r3, PRIMASK
 8003f84:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f86:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f383 8810 	msr	PRIMASK, r3
}
 8003f94:	46c0      	nop			; (mov r8, r8)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2110      	movs	r1, #16
 8003fa2:	438a      	bics	r2, r1
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f383 8810 	msr	PRIMASK, r3
}
 8003fb0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2280      	movs	r2, #128	; 0x80
 8003fb6:	2120      	movs	r1, #32
 8003fb8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b00e      	add	sp, #56	; 0x38
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	fffffedf 	.word	0xfffffedf

08003fd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	225a      	movs	r2, #90	; 0x5a
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2252      	movs	r2, #82	; 0x52
 8003fee:	2100      	movs	r1, #0
 8003ff0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f7ff fbd1 	bl	800379c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b004      	add	sp, #16
 8004000:	bd80      	pop	{r7, pc}

08004002 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b086      	sub	sp, #24
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800400a:	f3ef 8310 	mrs	r3, PRIMASK
 800400e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004010:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	2301      	movs	r3, #1
 8004016:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f383 8810 	msr	PRIMASK, r3
}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2140      	movs	r1, #64	; 0x40
 800402c:	438a      	bics	r2, r1
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f383 8810 	msr	PRIMASK, r3
}
 800403a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	0018      	movs	r0, r3
 800404c:	f7ff fb96 	bl	800377c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004050:	46c0      	nop			; (mov r8, r8)
 8004052:	46bd      	mov	sp, r7
 8004054:	b006      	add	sp, #24
 8004056:	bd80      	pop	{r7, pc}

08004058 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b094      	sub	sp, #80	; 0x50
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004060:	204e      	movs	r0, #78	; 0x4e
 8004062:	183b      	adds	r3, r7, r0
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	215c      	movs	r1, #92	; 0x5c
 8004068:	5a52      	ldrh	r2, [r2, r1]
 800406a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2280      	movs	r2, #128	; 0x80
 8004070:	589b      	ldr	r3, [r3, r2]
 8004072:	2b22      	cmp	r3, #34	; 0x22
 8004074:	d000      	beq.n	8004078 <UART_RxISR_8BIT+0x20>
 8004076:	e0ba      	b.n	80041ee <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	214c      	movs	r1, #76	; 0x4c
 800407e:	187b      	adds	r3, r7, r1
 8004080:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004082:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004084:	187b      	adds	r3, r7, r1
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	183b      	adds	r3, r7, r0
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	b2d9      	uxtb	r1, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	400a      	ands	r2, r1
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	225a      	movs	r2, #90	; 0x5a
 80040a8:	5a9b      	ldrh	r3, [r3, r2]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b299      	uxth	r1, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	225a      	movs	r2, #90	; 0x5a
 80040b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	225a      	movs	r2, #90	; 0x5a
 80040ba:	5a9b      	ldrh	r3, [r3, r2]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d000      	beq.n	80040c4 <UART_RxISR_8BIT+0x6c>
 80040c2:	e09c      	b.n	80041fe <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c4:	f3ef 8310 	mrs	r3, PRIMASK
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ce:	2301      	movs	r3, #1
 80040d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d4:	f383 8810 	msr	PRIMASK, r3
}
 80040d8:	46c0      	nop			; (mov r8, r8)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4948      	ldr	r1, [pc, #288]	; (8004208 <UART_RxISR_8BIT+0x1b0>)
 80040e6:	400a      	ands	r2, r1
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f0:	f383 8810 	msr	PRIMASK, r3
}
 80040f4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f6:	f3ef 8310 	mrs	r3, PRIMASK
 80040fa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004100:	2301      	movs	r3, #1
 8004102:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004106:	f383 8810 	msr	PRIMASK, r3
}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2101      	movs	r1, #1
 8004118:	438a      	bics	r2, r1
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800411e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004122:	f383 8810 	msr	PRIMASK, r3
}
 8004126:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2280      	movs	r2, #128	; 0x80
 800412c:	2120      	movs	r1, #32
 800412e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	2380      	movs	r3, #128	; 0x80
 8004144:	041b      	lsls	r3, r3, #16
 8004146:	4013      	ands	r3, r2
 8004148:	d018      	beq.n	800417c <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800414a:	f3ef 8310 	mrs	r3, PRIMASK
 800414e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004150:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004152:	643b      	str	r3, [r7, #64]	; 0x40
 8004154:	2301      	movs	r3, #1
 8004156:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f383 8810 	msr	PRIMASK, r3
}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4928      	ldr	r1, [pc, #160]	; (800420c <UART_RxISR_8BIT+0x1b4>)
 800416c:	400a      	ands	r2, r1
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004172:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	f383 8810 	msr	PRIMASK, r3
}
 800417a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004180:	2b01      	cmp	r3, #1
 8004182:	d12f      	bne.n	80041e4 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800418a:	f3ef 8310 	mrs	r3, PRIMASK
 800418e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004190:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004194:	2301      	movs	r3, #1
 8004196:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f383 8810 	msr	PRIMASK, r3
}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2110      	movs	r1, #16
 80041ac:	438a      	bics	r2, r1
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f383 8810 	msr	PRIMASK, r3
}
 80041ba:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	2210      	movs	r2, #16
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b10      	cmp	r3, #16
 80041c8:	d103      	bne.n	80041d2 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2210      	movs	r2, #16
 80041d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2258      	movs	r2, #88	; 0x58
 80041d6:	5a9a      	ldrh	r2, [r3, r2]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	0011      	movs	r1, r2
 80041dc:	0018      	movs	r0, r3
 80041de:	f7ff fae5 	bl	80037ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041e2:	e00c      	b.n	80041fe <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	0018      	movs	r0, r3
 80041e8:	f7ff fad0 	bl	800378c <HAL_UART_RxCpltCallback>
}
 80041ec:	e007      	b.n	80041fe <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699a      	ldr	r2, [r3, #24]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2108      	movs	r1, #8
 80041fa:	430a      	orrs	r2, r1
 80041fc:	619a      	str	r2, [r3, #24]
}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	46bd      	mov	sp, r7
 8004202:	b014      	add	sp, #80	; 0x50
 8004204:	bd80      	pop	{r7, pc}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	fffffedf 	.word	0xfffffedf
 800420c:	fbffffff 	.word	0xfbffffff

08004210 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b094      	sub	sp, #80	; 0x50
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004218:	204e      	movs	r0, #78	; 0x4e
 800421a:	183b      	adds	r3, r7, r0
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	215c      	movs	r1, #92	; 0x5c
 8004220:	5a52      	ldrh	r2, [r2, r1]
 8004222:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2280      	movs	r2, #128	; 0x80
 8004228:	589b      	ldr	r3, [r3, r2]
 800422a:	2b22      	cmp	r3, #34	; 0x22
 800422c:	d000      	beq.n	8004230 <UART_RxISR_16BIT+0x20>
 800422e:	e0ba      	b.n	80043a6 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	214c      	movs	r1, #76	; 0x4c
 8004236:	187b      	adds	r3, r7, r1
 8004238:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800423a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004240:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004242:	187b      	adds	r3, r7, r1
 8004244:	183a      	adds	r2, r7, r0
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	8812      	ldrh	r2, [r2, #0]
 800424a:	4013      	ands	r3, r2
 800424c:	b29a      	uxth	r2, r3
 800424e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004250:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	1c9a      	adds	r2, r3, #2
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	225a      	movs	r2, #90	; 0x5a
 8004260:	5a9b      	ldrh	r3, [r3, r2]
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b299      	uxth	r1, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	225a      	movs	r2, #90	; 0x5a
 800426c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	225a      	movs	r2, #90	; 0x5a
 8004272:	5a9b      	ldrh	r3, [r3, r2]
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d000      	beq.n	800427c <UART_RxISR_16BIT+0x6c>
 800427a:	e09c      	b.n	80043b6 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800427c:	f3ef 8310 	mrs	r3, PRIMASK
 8004280:	623b      	str	r3, [r7, #32]
  return(result);
 8004282:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004284:	647b      	str	r3, [r7, #68]	; 0x44
 8004286:	2301      	movs	r3, #1
 8004288:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	f383 8810 	msr	PRIMASK, r3
}
 8004290:	46c0      	nop			; (mov r8, r8)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4948      	ldr	r1, [pc, #288]	; (80043c0 <UART_RxISR_16BIT+0x1b0>)
 800429e:	400a      	ands	r2, r1
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a8:	f383 8810 	msr	PRIMASK, r3
}
 80042ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ae:	f3ef 8310 	mrs	r3, PRIMASK
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80042b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b6:	643b      	str	r3, [r7, #64]	; 0x40
 80042b8:	2301      	movs	r3, #1
 80042ba:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	f383 8810 	msr	PRIMASK, r3
}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2101      	movs	r1, #1
 80042d0:	438a      	bics	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
 80042d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042da:	f383 8810 	msr	PRIMASK, r3
}
 80042de:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2280      	movs	r2, #128	; 0x80
 80042e4:	2120      	movs	r1, #32
 80042e6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	2380      	movs	r3, #128	; 0x80
 80042fc:	041b      	lsls	r3, r3, #16
 80042fe:	4013      	ands	r3, r2
 8004300:	d018      	beq.n	8004334 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004302:	f3ef 8310 	mrs	r3, PRIMASK
 8004306:	617b      	str	r3, [r7, #20]
  return(result);
 8004308:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800430a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800430c:	2301      	movs	r3, #1
 800430e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	f383 8810 	msr	PRIMASK, r3
}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4928      	ldr	r1, [pc, #160]	; (80043c4 <UART_RxISR_16BIT+0x1b4>)
 8004324:	400a      	ands	r2, r1
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f383 8810 	msr	PRIMASK, r3
}
 8004332:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004338:	2b01      	cmp	r3, #1
 800433a:	d12f      	bne.n	800439c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004342:	f3ef 8310 	mrs	r3, PRIMASK
 8004346:	60bb      	str	r3, [r7, #8]
  return(result);
 8004348:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434a:	63bb      	str	r3, [r7, #56]	; 0x38
 800434c:	2301      	movs	r3, #1
 800434e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f383 8810 	msr	PRIMASK, r3
}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2110      	movs	r1, #16
 8004364:	438a      	bics	r2, r1
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f383 8810 	msr	PRIMASK, r3
}
 8004372:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	2210      	movs	r2, #16
 800437c:	4013      	ands	r3, r2
 800437e:	2b10      	cmp	r3, #16
 8004380:	d103      	bne.n	800438a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2210      	movs	r2, #16
 8004388:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2258      	movs	r2, #88	; 0x58
 800438e:	5a9a      	ldrh	r2, [r3, r2]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	0011      	movs	r1, r2
 8004394:	0018      	movs	r0, r3
 8004396:	f7ff fa09 	bl	80037ac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800439a:	e00c      	b.n	80043b6 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	0018      	movs	r0, r3
 80043a0:	f7ff f9f4 	bl	800378c <HAL_UART_RxCpltCallback>
}
 80043a4:	e007      	b.n	80043b6 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699a      	ldr	r2, [r3, #24]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2108      	movs	r1, #8
 80043b2:	430a      	orrs	r2, r1
 80043b4:	619a      	str	r2, [r3, #24]
}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	46bd      	mov	sp, r7
 80043ba:	b014      	add	sp, #80	; 0x50
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	fffffedf 	.word	0xfffffedf
 80043c4:	fbffffff 	.word	0xfbffffff

080043c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043d0:	46c0      	nop			; (mov r8, r8)
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b002      	add	sp, #8
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <memset>:
 80043d8:	0003      	movs	r3, r0
 80043da:	1882      	adds	r2, r0, r2
 80043dc:	4293      	cmp	r3, r2
 80043de:	d100      	bne.n	80043e2 <memset+0xa>
 80043e0:	4770      	bx	lr
 80043e2:	7019      	strb	r1, [r3, #0]
 80043e4:	3301      	adds	r3, #1
 80043e6:	e7f9      	b.n	80043dc <memset+0x4>

080043e8 <__libc_init_array>:
 80043e8:	b570      	push	{r4, r5, r6, lr}
 80043ea:	2600      	movs	r6, #0
 80043ec:	4c0c      	ldr	r4, [pc, #48]	; (8004420 <__libc_init_array+0x38>)
 80043ee:	4d0d      	ldr	r5, [pc, #52]	; (8004424 <__libc_init_array+0x3c>)
 80043f0:	1b64      	subs	r4, r4, r5
 80043f2:	10a4      	asrs	r4, r4, #2
 80043f4:	42a6      	cmp	r6, r4
 80043f6:	d109      	bne.n	800440c <__libc_init_array+0x24>
 80043f8:	2600      	movs	r6, #0
 80043fa:	f000 f819 	bl	8004430 <_init>
 80043fe:	4c0a      	ldr	r4, [pc, #40]	; (8004428 <__libc_init_array+0x40>)
 8004400:	4d0a      	ldr	r5, [pc, #40]	; (800442c <__libc_init_array+0x44>)
 8004402:	1b64      	subs	r4, r4, r5
 8004404:	10a4      	asrs	r4, r4, #2
 8004406:	42a6      	cmp	r6, r4
 8004408:	d105      	bne.n	8004416 <__libc_init_array+0x2e>
 800440a:	bd70      	pop	{r4, r5, r6, pc}
 800440c:	00b3      	lsls	r3, r6, #2
 800440e:	58eb      	ldr	r3, [r5, r3]
 8004410:	4798      	blx	r3
 8004412:	3601      	adds	r6, #1
 8004414:	e7ee      	b.n	80043f4 <__libc_init_array+0xc>
 8004416:	00b3      	lsls	r3, r6, #2
 8004418:	58eb      	ldr	r3, [r5, r3]
 800441a:	4798      	blx	r3
 800441c:	3601      	adds	r6, #1
 800441e:	e7f2      	b.n	8004406 <__libc_init_array+0x1e>
 8004420:	080044e4 	.word	0x080044e4
 8004424:	080044e4 	.word	0x080044e4
 8004428:	080044e8 	.word	0x080044e8
 800442c:	080044e4 	.word	0x080044e4

08004430 <_init>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004436:	bc08      	pop	{r3}
 8004438:	469e      	mov	lr, r3
 800443a:	4770      	bx	lr

0800443c <_fini>:
 800443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004442:	bc08      	pop	{r3}
 8004444:	469e      	mov	lr, r3
 8004446:	4770      	bx	lr
