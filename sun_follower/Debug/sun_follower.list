
sun_follower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004478  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08004538  08004538  00014538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045e0  080045e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080045e0  080045e0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045e0  080045e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e0  080045e0  000145e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045e4  080045e4  000145e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080045e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  080045f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  080045f4  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001099d  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e1  00000000  00000000  00030a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00032df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c41  00000000  00000000  00033d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001119c  00000000  00000000  000349a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013521  00000000  00000000  00045b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000685b4  00000000  00000000  00059066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003860  00000000  00000000  000c161c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c4e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004520 	.word	0x08004520

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004520 	.word	0x08004520

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <bcdToDec>:

} ts;

uint8_t decToBcd(int val) { return (uint8_t)((val / 10 * 16) + (val % 10)); }

int bcdToDec(uint8_t val) { return (int)((val / 16 * 10) + (val % 16)); }
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	0002      	movs	r2, r0
 80003fc:	1dfb      	adds	r3, r7, #7
 80003fe:	701a      	strb	r2, [r3, #0]
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	091b      	lsrs	r3, r3, #4
 8000406:	b2db      	uxtb	r3, r3
 8000408:	001a      	movs	r2, r3
 800040a:	0013      	movs	r3, r2
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	189b      	adds	r3, r3, r2
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	0019      	movs	r1, r3
 8000414:	1dfb      	adds	r3, r7, #7
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	220f      	movs	r2, #15
 800041a:	4013      	ands	r3, r2
 800041c:	18cb      	adds	r3, r1, r3
 800041e:	0018      	movs	r0, r3
 8000420:	46bd      	mov	sp, r7
 8000422:	b002      	add	sp, #8
 8000424:	bd80      	pop	{r7, pc}

08000426 <Get_Time>:
                    (uint8_t *)TimeDate, 7, 1000);
  // i2c_WriteMulti(DS3231_I2C_ADDR,DS3231_TIME_CAL_ADDR,(char*)TimeDate,7);
}
#endif

int Get_Time(ts *t, I2C_HandleTypeDef *hi2c1) {
 8000426:	b5b0      	push	{r4, r5, r7, lr}
 8000428:	b08a      	sub	sp, #40	; 0x28
 800042a:	af04      	add	r7, sp, #16
 800042c:	6078      	str	r0, [r7, #4]
 800042e:	6039      	str	r1, [r7, #0]
  uint8_t TimeDate[7];
  uint8_t i;
  uint16_t year_full;

  if (HAL_I2C_Mem_Read(hi2c1, DS3231_I2C_ADDR, DS3231_TIME_CAL_ADDR, 1,
 8000430:	6838      	ldr	r0, [r7, #0]
 8000432:	23fa      	movs	r3, #250	; 0xfa
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	9302      	str	r3, [sp, #8]
 8000438:	2307      	movs	r3, #7
 800043a:	9301      	str	r3, [sp, #4]
 800043c:	230c      	movs	r3, #12
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	9300      	str	r3, [sp, #0]
 8000442:	2301      	movs	r3, #1
 8000444:	2200      	movs	r2, #0
 8000446:	21d0      	movs	r1, #208	; 0xd0
 8000448:	f001 f9fe 	bl	8001848 <HAL_I2C_Mem_Read>
 800044c:	1e03      	subs	r3, r0, #0
 800044e:	d161      	bne.n	8000514 <Get_Time+0xee>
                       TimeDate, 7, 1000) == HAL_OK) {
    for (i = 0; i <= 6; i++) {
 8000450:	2317      	movs	r3, #23
 8000452:	18fb      	adds	r3, r7, r3
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
 8000458:	e029      	b.n	80004ae <Get_Time+0x88>
      if (i == 5) {
 800045a:	2217      	movs	r2, #23
 800045c:	18bb      	adds	r3, r7, r2
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b05      	cmp	r3, #5
 8000462:	d10f      	bne.n	8000484 <Get_Time+0x5e>
        TimeDate[5] = bcdToDec(TimeDate[i] & 0x1F);
 8000464:	18bb      	adds	r3, r7, r2
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	240c      	movs	r4, #12
 800046a:	193a      	adds	r2, r7, r4
 800046c:	5cd3      	ldrb	r3, [r2, r3]
 800046e:	221f      	movs	r2, #31
 8000470:	4013      	ands	r3, r2
 8000472:	b2db      	uxtb	r3, r3
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff ffbd 	bl	80003f4 <bcdToDec>
 800047a:	0003      	movs	r3, r0
 800047c:	b2da      	uxtb	r2, r3
 800047e:	193b      	adds	r3, r7, r4
 8000480:	715a      	strb	r2, [r3, #5]
 8000482:	e00e      	b.n	80004a2 <Get_Time+0x7c>
      } else {
        TimeDate[i] = bcdToDec(TimeDate[i]);
 8000484:	2417      	movs	r4, #23
 8000486:	193b      	adds	r3, r7, r4
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	250c      	movs	r5, #12
 800048c:	197a      	adds	r2, r7, r5
 800048e:	5cd3      	ldrb	r3, [r2, r3]
 8000490:	0018      	movs	r0, r3
 8000492:	f7ff ffaf 	bl	80003f4 <bcdToDec>
 8000496:	0002      	movs	r2, r0
 8000498:	193b      	adds	r3, r7, r4
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	b2d1      	uxtb	r1, r2
 800049e:	197a      	adds	r2, r7, r5
 80004a0:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i <= 6; i++) {
 80004a2:	2117      	movs	r1, #23
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	781a      	ldrb	r2, [r3, #0]
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	3201      	adds	r2, #1
 80004ac:	701a      	strb	r2, [r3, #0]
 80004ae:	2317      	movs	r3, #23
 80004b0:	18fb      	adds	r3, r7, r3
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b06      	cmp	r3, #6
 80004b6:	d9d0      	bls.n	800045a <Get_Time+0x34>
      }
    }

    year_full = 2000 + TimeDate[6];
 80004b8:	210c      	movs	r1, #12
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	799b      	ldrb	r3, [r3, #6]
 80004be:	b29a      	uxth	r2, r3
 80004c0:	2014      	movs	r0, #20
 80004c2:	183b      	adds	r3, r7, r0
 80004c4:	24fa      	movs	r4, #250	; 0xfa
 80004c6:	00e4      	lsls	r4, r4, #3
 80004c8:	46a4      	mov	ip, r4
 80004ca:	4462      	add	r2, ip
 80004cc:	801a      	strh	r2, [r3, #0]

    t->sec = TimeDate[0];
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	781a      	ldrb	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	701a      	strb	r2, [r3, #0]
    t->min = TimeDate[1];
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	785a      	ldrb	r2, [r3, #1]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	705a      	strb	r2, [r3, #1]
    t->hour = TimeDate[2];
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	789a      	ldrb	r2, [r3, #2]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	709a      	strb	r2, [r3, #2]
    t->mday = TimeDate[4];
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	791a      	ldrb	r2, [r3, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	70da      	strb	r2, [r3, #3]
    t->mon = TimeDate[5];
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	795a      	ldrb	r2, [r3, #5]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	711a      	strb	r2, [r3, #4]
    t->year = year_full;
 80004f6:	183b      	adds	r3, r7, r0
 80004f8:	2200      	movs	r2, #0
 80004fa:	5e9a      	ldrsh	r2, [r3, r2]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	80da      	strh	r2, [r3, #6]
    t->wday = TimeDate[3];
 8000500:	187b      	adds	r3, r7, r1
 8000502:	78da      	ldrb	r2, [r3, #3]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	721a      	strb	r2, [r3, #8]
    t->year_s = TimeDate[6];
 8000508:	187b      	adds	r3, r7, r1
 800050a:	799a      	ldrb	r2, [r3, #6]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	72da      	strb	r2, [r3, #11]

    return 0x01U;
 8000510:	2301      	movs	r3, #1
 8000512:	e000      	b.n	8000516 <Get_Time+0xf0>
  } else {
    return 0xFFU;
 8000514:	23ff      	movs	r3, #255	; 0xff
  }
}
 8000516:	0018      	movs	r0, r3
 8000518:	46bd      	mov	sp, r7
 800051a:	b006      	add	sp, #24
 800051c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000520 <itoa>:
/**
 * C++ version 0.4 char* style "itoa":
 * Written by Lukás Chmela
 * Released under GPLv3.
 */
char* itoa(int value, char* result, int base) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
  // check that the base if valid
  if (base < 2 || base > 36) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b01      	cmp	r3, #1
 8000530:	dd02      	ble.n	8000538 <itoa+0x18>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b24      	cmp	r3, #36	; 0x24
 8000536:	dd04      	ble.n	8000542 <itoa+0x22>
    *result = '\0';
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
    return result;
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	e03f      	b.n	80005c2 <itoa+0xa2>
  }

  char *ptr = result, *ptr1 = result, tmp_char;
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	61fb      	str	r3, [r7, #28]
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	61bb      	str	r3, [r7, #24]
  int tmp_value;

  do {
    tmp_value = value;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	617b      	str	r3, [r7, #20]
    value /= base;
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	68f8      	ldr	r0, [r7, #12]
 8000552:	f7ff fe63 	bl	800021c <__divsi3>
 8000556:	0003      	movs	r3, r0
 8000558:	60fb      	str	r3, [r7, #12]
    *ptr++ =
        "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxy"
        "z"[35 + (tmp_value - value * base)];
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	4353      	muls	r3, r2
 8000560:	697a      	ldr	r2, [r7, #20]
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	3323      	adds	r3, #35	; 0x23
 8000566:	001a      	movs	r2, r3
    *ptr++ =
 8000568:	69fb      	ldr	r3, [r7, #28]
 800056a:	1c59      	adds	r1, r3, #1
 800056c:	61f9      	str	r1, [r7, #28]
        "z"[35 + (tmp_value - value * base)];
 800056e:	4917      	ldr	r1, [pc, #92]	; (80005cc <itoa+0xac>)
 8000570:	5c8a      	ldrb	r2, [r1, r2]
    *ptr++ =
 8000572:	701a      	strb	r2, [r3, #0]
  } while (value);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d1e7      	bne.n	800054a <itoa+0x2a>

  // Apply negative sign
  if (tmp_value < 0) *ptr++ = '-';
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	2b00      	cmp	r3, #0
 800057e:	da04      	bge.n	800058a <itoa+0x6a>
 8000580:	69fb      	ldr	r3, [r7, #28]
 8000582:	1c5a      	adds	r2, r3, #1
 8000584:	61fa      	str	r2, [r7, #28]
 8000586:	222d      	movs	r2, #45	; 0x2d
 8000588:	701a      	strb	r2, [r3, #0]
  *ptr-- = '\0';
 800058a:	69fb      	ldr	r3, [r7, #28]
 800058c:	1e5a      	subs	r2, r3, #1
 800058e:	61fa      	str	r2, [r7, #28]
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
  while (ptr1 < ptr) {
 8000594:	e010      	b.n	80005b8 <itoa+0x98>
    tmp_char = *ptr;
 8000596:	2113      	movs	r1, #19
 8000598:	187b      	adds	r3, r7, r1
 800059a:	69fa      	ldr	r2, [r7, #28]
 800059c:	7812      	ldrb	r2, [r2, #0]
 800059e:	701a      	strb	r2, [r3, #0]
    *ptr-- = *ptr1;
 80005a0:	69fb      	ldr	r3, [r7, #28]
 80005a2:	1e5a      	subs	r2, r3, #1
 80005a4:	61fa      	str	r2, [r7, #28]
 80005a6:	69ba      	ldr	r2, [r7, #24]
 80005a8:	7812      	ldrb	r2, [r2, #0]
 80005aa:	701a      	strb	r2, [r3, #0]
    *ptr1++ = tmp_char;
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	61ba      	str	r2, [r7, #24]
 80005b2:	187a      	adds	r2, r7, r1
 80005b4:	7812      	ldrb	r2, [r2, #0]
 80005b6:	701a      	strb	r2, [r3, #0]
  while (ptr1 < ptr) {
 80005b8:	69ba      	ldr	r2, [r7, #24]
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d3ea      	bcc.n	8000596 <itoa+0x76>
  }
  return result;
 80005c0:	68bb      	ldr	r3, [r7, #8]
}
 80005c2:	0018      	movs	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	b008      	add	sp, #32
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	08004538 	.word	0x08004538

080005d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick.
   */
  HAL_Init();
 80005d4:	f000 fd08 	bl	8000fe8 <HAL_Init>
#endif

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f81a 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f916 	bl	800080c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005e0:	f000 f87a 	bl	80006d8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80005e4:	f000 f8e2 	bl	80007ac <MX_USART1_UART_Init>
  MX_TIM16_Init();
 80005e8:	f000 f8b6 	bl	8000758 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <main+0x34>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f002 fb08 	bl	8002c04 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &recvd_data, 1);
 80005f4:	4904      	ldr	r1, [pc, #16]	; (8000608 <main+0x38>)
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <main+0x3c>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	0018      	movs	r0, r3
 80005fc:	f002 fdfe 	bl	80031fc <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000600:	e7fe      	b.n	8000600 <main+0x30>
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	2000007c 	.word	0x2000007c
 8000608:	20000158 	.word	0x20000158
 800060c:	200000c4 	.word	0x200000c4

08000610 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b095      	sub	sp, #84	; 0x54
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	2420      	movs	r4, #32
 8000618:	193b      	adds	r3, r7, r4
 800061a:	0018      	movs	r0, r3
 800061c:	2330      	movs	r3, #48	; 0x30
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f003 ff51 	bl	80044c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000626:	2310      	movs	r3, #16
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	0018      	movs	r0, r3
 800062c:	2310      	movs	r3, #16
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f003 ff49 	bl	80044c8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000636:	003b      	movs	r3, r7
 8000638:	0018      	movs	r0, r3
 800063a:	2310      	movs	r3, #16
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f003 ff42 	bl	80044c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	0021      	movs	r1, r4
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2202      	movs	r2, #2
 800064a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2201      	movs	r2, #1
 8000650:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2210      	movs	r2, #16
 8000656:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2202      	movs	r2, #2
 800065c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2200      	movs	r2, #0
 8000662:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	22a0      	movs	r2, #160	; 0xa0
 8000668:	0392      	lsls	r2, r2, #14
 800066a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2200      	movs	r2, #0
 8000670:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000672:	187b      	adds	r3, r7, r1
 8000674:	0018      	movs	r0, r3
 8000676:	f001 fd49 	bl	800210c <HAL_RCC_OscConfig>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x72>
    Error_Handler();
 800067e:	f000 fb55 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType =
 8000682:	2110      	movs	r1, #16
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2207      	movs	r2, #7
 8000688:	601a      	str	r2, [r3, #0]
      RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	187b      	adds	r3, r7, r1
 800068c:	2202      	movs	r2, #2
 800068e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	187b      	adds	r3, r7, r1
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2101      	movs	r1, #1
 80006a0:	0018      	movs	r0, r3
 80006a2:	f002 f84d 	bl	8002740 <HAL_RCC_ClockConfig>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x9e>
    Error_Handler();
 80006aa:	f000 fb3f 	bl	8000d2c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection =
 80006ae:	003b      	movs	r3, r7
 80006b0:	2221      	movs	r2, #33	; 0x21
 80006b2:	601a      	str	r2, [r3, #0]
      RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80006b4:	003b      	movs	r3, r7
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80006ba:	003b      	movs	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80006c0:	003b      	movs	r3, r7
 80006c2:	0018      	movs	r0, r3
 80006c4:	f002 f980 	bl	80029c8 <HAL_RCCEx_PeriphCLKConfig>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xc0>
    Error_Handler();
 80006cc:	f000 fb2e 	bl	8000d2c <Error_Handler>
  }
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b015      	add	sp, #84	; 0x54
 80006d6:	bd90      	pop	{r4, r7, pc}

080006d8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_I2C1_Init+0x74>)
 80006de:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <MX_I2C1_Init+0x78>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_I2C1_Init+0x74>)
 80006e4:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <MX_I2C1_Init+0x7c>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_I2C1_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_I2C1_Init+0x74>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_I2C1_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_I2C1_Init+0x74>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2C1_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_I2C1_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2C1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2C1_Init+0x74>)
 8000714:	0018      	movs	r0, r3
 8000716:	f001 f801 	bl	800171c <HAL_I2C_Init>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_I2C1_Init+0x4a>
    Error_Handler();
 800071e:	f000 fb05 	bl	8000d2c <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_I2C1_Init+0x74>)
 8000724:	2100      	movs	r1, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f001 fc58 	bl	8001fdc <HAL_I2CEx_ConfigAnalogFilter>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C1_Init+0x5c>
    Error_Handler();
 8000730:	f000 fafc 	bl	8000d2c <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <MX_I2C1_Init+0x74>)
 8000736:	2100      	movs	r1, #0
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fc9b 	bl	8002074 <HAL_I2CEx_ConfigDigitalFilter>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <MX_I2C1_Init+0x6e>
    Error_Handler();
 8000742:	f000 faf3 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000028 	.word	0x20000028
 8000750:	40005400 	.word	0x40005400
 8000754:	2000090e 	.word	0x2000090e

08000758 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_TIM16_Init+0x44>)
 800075e:	4a10      	ldr	r2, [pc, #64]	; (80007a0 <MX_TIM16_Init+0x48>)
 8000760:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000 - 1;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_TIM16_Init+0x44>)
 8000764:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <MX_TIM16_Init+0x4c>)
 8000766:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_TIM16_Init+0x44>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000 - 1;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_TIM16_Init+0x44>)
 8000770:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <MX_TIM16_Init+0x50>)
 8000772:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_TIM16_Init+0x44>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_TIM16_Init+0x44>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_TIM16_Init+0x44>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <MX_TIM16_Init+0x44>)
 8000788:	0018      	movs	r0, r3
 800078a:	f002 f9eb 	bl	8002b64 <HAL_TIM_Base_Init>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM16_Init+0x3e>
    Error_Handler();
 8000792:	f000 facb 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	2000007c 	.word	0x2000007c
 80007a0:	40014400 	.word	0x40014400
 80007a4:	0000bb7f 	.word	0x0000bb7f
 80007a8:	000003e7 	.word	0x000003e7

080007ac <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <MX_USART1_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007b8:	2296      	movs	r2, #150	; 0x96
 80007ba:	0212      	lsls	r2, r2, #8
 80007bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK) {
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 fc0f 	bl	8003014 <HAL_UART_Init>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART1_UART_Init+0x52>
    Error_Handler();
 80007fa:	f000 fa97 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000c4 	.word	0x200000c4
 8000808:	40013800 	.word	0x40013800

0800080c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	240c      	movs	r4, #12
 8000814:	193b      	adds	r3, r7, r4
 8000816:	0018      	movs	r0, r3
 8000818:	2314      	movs	r3, #20
 800081a:	001a      	movs	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	f003 fe53 	bl	80044c8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000822:	4b63      	ldr	r3, [pc, #396]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 8000824:	695a      	ldr	r2, [r3, #20]
 8000826:	4b62      	ldr	r3, [pc, #392]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 8000828:	2180      	movs	r1, #128	; 0x80
 800082a:	03c9      	lsls	r1, r1, #15
 800082c:	430a      	orrs	r2, r1
 800082e:	615a      	str	r2, [r3, #20]
 8000830:	4b5f      	ldr	r3, [pc, #380]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 8000832:	695a      	ldr	r2, [r3, #20]
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	03db      	lsls	r3, r3, #15
 8000838:	4013      	ands	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b5c      	ldr	r3, [pc, #368]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 8000840:	695a      	ldr	r2, [r3, #20]
 8000842:	4b5b      	ldr	r3, [pc, #364]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 8000844:	2180      	movs	r1, #128	; 0x80
 8000846:	0289      	lsls	r1, r1, #10
 8000848:	430a      	orrs	r2, r1
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	4b58      	ldr	r3, [pc, #352]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 800084e:	695a      	ldr	r2, [r3, #20]
 8000850:	2380      	movs	r3, #128	; 0x80
 8000852:	029b      	lsls	r3, r3, #10
 8000854:	4013      	ands	r3, r2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b55      	ldr	r3, [pc, #340]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 800085c:	695a      	ldr	r2, [r3, #20]
 800085e:	4b54      	ldr	r3, [pc, #336]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	02c9      	lsls	r1, r1, #11
 8000864:	430a      	orrs	r2, r1
 8000866:	615a      	str	r2, [r3, #20]
 8000868:	4b51      	ldr	r3, [pc, #324]	; (80009b0 <MX_GPIO_Init+0x1a4>)
 800086a:	695a      	ldr	r2, [r3, #20]
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	02db      	lsls	r3, r3, #11
 8000870:	4013      	ands	r3, r2
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(
 8000876:	4b4f      	ldr	r3, [pc, #316]	; (80009b4 <MX_GPIO_Init+0x1a8>)
 8000878:	2200      	movs	r2, #0
 800087a:	213a      	movs	r1, #58	; 0x3a
 800087c:	0018      	movs	r0, r3
 800087e:	f000 fef8 	bl	8001672 <HAL_GPIO_WritePin>
      GPIOB,
      USR_TEMP_SENS_Pin | USR_LED_GREEN_Pin | USR_RLY_4_Pin | USR_RLY_3_Pin,
      GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USR_RLY_1_Pin | USR_RLY_2_Pin, GPIO_PIN_RESET);
 8000882:	2390      	movs	r3, #144	; 0x90
 8000884:	0119      	lsls	r1, r3, #4
 8000886:	2390      	movs	r3, #144	; 0x90
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	2200      	movs	r2, #0
 800088c:	0018      	movs	r0, r3
 800088e:	f000 fef0 	bl	8001672 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_BTN_2_Pin USR_BTN_3_Pin */
  GPIO_InitStruct.Pin = USR_BTN_2_Pin | USR_BTN_3_Pin;
 8000892:	193b      	adds	r3, r7, r4
 8000894:	2281      	movs	r2, #129	; 0x81
 8000896:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000898:	193b      	adds	r3, r7, r4
 800089a:	22c4      	movs	r2, #196	; 0xc4
 800089c:	0392      	lsls	r2, r2, #14
 800089e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	2201      	movs	r2, #1
 80008a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	4a42      	ldr	r2, [pc, #264]	; (80009b4 <MX_GPIO_Init+0x1a8>)
 80008aa:	0019      	movs	r1, r3
 80008ac:	0010      	movs	r0, r2
 80008ae:	f000 fd5b 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_TEMP_SENS_Pin */
  GPIO_InitStruct.Pin = USR_TEMP_SENS_Pin;
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	2202      	movs	r2, #2
 80008b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	2201      	movs	r2, #1
 80008bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	2201      	movs	r2, #1
 80008c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	2203      	movs	r2, #3
 80008c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USR_TEMP_SENS_GPIO_Port, &GPIO_InitStruct);
 80008ca:	193b      	adds	r3, r7, r4
 80008cc:	4a39      	ldr	r2, [pc, #228]	; (80009b4 <MX_GPIO_Init+0x1a8>)
 80008ce:	0019      	movs	r1, r3
 80008d0:	0010      	movs	r0, r2
 80008d2:	f000 fd49 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_RLY_1_Pin USR_RLY_2_Pin */
  GPIO_InitStruct.Pin = USR_RLY_1_Pin | USR_RLY_2_Pin;
 80008d6:	0021      	movs	r1, r4
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2290      	movs	r2, #144	; 0x90
 80008dc:	0112      	lsls	r2, r2, #4
 80008de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	000c      	movs	r4, r1
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	2201      	movs	r2, #1
 80008e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	193a      	adds	r2, r7, r4
 80008f6:	2390      	movs	r3, #144	; 0x90
 80008f8:	05db      	lsls	r3, r3, #23
 80008fa:	0011      	movs	r1, r2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fd33 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_BTN_1_Pin */
  GPIO_InitStruct.Pin = USR_BTN_1_Pin;
 8000902:	193b      	adds	r3, r7, r4
 8000904:	2280      	movs	r2, #128	; 0x80
 8000906:	0152      	lsls	r2, r2, #5
 8000908:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800090a:	193b      	adds	r3, r7, r4
 800090c:	22c4      	movs	r2, #196	; 0xc4
 800090e:	0392      	lsls	r2, r2, #14
 8000910:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000912:	193b      	adds	r3, r7, r4
 8000914:	2201      	movs	r2, #1
 8000916:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USR_BTN_1_GPIO_Port, &GPIO_InitStruct);
 8000918:	193a      	adds	r2, r7, r4
 800091a:	2390      	movs	r3, #144	; 0x90
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	0011      	movs	r1, r2
 8000920:	0018      	movs	r0, r3
 8000922:	f000 fd21 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_LED_GREEN_Pin USR_RLY_4_Pin USR_RLY_3_Pin */
  GPIO_InitStruct.Pin = USR_LED_GREEN_Pin | USR_RLY_4_Pin | USR_RLY_3_Pin;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2238      	movs	r2, #56	; 0x38
 800092a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2201      	movs	r2, #1
 8000930:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093e:	193b      	adds	r3, r7, r4
 8000940:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <MX_GPIO_Init+0x1a8>)
 8000942:	0019      	movs	r1, r3
 8000944:	0010      	movs	r0, r2
 8000946:	f000 fd0f 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_WIND_SENS_Pin */
  GPIO_InitStruct.Pin = USR_WIND_SENS_Pin;
 800094a:	0021      	movs	r1, r4
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2240      	movs	r2, #64	; 0x40
 8000950:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2201      	movs	r2, #1
 800095c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USR_WIND_SENS_GPIO_Port, &GPIO_InitStruct);
 800095e:	187b      	adds	r3, r7, r1
 8000960:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <MX_GPIO_Init+0x1a8>)
 8000962:	0019      	movs	r1, r3
 8000964:	0010      	movs	r0, r2
 8000966:	f000 fcff 	bl	8001368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2005      	movs	r0, #5
 8000970:	f000 fc4a 	bl	8001208 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000974:	2005      	movs	r0, #5
 8000976:	f000 fc5c 	bl	8001232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	2007      	movs	r0, #7
 8000980:	f000 fc42 	bl	8001208 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000984:	2007      	movs	r0, #7
 8000986:	f000 fc54 	bl	8001232 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOB, USR_RLY_4_Pin | USR_RLY_3_Pin, GPIO_PIN_SET);
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <MX_GPIO_Init+0x1a8>)
 800098c:	2201      	movs	r2, #1
 800098e:	2130      	movs	r1, #48	; 0x30
 8000990:	0018      	movs	r0, r3
 8000992:	f000 fe6e 	bl	8001672 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, USR_RLY_1_Pin | USR_RLY_2_Pin, GPIO_PIN_SET);
 8000996:	2390      	movs	r3, #144	; 0x90
 8000998:	0119      	lsls	r1, r3, #4
 800099a:	2390      	movs	r3, #144	; 0x90
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	2201      	movs	r2, #1
 80009a0:	0018      	movs	r0, r3
 80009a2:	f000 fe66 	bl	8001672 <HAL_GPIO_WritePin>
  /* USER CODE END MX_GPIO_Init_2 */
}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b009      	add	sp, #36	; 0x24
 80009ac:	bd90      	pop	{r4, r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	40021000 	.word	0x40021000
 80009b4:	48000400 	.word	0x48000400

080009b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if (htim == &htim16) {
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d10a      	bne.n	80009de <HAL_TIM_PeriodElapsedCallback+0x26>
    HAL_GPIO_TogglePin(GPIOB, USR_LED_GREEN_Pin);
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80009ca:	2108      	movs	r1, #8
 80009cc:	0018      	movs	r0, r3
 80009ce:	f000 fe6d 	bl	80016ac <HAL_GPIO_TogglePin>
    Get_Time(&ds3231_data, &hi2c1);
 80009d2:	4a07      	ldr	r2, [pc, #28]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009d6:	0011      	movs	r1, r2
 80009d8:	0018      	movs	r0, r3
 80009da:	f7ff fd24 	bl	8000426 <Get_Time>
  }
}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	2000007c 	.word	0x2000007c
 80009ec:	48000400 	.word	0x48000400
 80009f0:	20000028 	.word	0x20000028
 80009f4:	2000014c 	.word	0x2000014c

080009f8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	0002      	movs	r2, r0
 8000a00:	1dbb      	adds	r3, r7, #6
 8000a02:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == USR_BTN_1_Pin) {
 8000a04:	1dbb      	adds	r3, r7, #6
 8000a06:	881a      	ldrh	r2, [r3, #0]
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	015b      	lsls	r3, r3, #5
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d11e      	bne.n	8000a4e <HAL_GPIO_EXTI_Callback+0x56>
    switch (HAL_GPIO_ReadPin(USR_BTN_1_GPIO_Port, USR_BTN_1_Pin)) {
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	015a      	lsls	r2, r3, #5
 8000a14:	2390      	movs	r3, #144	; 0x90
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	0011      	movs	r1, r2
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 fe0c 	bl	8001638 <HAL_GPIO_ReadPin>
 8000a20:	1e03      	subs	r3, r0, #0
 8000a22:	d002      	beq.n	8000a2a <HAL_GPIO_EXTI_Callback+0x32>
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d009      	beq.n	8000a3c <HAL_GPIO_EXTI_Callback+0x44>
        break;
      case GPIO_PIN_SET:
        HAL_GPIO_WritePin(GPIOA, USR_RLY_1_Pin, GPIO_PIN_SET);
        break;
      default:
        break;
 8000a28:	e011      	b.n	8000a4e <HAL_GPIO_EXTI_Callback+0x56>
        HAL_GPIO_WritePin(GPIOA, USR_RLY_1_Pin, GPIO_PIN_RESET);
 8000a2a:	2380      	movs	r3, #128	; 0x80
 8000a2c:	0059      	lsls	r1, r3, #1
 8000a2e:	2390      	movs	r3, #144	; 0x90
 8000a30:	05db      	lsls	r3, r3, #23
 8000a32:	2200      	movs	r2, #0
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 fe1c 	bl	8001672 <HAL_GPIO_WritePin>
        break;
 8000a3a:	e008      	b.n	8000a4e <HAL_GPIO_EXTI_Callback+0x56>
        HAL_GPIO_WritePin(GPIOA, USR_RLY_1_Pin, GPIO_PIN_SET);
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	0059      	lsls	r1, r3, #1
 8000a40:	2390      	movs	r3, #144	; 0x90
 8000a42:	05db      	lsls	r3, r3, #23
 8000a44:	2201      	movs	r2, #1
 8000a46:	0018      	movs	r0, r3
 8000a48:	f000 fe13 	bl	8001672 <HAL_GPIO_WritePin>
        break;
 8000a4c:	46c0      	nop			; (mov r8, r8)
    }
  }
  if (GPIO_Pin == USR_BTN_2_Pin) {
 8000a4e:	1dbb      	adds	r3, r7, #6
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d11b      	bne.n	8000a8e <HAL_GPIO_EXTI_Callback+0x96>
    switch (HAL_GPIO_ReadPin(USR_BTN_2_GPIO_Port, USR_BTN_2_Pin)) {
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f000 fdec 	bl	8001638 <HAL_GPIO_ReadPin>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d002      	beq.n	8000a6a <HAL_GPIO_EXTI_Callback+0x72>
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d009      	beq.n	8000a7c <HAL_GPIO_EXTI_Callback+0x84>
        break;
      case GPIO_PIN_SET:
        HAL_GPIO_WritePin(GPIOA, USR_RLY_2_Pin, GPIO_PIN_SET);
        break;
      default:
        break;
 8000a68:	e011      	b.n	8000a8e <HAL_GPIO_EXTI_Callback+0x96>
        HAL_GPIO_WritePin(GPIOA, USR_RLY_2_Pin, GPIO_PIN_RESET);
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	0119      	lsls	r1, r3, #4
 8000a6e:	2390      	movs	r3, #144	; 0x90
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	2200      	movs	r2, #0
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 fdfc 	bl	8001672 <HAL_GPIO_WritePin>
        break;
 8000a7a:	e008      	b.n	8000a8e <HAL_GPIO_EXTI_Callback+0x96>
        HAL_GPIO_WritePin(GPIOA, USR_RLY_2_Pin, GPIO_PIN_SET);
 8000a7c:	2380      	movs	r3, #128	; 0x80
 8000a7e:	0119      	lsls	r1, r3, #4
 8000a80:	2390      	movs	r3, #144	; 0x90
 8000a82:	05db      	lsls	r3, r3, #23
 8000a84:	2201      	movs	r2, #1
 8000a86:	0018      	movs	r0, r3
 8000a88:	f000 fdf3 	bl	8001672 <HAL_GPIO_WritePin>
        break;
 8000a8c:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b002      	add	sp, #8
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	48000400 	.word	0x48000400

08000a9c <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
  char msg[15];
  HAL_UART_IRQHandler(&huart1);
 8000aa2:	4b97      	ldr	r3, [pc, #604]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f002 fc01 	bl	80032ac <HAL_UART_IRQHandler>

  switch (recvd_data) {
 8000aaa:	4b96      	ldr	r3, [pc, #600]	; (8000d04 <USART1_IRQHandler+0x268>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b74      	cmp	r3, #116	; 0x74
 8000ab0:	d021      	beq.n	8000af6 <USART1_IRQHandler+0x5a>
 8000ab2:	dd00      	ble.n	8000ab6 <USART1_IRQHandler+0x1a>
 8000ab4:	e118      	b.n	8000ce8 <USART1_IRQHandler+0x24c>
 8000ab6:	2b6c      	cmp	r3, #108	; 0x6c
 8000ab8:	d017      	beq.n	8000aea <USART1_IRQHandler+0x4e>
 8000aba:	dd00      	ble.n	8000abe <USART1_IRQHandler+0x22>
 8000abc:	e114      	b.n	8000ce8 <USART1_IRQHandler+0x24c>
 8000abe:	2b64      	cmp	r3, #100	; 0x64
 8000ac0:	d100      	bne.n	8000ac4 <USART1_IRQHandler+0x28>
 8000ac2:	e085      	b.n	8000bd0 <USART1_IRQHandler+0x134>
 8000ac4:	dd00      	ble.n	8000ac8 <USART1_IRQHandler+0x2c>
 8000ac6:	e10f      	b.n	8000ce8 <USART1_IRQHandler+0x24c>
 8000ac8:	2b34      	cmp	r3, #52	; 0x34
 8000aca:	d100      	bne.n	8000ace <USART1_IRQHandler+0x32>
 8000acc:	e106      	b.n	8000cdc <USART1_IRQHandler+0x240>
 8000ace:	dd00      	ble.n	8000ad2 <USART1_IRQHandler+0x36>
 8000ad0:	e10a      	b.n	8000ce8 <USART1_IRQHandler+0x24c>
 8000ad2:	2b33      	cmp	r3, #51	; 0x33
 8000ad4:	d100      	bne.n	8000ad8 <USART1_IRQHandler+0x3c>
 8000ad6:	e0fb      	b.n	8000cd0 <USART1_IRQHandler+0x234>
 8000ad8:	dd00      	ble.n	8000adc <USART1_IRQHandler+0x40>
 8000ada:	e105      	b.n	8000ce8 <USART1_IRQHandler+0x24c>
 8000adc:	2b31      	cmp	r3, #49	; 0x31
 8000ade:	d100      	bne.n	8000ae2 <USART1_IRQHandler+0x46>
 8000ae0:	e0e4      	b.n	8000cac <USART1_IRQHandler+0x210>
 8000ae2:	2b32      	cmp	r3, #50	; 0x32
 8000ae4:	d100      	bne.n	8000ae8 <USART1_IRQHandler+0x4c>
 8000ae6:	e0ea      	b.n	8000cbe <USART1_IRQHandler+0x222>
      break;
    case '4':
      HAL_GPIO_TogglePin(GPIOB, USR_RLY_4_Pin);
      break;
    default:
      break;
 8000ae8:	e0fe      	b.n	8000ce8 <USART1_IRQHandler+0x24c>
      HAL_GPIO_TogglePin(GPIOB, USR_LED_GREEN_Pin);
 8000aea:	4b87      	ldr	r3, [pc, #540]	; (8000d08 <USART1_IRQHandler+0x26c>)
 8000aec:	2108      	movs	r1, #8
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 fddc 	bl	80016ac <HAL_GPIO_TogglePin>
      break;
 8000af4:	e0f9      	b.n	8000cea <USART1_IRQHandler+0x24e>
      HAL_UART_Transmit(&huart1, (uint8_t*)"time:\n\r", 7, 1000);
 8000af6:	23fa      	movs	r3, #250	; 0xfa
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	4984      	ldr	r1, [pc, #528]	; (8000d0c <USART1_IRQHandler+0x270>)
 8000afc:	4880      	ldr	r0, [pc, #512]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000afe:	2207      	movs	r2, #7
 8000b00:	f002 fadc 	bl	80030bc <HAL_UART_Transmit>
      if (Get_Time(&ds3231_data, &hi2c1) == 0xFF) {
 8000b04:	4a82      	ldr	r2, [pc, #520]	; (8000d10 <USART1_IRQHandler+0x274>)
 8000b06:	4b83      	ldr	r3, [pc, #524]	; (8000d14 <USART1_IRQHandler+0x278>)
 8000b08:	0011      	movs	r1, r2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff fc8b 	bl	8000426 <Get_Time>
 8000b10:	0003      	movs	r3, r0
 8000b12:	2bff      	cmp	r3, #255	; 0xff
 8000b14:	d107      	bne.n	8000b26 <USART1_IRQHandler+0x8a>
        HAL_UART_Transmit(&huart1, (uint8_t*)"error!\n\r", 8, 1000);
 8000b16:	23fa      	movs	r3, #250	; 0xfa
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	497f      	ldr	r1, [pc, #508]	; (8000d18 <USART1_IRQHandler+0x27c>)
 8000b1c:	4878      	ldr	r0, [pc, #480]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000b1e:	2208      	movs	r2, #8
 8000b20:	f002 facc 	bl	80030bc <HAL_UART_Transmit>
      break;
 8000b24:	e0e1      	b.n	8000cea <USART1_IRQHandler+0x24e>
        memset(msg, 0, 15);
 8000b26:	003b      	movs	r3, r7
 8000b28:	220f      	movs	r2, #15
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f003 fccb 	bl	80044c8 <memset>
        itoa(ds3231_data.hour, msg, 10);
 8000b32:	4b78      	ldr	r3, [pc, #480]	; (8000d14 <USART1_IRQHandler+0x278>)
 8000b34:	789b      	ldrb	r3, [r3, #2]
 8000b36:	0018      	movs	r0, r3
 8000b38:	003b      	movs	r3, r7
 8000b3a:	220a      	movs	r2, #10
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	f7ff fcef 	bl	8000520 <itoa>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg), 1000);
 8000b42:	23fa      	movs	r3, #250	; 0xfa
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	0039      	movs	r1, r7
 8000b48:	486d      	ldr	r0, [pc, #436]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000b4a:	220f      	movs	r2, #15
 8000b4c:	f002 fab6 	bl	80030bc <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)":", 1, 1000);
 8000b50:	23fa      	movs	r3, #250	; 0xfa
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	4971      	ldr	r1, [pc, #452]	; (8000d1c <USART1_IRQHandler+0x280>)
 8000b56:	486a      	ldr	r0, [pc, #424]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f002 faaf 	bl	80030bc <HAL_UART_Transmit>
        memset(msg, 0, 15);
 8000b5e:	003b      	movs	r3, r7
 8000b60:	220f      	movs	r2, #15
 8000b62:	2100      	movs	r1, #0
 8000b64:	0018      	movs	r0, r3
 8000b66:	f003 fcaf 	bl	80044c8 <memset>
        itoa(ds3231_data.min, msg, 10);
 8000b6a:	4b6a      	ldr	r3, [pc, #424]	; (8000d14 <USART1_IRQHandler+0x278>)
 8000b6c:	785b      	ldrb	r3, [r3, #1]
 8000b6e:	0018      	movs	r0, r3
 8000b70:	003b      	movs	r3, r7
 8000b72:	220a      	movs	r2, #10
 8000b74:	0019      	movs	r1, r3
 8000b76:	f7ff fcd3 	bl	8000520 <itoa>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg), 1000);
 8000b7a:	23fa      	movs	r3, #250	; 0xfa
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	0039      	movs	r1, r7
 8000b80:	485f      	ldr	r0, [pc, #380]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000b82:	220f      	movs	r2, #15
 8000b84:	f002 fa9a 	bl	80030bc <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)":", 1, 1000);
 8000b88:	23fa      	movs	r3, #250	; 0xfa
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	4963      	ldr	r1, [pc, #396]	; (8000d1c <USART1_IRQHandler+0x280>)
 8000b8e:	485c      	ldr	r0, [pc, #368]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	f002 fa93 	bl	80030bc <HAL_UART_Transmit>
        memset(msg, 0, 15);
 8000b96:	003b      	movs	r3, r7
 8000b98:	220f      	movs	r2, #15
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f003 fc93 	bl	80044c8 <memset>
        itoa(ds3231_data.sec, msg, 10);
 8000ba2:	4b5c      	ldr	r3, [pc, #368]	; (8000d14 <USART1_IRQHandler+0x278>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	003b      	movs	r3, r7
 8000baa:	220a      	movs	r2, #10
 8000bac:	0019      	movs	r1, r3
 8000bae:	f7ff fcb7 	bl	8000520 <itoa>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg), 1000);
 8000bb2:	23fa      	movs	r3, #250	; 0xfa
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	0039      	movs	r1, r7
 8000bb8:	4851      	ldr	r0, [pc, #324]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000bba:	220f      	movs	r2, #15
 8000bbc:	f002 fa7e 	bl	80030bc <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r", 2, 1000);
 8000bc0:	23fa      	movs	r3, #250	; 0xfa
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4956      	ldr	r1, [pc, #344]	; (8000d20 <USART1_IRQHandler+0x284>)
 8000bc6:	484e      	ldr	r0, [pc, #312]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000bc8:	2202      	movs	r2, #2
 8000bca:	f002 fa77 	bl	80030bc <HAL_UART_Transmit>
      break;
 8000bce:	e08c      	b.n	8000cea <USART1_IRQHandler+0x24e>
      HAL_UART_Transmit(&huart1, (uint8_t*)"date:\n\r", 7, 1000);
 8000bd0:	23fa      	movs	r3, #250	; 0xfa
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4953      	ldr	r1, [pc, #332]	; (8000d24 <USART1_IRQHandler+0x288>)
 8000bd6:	484a      	ldr	r0, [pc, #296]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	f002 fa6f 	bl	80030bc <HAL_UART_Transmit>
      if (Get_Time(&ds3231_data, &hi2c1) == 0xFF) {
 8000bde:	4a4c      	ldr	r2, [pc, #304]	; (8000d10 <USART1_IRQHandler+0x274>)
 8000be0:	4b4c      	ldr	r3, [pc, #304]	; (8000d14 <USART1_IRQHandler+0x278>)
 8000be2:	0011      	movs	r1, r2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f7ff fc1e 	bl	8000426 <Get_Time>
 8000bea:	0003      	movs	r3, r0
 8000bec:	2bff      	cmp	r3, #255	; 0xff
 8000bee:	d107      	bne.n	8000c00 <USART1_IRQHandler+0x164>
        HAL_UART_Transmit(&huart1, (uint8_t*)"error!\n\r", 8, 1000);
 8000bf0:	23fa      	movs	r3, #250	; 0xfa
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4948      	ldr	r1, [pc, #288]	; (8000d18 <USART1_IRQHandler+0x27c>)
 8000bf6:	4842      	ldr	r0, [pc, #264]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000bf8:	2208      	movs	r2, #8
 8000bfa:	f002 fa5f 	bl	80030bc <HAL_UART_Transmit>
      break;
 8000bfe:	e074      	b.n	8000cea <USART1_IRQHandler+0x24e>
        memset(msg, 0, 15);
 8000c00:	003b      	movs	r3, r7
 8000c02:	220f      	movs	r2, #15
 8000c04:	2100      	movs	r1, #0
 8000c06:	0018      	movs	r0, r3
 8000c08:	f003 fc5e 	bl	80044c8 <memset>
        itoa(ds3231_data.year, msg, 10);
 8000c0c:	4b41      	ldr	r3, [pc, #260]	; (8000d14 <USART1_IRQHandler+0x278>)
 8000c0e:	2206      	movs	r2, #6
 8000c10:	5e9b      	ldrsh	r3, [r3, r2]
 8000c12:	0018      	movs	r0, r3
 8000c14:	003b      	movs	r3, r7
 8000c16:	220a      	movs	r2, #10
 8000c18:	0019      	movs	r1, r3
 8000c1a:	f7ff fc81 	bl	8000520 <itoa>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg), 1000);
 8000c1e:	23fa      	movs	r3, #250	; 0xfa
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	0039      	movs	r1, r7
 8000c24:	4836      	ldr	r0, [pc, #216]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000c26:	220f      	movs	r2, #15
 8000c28:	f002 fa48 	bl	80030bc <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)"-", 1, 1000);
 8000c2c:	23fa      	movs	r3, #250	; 0xfa
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	493d      	ldr	r1, [pc, #244]	; (8000d28 <USART1_IRQHandler+0x28c>)
 8000c32:	4833      	ldr	r0, [pc, #204]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	f002 fa41 	bl	80030bc <HAL_UART_Transmit>
        memset(msg, 0, 15);
 8000c3a:	003b      	movs	r3, r7
 8000c3c:	220f      	movs	r2, #15
 8000c3e:	2100      	movs	r1, #0
 8000c40:	0018      	movs	r0, r3
 8000c42:	f003 fc41 	bl	80044c8 <memset>
        itoa(ds3231_data.mon, msg, 10);
 8000c46:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <USART1_IRQHandler+0x278>)
 8000c48:	791b      	ldrb	r3, [r3, #4]
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	003b      	movs	r3, r7
 8000c4e:	220a      	movs	r2, #10
 8000c50:	0019      	movs	r1, r3
 8000c52:	f7ff fc65 	bl	8000520 <itoa>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg), 1000);
 8000c56:	23fa      	movs	r3, #250	; 0xfa
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	0039      	movs	r1, r7
 8000c5c:	4828      	ldr	r0, [pc, #160]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000c5e:	220f      	movs	r2, #15
 8000c60:	f002 fa2c 	bl	80030bc <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)"-", 1, 1000);
 8000c64:	23fa      	movs	r3, #250	; 0xfa
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	492f      	ldr	r1, [pc, #188]	; (8000d28 <USART1_IRQHandler+0x28c>)
 8000c6a:	4825      	ldr	r0, [pc, #148]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f002 fa25 	bl	80030bc <HAL_UART_Transmit>
        memset(msg, 0, 15);
 8000c72:	003b      	movs	r3, r7
 8000c74:	220f      	movs	r2, #15
 8000c76:	2100      	movs	r1, #0
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f003 fc25 	bl	80044c8 <memset>
        itoa(ds3231_data.mday, msg, 10);
 8000c7e:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <USART1_IRQHandler+0x278>)
 8000c80:	78db      	ldrb	r3, [r3, #3]
 8000c82:	0018      	movs	r0, r3
 8000c84:	003b      	movs	r3, r7
 8000c86:	220a      	movs	r2, #10
 8000c88:	0019      	movs	r1, r3
 8000c8a:	f7ff fc49 	bl	8000520 <itoa>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, sizeof(msg), 1000);
 8000c8e:	23fa      	movs	r3, #250	; 0xfa
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	0039      	movs	r1, r7
 8000c94:	481a      	ldr	r0, [pc, #104]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000c96:	220f      	movs	r2, #15
 8000c98:	f002 fa10 	bl	80030bc <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart1, (uint8_t*)"\n\r", 2, 1000);
 8000c9c:	23fa      	movs	r3, #250	; 0xfa
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	491f      	ldr	r1, [pc, #124]	; (8000d20 <USART1_IRQHandler+0x284>)
 8000ca2:	4817      	ldr	r0, [pc, #92]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	f002 fa09 	bl	80030bc <HAL_UART_Transmit>
      break;
 8000caa:	e01e      	b.n	8000cea <USART1_IRQHandler+0x24e>
      HAL_GPIO_TogglePin(GPIOA, USR_RLY_1_Pin);
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	005a      	lsls	r2, r3, #1
 8000cb0:	2390      	movs	r3, #144	; 0x90
 8000cb2:	05db      	lsls	r3, r3, #23
 8000cb4:	0011      	movs	r1, r2
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f000 fcf8 	bl	80016ac <HAL_GPIO_TogglePin>
      break;
 8000cbc:	e015      	b.n	8000cea <USART1_IRQHandler+0x24e>
      HAL_GPIO_TogglePin(GPIOA, USR_RLY_2_Pin);
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	011a      	lsls	r2, r3, #4
 8000cc2:	2390      	movs	r3, #144	; 0x90
 8000cc4:	05db      	lsls	r3, r3, #23
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f000 fcef 	bl	80016ac <HAL_GPIO_TogglePin>
      break;
 8000cce:	e00c      	b.n	8000cea <USART1_IRQHandler+0x24e>
      HAL_GPIO_TogglePin(GPIOB, USR_RLY_3_Pin);
 8000cd0:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <USART1_IRQHandler+0x26c>)
 8000cd2:	2120      	movs	r1, #32
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f000 fce9 	bl	80016ac <HAL_GPIO_TogglePin>
      break;
 8000cda:	e006      	b.n	8000cea <USART1_IRQHandler+0x24e>
      HAL_GPIO_TogglePin(GPIOB, USR_RLY_4_Pin);
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <USART1_IRQHandler+0x26c>)
 8000cde:	2110      	movs	r1, #16
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f000 fce3 	bl	80016ac <HAL_GPIO_TogglePin>
      break;
 8000ce6:	e000      	b.n	8000cea <USART1_IRQHandler+0x24e>
      break;
 8000ce8:	46c0      	nop			; (mov r8, r8)
  }

  HAL_UART_Receive_IT(&huart1, &recvd_data, 1);
 8000cea:	4906      	ldr	r1, [pc, #24]	; (8000d04 <USART1_IRQHandler+0x268>)
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <USART1_IRQHandler+0x264>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f002 fa83 	bl	80031fc <HAL_UART_Receive_IT>
}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b004      	add	sp, #16
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	200000c4 	.word	0x200000c4
 8000d04:	20000158 	.word	0x20000158
 8000d08:	48000400 	.word	0x48000400
 8000d0c:	08004580 	.word	0x08004580
 8000d10:	20000028 	.word	0x20000028
 8000d14:	2000014c 	.word	0x2000014c
 8000d18:	08004588 	.word	0x08004588
 8000d1c:	08004594 	.word	0x08004594
 8000d20:	08004598 	.word	0x08004598
 8000d24:	0800459c 	.word	0x0800459c
 8000d28:	080045a4 	.word	0x080045a4

08000d2c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>
	...

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_MspInit+0x44>)
 8000d40:	699a      	ldr	r2, [r3, #24]
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_MspInit+0x44>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	430a      	orrs	r2, r1
 8000d48:	619a      	str	r2, [r3, #24]
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <HAL_MspInit+0x44>)
 8000d4c:	699b      	ldr	r3, [r3, #24]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	4013      	ands	r3, r2
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_MspInit+0x44>)
 8000d58:	69da      	ldr	r2, [r3, #28]
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_MspInit+0x44>)
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	0549      	lsls	r1, r1, #21
 8000d60:	430a      	orrs	r2, r1
 8000d62:	61da      	str	r2, [r3, #28]
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_MspInit+0x44>)
 8000d66:	69da      	ldr	r2, [r3, #28]
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	055b      	lsls	r3, r3, #21
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	40021000 	.word	0x40021000

08000d80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b08b      	sub	sp, #44	; 0x2c
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	2414      	movs	r4, #20
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	2314      	movs	r3, #20
 8000d90:	001a      	movs	r2, r3
 8000d92:	2100      	movs	r1, #0
 8000d94:	f003 fb98 	bl	80044c8 <memset>
  if(hi2c->Instance==I2C1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a1d      	ldr	r2, [pc, #116]	; (8000e14 <HAL_I2C_MspInit+0x94>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d133      	bne.n	8000e0a <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <HAL_I2C_MspInit+0x98>)
 8000da4:	695a      	ldr	r2, [r3, #20]
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <HAL_I2C_MspInit+0x98>)
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	0289      	lsls	r1, r1, #10
 8000dac:	430a      	orrs	r2, r1
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_I2C_MspInit+0x98>)
 8000db2:	695a      	ldr	r2, [r3, #20]
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	029b      	lsls	r3, r3, #10
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	22c0      	movs	r2, #192	; 0xc0
 8000dc2:	00d2      	lsls	r2, r2, #3
 8000dc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc6:	0021      	movs	r1, r4
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2212      	movs	r2, #18
 8000dcc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2204      	movs	r2, #4
 8000dde:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	187a      	adds	r2, r7, r1
 8000de2:	2390      	movs	r3, #144	; 0x90
 8000de4:	05db      	lsls	r3, r3, #23
 8000de6:	0011      	movs	r1, r2
 8000de8:	0018      	movs	r0, r3
 8000dea:	f000 fabd 	bl	8001368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_I2C_MspInit+0x98>)
 8000df0:	69da      	ldr	r2, [r3, #28]
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <HAL_I2C_MspInit+0x98>)
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	0389      	lsls	r1, r1, #14
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	61da      	str	r2, [r3, #28]
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_I2C_MspInit+0x98>)
 8000dfe:	69da      	ldr	r2, [r3, #28]
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	039b      	lsls	r3, r3, #14
 8000e04:	4013      	ands	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b00b      	add	sp, #44	; 0x2c
 8000e10:	bd90      	pop	{r4, r7, pc}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	40005400 	.word	0x40005400
 8000e18:	40021000 	.word	0x40021000

08000e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <HAL_TIM_Base_MspInit+0x48>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d115      	bne.n	8000e5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_TIM_Base_MspInit+0x4c>)
 8000e30:	699a      	ldr	r2, [r3, #24]
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <HAL_TIM_Base_MspInit+0x4c>)
 8000e34:	2180      	movs	r1, #128	; 0x80
 8000e36:	0289      	lsls	r1, r1, #10
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	619a      	str	r2, [r3, #24]
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_TIM_Base_MspInit+0x4c>)
 8000e3e:	699a      	ldr	r2, [r3, #24]
 8000e40:	2380      	movs	r3, #128	; 0x80
 8000e42:	029b      	lsls	r3, r3, #10
 8000e44:	4013      	ands	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2015      	movs	r0, #21
 8000e50:	f000 f9da 	bl	8001208 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000e54:	2015      	movs	r0, #21
 8000e56:	f000 f9ec 	bl	8001232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b004      	add	sp, #16
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	40014400 	.word	0x40014400
 8000e68:	40021000 	.word	0x40021000

08000e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b08b      	sub	sp, #44	; 0x2c
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	2414      	movs	r4, #20
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	0018      	movs	r0, r3
 8000e7a:	2314      	movs	r3, #20
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f003 fb22 	bl	80044c8 <memset>
  if(huart->Instance==USART1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a20      	ldr	r2, [pc, #128]	; (8000f0c <HAL_UART_MspInit+0xa0>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d13a      	bne.n	8000f04 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <HAL_UART_MspInit+0xa4>)
 8000e90:	699a      	ldr	r2, [r3, #24]
 8000e92:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <HAL_UART_MspInit+0xa4>)
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	01c9      	lsls	r1, r1, #7
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	619a      	str	r2, [r3, #24]
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_UART_MspInit+0xa4>)
 8000e9e:	699a      	ldr	r2, [r3, #24]
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	01db      	lsls	r3, r3, #7
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <HAL_UART_MspInit+0xa4>)
 8000eac:	695a      	ldr	r2, [r3, #20]
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_UART_MspInit+0xa4>)
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	0289      	lsls	r1, r1, #10
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	615a      	str	r2, [r3, #20]
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_UART_MspInit+0xa4>)
 8000eba:	695a      	ldr	r2, [r3, #20]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	029b      	lsls	r3, r3, #10
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000ec6:	0021      	movs	r1, r4
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <HAL_UART_MspInit+0xa8>)
 8000ecc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2203      	movs	r2, #3
 8000ede:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	187a      	adds	r2, r7, r1
 8000ee8:	2390      	movs	r3, #144	; 0x90
 8000eea:	05db      	lsls	r3, r3, #23
 8000eec:	0011      	movs	r1, r2
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f000 fa3a 	bl	8001368 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	201b      	movs	r0, #27
 8000efa:	f000 f985 	bl	8001208 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000efe:	201b      	movs	r0, #27
 8000f00:	f000 f997 	bl	8001232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b00b      	add	sp, #44	; 0x2c
 8000f0a:	bd90      	pop	{r4, r7, pc}
 8000f0c:	40013800 	.word	0x40013800
 8000f10:	40021000 	.word	0x40021000
 8000f14:	00008004 	.word	0x00008004

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <NMI_Handler+0x4>

08000f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <HardFault_Handler+0x4>

08000f24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3c:	f000 f89c 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_2_Pin);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 fbca 	bl	80016e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_3_Pin);
 8000f5a:	2080      	movs	r0, #128	; 0x80
 8000f5c:	f000 fbc2 	bl	80016e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_1_Pin);
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	015b      	lsls	r3, r3, #5
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 fbbd 	bl	80016e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <TIM16_IRQHandler+0x14>)
 8000f76:	0018      	movs	r0, r3
 8000f78:	f001 fe90 	bl	8002c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	2000007c 	.word	0x2000007c

08000f88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f96:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f98:	f7ff fff6 	bl	8000f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9e:	490d      	ldr	r1, [pc, #52]	; (8000fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <LoopForever+0xe>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb4:	4c0a      	ldr	r4, [pc, #40]	; (8000fe0 <LoopForever+0x16>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fc2:	f003 fa89 	bl	80044d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fc6:	f7ff fb03 	bl	80005d0 <main>

08000fca <LoopForever>:

LoopForever:
    b LoopForever
 8000fca:	e7fe      	b.n	8000fca <LoopForever>
  ldr   r0, =_estack
 8000fcc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fd8:	080045e8 	.word	0x080045e8
  ldr r2, =_sbss
 8000fdc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fe0:	20000160 	.word	0x20000160

08000fe4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <HAL_Init+0x24>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_Init+0x24>)
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f000 f809 	bl	8001010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffe:	f7ff fe9b 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	40022000 	.word	0x40022000

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_InitTick+0x5c>)
 800101a:	681c      	ldr	r4, [r3, #0]
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_InitTick+0x60>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	0019      	movs	r1, r3
 8001022:	23fa      	movs	r3, #250	; 0xfa
 8001024:	0098      	lsls	r0, r3, #2
 8001026:	f7ff f86f 	bl	8000108 <__udivsi3>
 800102a:	0003      	movs	r3, r0
 800102c:	0019      	movs	r1, r3
 800102e:	0020      	movs	r0, r4
 8001030:	f7ff f86a 	bl	8000108 <__udivsi3>
 8001034:	0003      	movs	r3, r0
 8001036:	0018      	movs	r0, r3
 8001038:	f000 f90b 	bl	8001252 <HAL_SYSTICK_Config>
 800103c:	1e03      	subs	r3, r0, #0
 800103e:	d001      	beq.n	8001044 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e00f      	b.n	8001064 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b03      	cmp	r3, #3
 8001048:	d80b      	bhi.n	8001062 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	2301      	movs	r3, #1
 800104e:	425b      	negs	r3, r3
 8001050:	2200      	movs	r2, #0
 8001052:	0018      	movs	r0, r3
 8001054:	f000 f8d8 	bl	8001208 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_InitTick+0x64>)
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b003      	add	sp, #12
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	20000000 	.word	0x20000000
 8001070:	20000008 	.word	0x20000008
 8001074:	20000004 	.word	0x20000004

08001078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_IncTick+0x1c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	001a      	movs	r2, r3
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_IncTick+0x20>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	18d2      	adds	r2, r2, r3
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_IncTick+0x20>)
 800108a:	601a      	str	r2, [r3, #0]
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	20000008 	.word	0x20000008
 8001098:	2000015c 	.word	0x2000015c

0800109c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b02      	ldr	r3, [pc, #8]	; (80010ac <HAL_GetTick+0x10>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	2000015c 	.word	0x2000015c

080010b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	0002      	movs	r2, r0
 80010b8:	1dfb      	adds	r3, r7, #7
 80010ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b7f      	cmp	r3, #127	; 0x7f
 80010c2:	d809      	bhi.n	80010d8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	001a      	movs	r2, r3
 80010ca:	231f      	movs	r3, #31
 80010cc:	401a      	ands	r2, r3
 80010ce:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_EnableIRQ+0x30>)
 80010d0:	2101      	movs	r1, #1
 80010d2:	4091      	lsls	r1, r2
 80010d4:	000a      	movs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
  }
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b002      	add	sp, #8
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	e000e100 	.word	0xe000e100

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	0002      	movs	r2, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b7f      	cmp	r3, #127	; 0x7f
 80010f8:	d828      	bhi.n	800114c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010fa:	4a2f      	ldr	r2, [pc, #188]	; (80011b8 <__NVIC_SetPriority+0xd4>)
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b25b      	sxtb	r3, r3
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	33c0      	adds	r3, #192	; 0xc0
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	589b      	ldr	r3, [r3, r2]
 800110a:	1dfa      	adds	r2, r7, #7
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	0011      	movs	r1, r2
 8001110:	2203      	movs	r2, #3
 8001112:	400a      	ands	r2, r1
 8001114:	00d2      	lsls	r2, r2, #3
 8001116:	21ff      	movs	r1, #255	; 0xff
 8001118:	4091      	lsls	r1, r2
 800111a:	000a      	movs	r2, r1
 800111c:	43d2      	mvns	r2, r2
 800111e:	401a      	ands	r2, r3
 8001120:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	019b      	lsls	r3, r3, #6
 8001126:	22ff      	movs	r2, #255	; 0xff
 8001128:	401a      	ands	r2, r3
 800112a:	1dfb      	adds	r3, r7, #7
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	0018      	movs	r0, r3
 8001130:	2303      	movs	r3, #3
 8001132:	4003      	ands	r3, r0
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001138:	481f      	ldr	r0, [pc, #124]	; (80011b8 <__NVIC_SetPriority+0xd4>)
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	b25b      	sxtb	r3, r3
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	430a      	orrs	r2, r1
 8001144:	33c0      	adds	r3, #192	; 0xc0
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800114a:	e031      	b.n	80011b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800114c:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <__NVIC_SetPriority+0xd8>)
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	0019      	movs	r1, r3
 8001154:	230f      	movs	r3, #15
 8001156:	400b      	ands	r3, r1
 8001158:	3b08      	subs	r3, #8
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3306      	adds	r3, #6
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	18d3      	adds	r3, r2, r3
 8001162:	3304      	adds	r3, #4
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	1dfa      	adds	r2, r7, #7
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	0011      	movs	r1, r2
 800116c:	2203      	movs	r2, #3
 800116e:	400a      	ands	r2, r1
 8001170:	00d2      	lsls	r2, r2, #3
 8001172:	21ff      	movs	r1, #255	; 0xff
 8001174:	4091      	lsls	r1, r2
 8001176:	000a      	movs	r2, r1
 8001178:	43d2      	mvns	r2, r2
 800117a:	401a      	ands	r2, r3
 800117c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	019b      	lsls	r3, r3, #6
 8001182:	22ff      	movs	r2, #255	; 0xff
 8001184:	401a      	ands	r2, r3
 8001186:	1dfb      	adds	r3, r7, #7
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	0018      	movs	r0, r3
 800118c:	2303      	movs	r3, #3
 800118e:	4003      	ands	r3, r0
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001194:	4809      	ldr	r0, [pc, #36]	; (80011bc <__NVIC_SetPriority+0xd8>)
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	001c      	movs	r4, r3
 800119c:	230f      	movs	r3, #15
 800119e:	4023      	ands	r3, r4
 80011a0:	3b08      	subs	r3, #8
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	430a      	orrs	r2, r1
 80011a6:	3306      	adds	r3, #6
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	18c3      	adds	r3, r0, r3
 80011ac:	3304      	adds	r3, #4
 80011ae:	601a      	str	r2, [r3, #0]
}
 80011b0:	46c0      	nop			; (mov r8, r8)
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b003      	add	sp, #12
 80011b6:	bd90      	pop	{r4, r7, pc}
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	1e5a      	subs	r2, r3, #1
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	045b      	lsls	r3, r3, #17
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d301      	bcc.n	80011d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d4:	2301      	movs	r3, #1
 80011d6:	e010      	b.n	80011fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d8:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <SysTick_Config+0x44>)
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	3a01      	subs	r2, #1
 80011de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e0:	2301      	movs	r3, #1
 80011e2:	425b      	negs	r3, r3
 80011e4:	2103      	movs	r1, #3
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff ff7c 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <SysTick_Config+0x44>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SysTick_Config+0x44>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b002      	add	sp, #8
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	210f      	movs	r1, #15
 8001214:	187b      	adds	r3, r7, r1
 8001216:	1c02      	adds	r2, r0, #0
 8001218:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	187b      	adds	r3, r7, r1
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b25b      	sxtb	r3, r3
 8001222:	0011      	movs	r1, r2
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff ff5d 	bl	80010e4 <__NVIC_SetPriority>
}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	b004      	add	sp, #16
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	0002      	movs	r2, r0
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123e:	1dfb      	adds	r3, r7, #7
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b25b      	sxtb	r3, r3
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff ff33 	bl	80010b0 <__NVIC_EnableIRQ>
}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	b002      	add	sp, #8
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff ffaf 	bl	80011c0 <SysTick_Config>
 8001262:	0003      	movs	r3, r0
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b002      	add	sp, #8
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2221      	movs	r2, #33	; 0x21
 8001278:	5c9b      	ldrb	r3, [r3, r2]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d008      	beq.n	8001292 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2204      	movs	r2, #4
 8001284:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2220      	movs	r2, #32
 800128a:	2100      	movs	r1, #0
 800128c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e020      	b.n	80012d4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	210e      	movs	r1, #14
 800129e:	438a      	bics	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2101      	movs	r1, #1
 80012ae:	438a      	bics	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ba:	2101      	movs	r1, #1
 80012bc:	4091      	lsls	r1, r2
 80012be:	000a      	movs	r2, r1
 80012c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2221      	movs	r2, #33	; 0x21
 80012c6:	2101      	movs	r1, #1
 80012c8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2220      	movs	r2, #32
 80012ce:	2100      	movs	r1, #0
 80012d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e4:	210f      	movs	r1, #15
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2221      	movs	r2, #33	; 0x21
 80012f0:	5c9b      	ldrb	r3, [r3, r2]
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d006      	beq.n	8001306 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2204      	movs	r2, #4
 80012fc:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80012fe:	187b      	adds	r3, r7, r1
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
 8001304:	e028      	b.n	8001358 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	210e      	movs	r1, #14
 8001312:	438a      	bics	r2, r1
 8001314:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2101      	movs	r1, #1
 8001322:	438a      	bics	r2, r1
 8001324:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800132e:	2101      	movs	r1, #1
 8001330:	4091      	lsls	r1, r2
 8001332:	000a      	movs	r2, r1
 8001334:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2221      	movs	r2, #33	; 0x21
 800133a:	2101      	movs	r1, #1
 800133c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2220      	movs	r2, #32
 8001342:	2100      	movs	r1, #0
 8001344:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134a:	2b00      	cmp	r3, #0
 800134c:	d004      	beq.n	8001358 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	0010      	movs	r0, r2
 8001356:	4798      	blx	r3
    }
  }
  return status;
 8001358:	230f      	movs	r3, #15
 800135a:	18fb      	adds	r3, r7, r3
 800135c:	781b      	ldrb	r3, [r3, #0]
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b004      	add	sp, #16
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	e149      	b.n	800160c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4091      	lsls	r1, r2
 8001382:	000a      	movs	r2, r1
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d100      	bne.n	8001390 <HAL_GPIO_Init+0x28>
 800138e:	e13a      	b.n	8001606 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2203      	movs	r2, #3
 8001396:	4013      	ands	r3, r2
 8001398:	2b01      	cmp	r3, #1
 800139a:	d005      	beq.n	80013a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2203      	movs	r2, #3
 80013a2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d130      	bne.n	800140a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	2203      	movs	r2, #3
 80013b4:	409a      	lsls	r2, r3
 80013b6:	0013      	movs	r3, r2
 80013b8:	43da      	mvns	r2, r3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68da      	ldr	r2, [r3, #12]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	409a      	lsls	r2, r3
 80013ca:	0013      	movs	r3, r2
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013de:	2201      	movs	r2, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	43da      	mvns	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	2201      	movs	r2, #1
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2203      	movs	r2, #3
 8001410:	4013      	ands	r3, r2
 8001412:	2b03      	cmp	r3, #3
 8001414:	d017      	beq.n	8001446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	409a      	lsls	r2, r3
 8001424:	0013      	movs	r3, r2
 8001426:	43da      	mvns	r2, r3
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	409a      	lsls	r2, r3
 8001438:	0013      	movs	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2203      	movs	r2, #3
 800144c:	4013      	ands	r3, r2
 800144e:	2b02      	cmp	r3, #2
 8001450:	d123      	bne.n	800149a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	08da      	lsrs	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3208      	adds	r2, #8
 800145a:	0092      	lsls	r2, r2, #2
 800145c:	58d3      	ldr	r3, [r2, r3]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	2207      	movs	r2, #7
 8001464:	4013      	ands	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	43da      	mvns	r2, r3
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2107      	movs	r1, #7
 800147e:	400b      	ands	r3, r1
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	409a      	lsls	r2, r3
 8001484:	0013      	movs	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	0092      	lsls	r2, r2, #2
 8001496:	6939      	ldr	r1, [r7, #16]
 8001498:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	409a      	lsls	r2, r3
 80014a8:	0013      	movs	r3, r2
 80014aa:	43da      	mvns	r2, r3
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2203      	movs	r2, #3
 80014b8:	401a      	ands	r2, r3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	409a      	lsls	r2, r3
 80014c0:	0013      	movs	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	23c0      	movs	r3, #192	; 0xc0
 80014d4:	029b      	lsls	r3, r3, #10
 80014d6:	4013      	ands	r3, r2
 80014d8:	d100      	bne.n	80014dc <HAL_GPIO_Init+0x174>
 80014da:	e094      	b.n	8001606 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014dc:	4b51      	ldr	r3, [pc, #324]	; (8001624 <HAL_GPIO_Init+0x2bc>)
 80014de:	699a      	ldr	r2, [r3, #24]
 80014e0:	4b50      	ldr	r3, [pc, #320]	; (8001624 <HAL_GPIO_Init+0x2bc>)
 80014e2:	2101      	movs	r1, #1
 80014e4:	430a      	orrs	r2, r1
 80014e6:	619a      	str	r2, [r3, #24]
 80014e8:	4b4e      	ldr	r3, [pc, #312]	; (8001624 <HAL_GPIO_Init+0x2bc>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	2201      	movs	r2, #1
 80014ee:	4013      	ands	r3, r2
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014f4:	4a4c      	ldr	r2, [pc, #304]	; (8001628 <HAL_GPIO_Init+0x2c0>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	589b      	ldr	r3, [r3, r2]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2203      	movs	r2, #3
 8001506:	4013      	ands	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	409a      	lsls	r2, r3
 800150e:	0013      	movs	r3, r2
 8001510:	43da      	mvns	r2, r3
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	2390      	movs	r3, #144	; 0x90
 800151c:	05db      	lsls	r3, r3, #23
 800151e:	429a      	cmp	r2, r3
 8001520:	d00d      	beq.n	800153e <HAL_GPIO_Init+0x1d6>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a41      	ldr	r2, [pc, #260]	; (800162c <HAL_GPIO_Init+0x2c4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d007      	beq.n	800153a <HAL_GPIO_Init+0x1d2>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a40      	ldr	r2, [pc, #256]	; (8001630 <HAL_GPIO_Init+0x2c8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d101      	bne.n	8001536 <HAL_GPIO_Init+0x1ce>
 8001532:	2302      	movs	r3, #2
 8001534:	e004      	b.n	8001540 <HAL_GPIO_Init+0x1d8>
 8001536:	2305      	movs	r3, #5
 8001538:	e002      	b.n	8001540 <HAL_GPIO_Init+0x1d8>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_GPIO_Init+0x1d8>
 800153e:	2300      	movs	r3, #0
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	2103      	movs	r1, #3
 8001544:	400a      	ands	r2, r1
 8001546:	0092      	lsls	r2, r2, #2
 8001548:	4093      	lsls	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001550:	4935      	ldr	r1, [pc, #212]	; (8001628 <HAL_GPIO_Init+0x2c0>)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	089b      	lsrs	r3, r3, #2
 8001556:	3302      	adds	r3, #2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800155e:	4b35      	ldr	r3, [pc, #212]	; (8001634 <HAL_GPIO_Init+0x2cc>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43da      	mvns	r2, r3
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	035b      	lsls	r3, r3, #13
 8001576:	4013      	ands	r3, r2
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001582:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <HAL_GPIO_Init+0x2cc>)
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001588:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <HAL_GPIO_Init+0x2cc>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43da      	mvns	r2, r3
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685a      	ldr	r2, [r3, #4]
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	039b      	lsls	r3, r3, #14
 80015a0:	4013      	ands	r3, r2
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_GPIO_Init+0x2cc>)
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_GPIO_Init+0x2cc>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43da      	mvns	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	029b      	lsls	r3, r3, #10
 80015ca:	4013      	ands	r3, r2
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_GPIO_Init+0x2cc>)
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_GPIO_Init+0x2cc>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43da      	mvns	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	025b      	lsls	r3, r3, #9
 80015f4:	4013      	ands	r3, r2
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_GPIO_Init+0x2cc>)
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	40da      	lsrs	r2, r3
 8001614:	1e13      	subs	r3, r2, #0
 8001616:	d000      	beq.n	800161a <HAL_GPIO_Init+0x2b2>
 8001618:	e6ae      	b.n	8001378 <HAL_GPIO_Init+0x10>
  } 
}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	46c0      	nop			; (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b006      	add	sp, #24
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	40010000 	.word	0x40010000
 800162c:	48000400 	.word	0x48000400
 8001630:	48000800 	.word	0x48000800
 8001634:	40010400 	.word	0x40010400

08001638 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	000a      	movs	r2, r1
 8001642:	1cbb      	adds	r3, r7, #2
 8001644:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	1cba      	adds	r2, r7, #2
 800164c:	8812      	ldrh	r2, [r2, #0]
 800164e:	4013      	ands	r3, r2
 8001650:	d004      	beq.n	800165c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001652:	230f      	movs	r3, #15
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	e003      	b.n	8001664 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800165c:	230f      	movs	r3, #15
 800165e:	18fb      	adds	r3, r7, r3
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001664:	230f      	movs	r3, #15
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	781b      	ldrb	r3, [r3, #0]
  }
 800166a:	0018      	movs	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	b004      	add	sp, #16
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	0008      	movs	r0, r1
 800167c:	0011      	movs	r1, r2
 800167e:	1cbb      	adds	r3, r7, #2
 8001680:	1c02      	adds	r2, r0, #0
 8001682:	801a      	strh	r2, [r3, #0]
 8001684:	1c7b      	adds	r3, r7, #1
 8001686:	1c0a      	adds	r2, r1, #0
 8001688:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800168a:	1c7b      	adds	r3, r7, #1
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d004      	beq.n	800169c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001692:	1cbb      	adds	r3, r7, #2
 8001694:	881a      	ldrh	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800169a:	e003      	b.n	80016a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800169c:	1cbb      	adds	r3, r7, #2
 800169e:	881a      	ldrh	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016a4:	46c0      	nop			; (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	b002      	add	sp, #8
 80016aa:	bd80      	pop	{r7, pc}

080016ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	000a      	movs	r2, r1
 80016b6:	1cbb      	adds	r3, r7, #2
 80016b8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016c0:	1cbb      	adds	r3, r7, #2
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	4013      	ands	r3, r2
 80016c8:	041a      	lsls	r2, r3, #16
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	1cb9      	adds	r1, r7, #2
 80016d0:	8809      	ldrh	r1, [r1, #0]
 80016d2:	400b      	ands	r3, r1
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	619a      	str	r2, [r3, #24]
}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	46bd      	mov	sp, r7
 80016de:	b004      	add	sp, #16
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	0002      	movs	r2, r0
 80016ec:	1dbb      	adds	r3, r7, #6
 80016ee:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	1dba      	adds	r2, r7, #6
 80016f6:	8812      	ldrh	r2, [r2, #0]
 80016f8:	4013      	ands	r3, r2
 80016fa:	d008      	beq.n	800170e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80016fe:	1dba      	adds	r2, r7, #6
 8001700:	8812      	ldrh	r2, [r2, #0]
 8001702:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001704:	1dbb      	adds	r3, r7, #6
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	0018      	movs	r0, r3
 800170a:	f7ff f975 	bl	80009f8 <HAL_GPIO_EXTI_Callback>
  }
}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	b002      	add	sp, #8
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	40010400 	.word	0x40010400

0800171c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e082      	b.n	8001834 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2241      	movs	r2, #65	; 0x41
 8001732:	5c9b      	ldrb	r3, [r3, r2]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d107      	bne.n	800174a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2240      	movs	r2, #64	; 0x40
 800173e:	2100      	movs	r1, #0
 8001740:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	0018      	movs	r0, r3
 8001746:	f7ff fb1b 	bl	8000d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2241      	movs	r2, #65	; 0x41
 800174e:	2124      	movs	r1, #36	; 0x24
 8001750:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2101      	movs	r1, #1
 800175e:	438a      	bics	r2, r1
 8001760:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4934      	ldr	r1, [pc, #208]	; (800183c <HAL_I2C_Init+0x120>)
 800176c:	400a      	ands	r2, r1
 800176e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4931      	ldr	r1, [pc, #196]	; (8001840 <HAL_I2C_Init+0x124>)
 800177c:	400a      	ands	r2, r1
 800177e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d108      	bne.n	800179a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	0209      	lsls	r1, r1, #8
 8001794:	430a      	orrs	r2, r1
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	e007      	b.n	80017aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2184      	movs	r1, #132	; 0x84
 80017a4:	0209      	lsls	r1, r1, #8
 80017a6:	430a      	orrs	r2, r1
 80017a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d104      	bne.n	80017bc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	491f      	ldr	r1, [pc, #124]	; (8001844 <HAL_I2C_Init+0x128>)
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	491a      	ldr	r1, [pc, #104]	; (8001840 <HAL_I2C_Init+0x124>)
 80017d8:	400a      	ands	r2, r1
 80017da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691a      	ldr	r2, [r3, #16]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	431a      	orrs	r2, r3
 80017e6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69d9      	ldr	r1, [r3, #28]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1a      	ldr	r2, [r3, #32]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	430a      	orrs	r2, r1
 8001814:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2241      	movs	r2, #65	; 0x41
 8001820:	2120      	movs	r1, #32
 8001822:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2242      	movs	r2, #66	; 0x42
 800182e:	2100      	movs	r1, #0
 8001830:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001832:	2300      	movs	r3, #0
}
 8001834:	0018      	movs	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	b002      	add	sp, #8
 800183a:	bd80      	pop	{r7, pc}
 800183c:	f0ffffff 	.word	0xf0ffffff
 8001840:	ffff7fff 	.word	0xffff7fff
 8001844:	02008000 	.word	0x02008000

08001848 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af02      	add	r7, sp, #8
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	000c      	movs	r4, r1
 8001852:	0010      	movs	r0, r2
 8001854:	0019      	movs	r1, r3
 8001856:	230a      	movs	r3, #10
 8001858:	18fb      	adds	r3, r7, r3
 800185a:	1c22      	adds	r2, r4, #0
 800185c:	801a      	strh	r2, [r3, #0]
 800185e:	2308      	movs	r3, #8
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	1c02      	adds	r2, r0, #0
 8001864:	801a      	strh	r2, [r3, #0]
 8001866:	1dbb      	adds	r3, r7, #6
 8001868:	1c0a      	adds	r2, r1, #0
 800186a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2241      	movs	r2, #65	; 0x41
 8001870:	5c9b      	ldrb	r3, [r3, r2]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b20      	cmp	r3, #32
 8001876:	d000      	beq.n	800187a <HAL_I2C_Mem_Read+0x32>
 8001878:	e110      	b.n	8001a9c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800187a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	d004      	beq.n	800188a <HAL_I2C_Mem_Read+0x42>
 8001880:	232c      	movs	r3, #44	; 0x2c
 8001882:	18fb      	adds	r3, r7, r3
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d105      	bne.n	8001896 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2280      	movs	r2, #128	; 0x80
 800188e:	0092      	lsls	r2, r2, #2
 8001890:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e103      	b.n	8001a9e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2240      	movs	r2, #64	; 0x40
 800189a:	5c9b      	ldrb	r3, [r3, r2]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_I2C_Mem_Read+0x5c>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e0fc      	b.n	8001a9e <HAL_I2C_Mem_Read+0x256>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2240      	movs	r2, #64	; 0x40
 80018a8:	2101      	movs	r1, #1
 80018aa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018ac:	f7ff fbf6 	bl	800109c <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	0219      	lsls	r1, r3, #8
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2319      	movs	r3, #25
 80018c0:	2201      	movs	r2, #1
 80018c2:	f000 f979 	bl	8001bb8 <I2C_WaitOnFlagUntilTimeout>
 80018c6:	1e03      	subs	r3, r0, #0
 80018c8:	d001      	beq.n	80018ce <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e0e7      	b.n	8001a9e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2241      	movs	r2, #65	; 0x41
 80018d2:	2122      	movs	r1, #34	; 0x22
 80018d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2242      	movs	r2, #66	; 0x42
 80018da:	2140      	movs	r1, #64	; 0x40
 80018dc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	222c      	movs	r2, #44	; 0x2c
 80018ee:	18ba      	adds	r2, r7, r2
 80018f0:	8812      	ldrh	r2, [r2, #0]
 80018f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018fa:	1dbb      	adds	r3, r7, #6
 80018fc:	881c      	ldrh	r4, [r3, #0]
 80018fe:	2308      	movs	r3, #8
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	881a      	ldrh	r2, [r3, #0]
 8001904:	230a      	movs	r3, #10
 8001906:	18fb      	adds	r3, r7, r3
 8001908:	8819      	ldrh	r1, [r3, #0]
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	0023      	movs	r3, r4
 8001916:	f000 f8cb 	bl	8001ab0 <I2C_RequestMemoryRead>
 800191a:	1e03      	subs	r3, r0, #0
 800191c:	d005      	beq.n	800192a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2240      	movs	r2, #64	; 0x40
 8001922:	2100      	movs	r1, #0
 8001924:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e0b9      	b.n	8001a9e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192e:	b29b      	uxth	r3, r3
 8001930:	2bff      	cmp	r3, #255	; 0xff
 8001932:	d911      	bls.n	8001958 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	22ff      	movs	r2, #255	; 0xff
 8001938:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193e:	b2da      	uxtb	r2, r3
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	045c      	lsls	r4, r3, #17
 8001944:	230a      	movs	r3, #10
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	8819      	ldrh	r1, [r3, #0]
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	4b56      	ldr	r3, [pc, #344]	; (8001aa8 <HAL_I2C_Mem_Read+0x260>)
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	0023      	movs	r3, r4
 8001952:	f000 fb09 	bl	8001f68 <I2C_TransferConfig>
 8001956:	e012      	b.n	800197e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001966:	b2da      	uxtb	r2, r3
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	049c      	lsls	r4, r3, #18
 800196c:	230a      	movs	r3, #10
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	8819      	ldrh	r1, [r3, #0]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	4b4c      	ldr	r3, [pc, #304]	; (8001aa8 <HAL_I2C_Mem_Read+0x260>)
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	0023      	movs	r3, r4
 800197a:	f000 faf5 	bl	8001f68 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800197e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	0013      	movs	r3, r2
 8001988:	2200      	movs	r2, #0
 800198a:	2104      	movs	r1, #4
 800198c:	f000 f914 	bl	8001bb8 <I2C_WaitOnFlagUntilTimeout>
 8001990:	1e03      	subs	r3, r0, #0
 8001992:	d001      	beq.n	8001998 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e082      	b.n	8001a9e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b4:	3b01      	subs	r3, #1
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d03a      	beq.n	8001a4a <HAL_I2C_Mem_Read+0x202>
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d136      	bne.n	8001a4a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	0013      	movs	r3, r2
 80019e6:	2200      	movs	r2, #0
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	f000 f8e5 	bl	8001bb8 <I2C_WaitOnFlagUntilTimeout>
 80019ee:	1e03      	subs	r3, r0, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e053      	b.n	8001a9e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	2bff      	cmp	r3, #255	; 0xff
 80019fe:	d911      	bls.n	8001a24 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	22ff      	movs	r2, #255	; 0xff
 8001a04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	045c      	lsls	r4, r3, #17
 8001a10:	230a      	movs	r3, #10
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	8819      	ldrh	r1, [r3, #0]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	0023      	movs	r3, r4
 8001a1e:	f000 faa3 	bl	8001f68 <I2C_TransferConfig>
 8001a22:	e012      	b.n	8001a4a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	049c      	lsls	r4, r3, #18
 8001a38:	230a      	movs	r3, #10
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	8819      	ldrh	r1, [r3, #0]
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	2300      	movs	r3, #0
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	0023      	movs	r3, r4
 8001a46:	f000 fa8f 	bl	8001f68 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d194      	bne.n	800197e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f000 f940 	bl	8001ce0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e01a      	b.n	8001a9e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	490c      	ldr	r1, [pc, #48]	; (8001aac <HAL_I2C_Mem_Read+0x264>)
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2241      	movs	r2, #65	; 0x41
 8001a84:	2120      	movs	r1, #32
 8001a86:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2242      	movs	r2, #66	; 0x42
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2240      	movs	r2, #64	; 0x40
 8001a94:	2100      	movs	r1, #0
 8001a96:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e000      	b.n	8001a9e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001a9c:	2302      	movs	r3, #2
  }
}
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b007      	add	sp, #28
 8001aa4:	bd90      	pop	{r4, r7, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	80002400 	.word	0x80002400
 8001aac:	fe00e800 	.word	0xfe00e800

08001ab0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001ab0:	b5b0      	push	{r4, r5, r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	000c      	movs	r4, r1
 8001aba:	0010      	movs	r0, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	250a      	movs	r5, #10
 8001ac0:	197b      	adds	r3, r7, r5
 8001ac2:	1c22      	adds	r2, r4, #0
 8001ac4:	801a      	strh	r2, [r3, #0]
 8001ac6:	2308      	movs	r3, #8
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	1c02      	adds	r2, r0, #0
 8001acc:	801a      	strh	r2, [r3, #0]
 8001ace:	1dbb      	adds	r3, r7, #6
 8001ad0:	1c0a      	adds	r2, r1, #0
 8001ad2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001ad4:	1dbb      	adds	r3, r7, #6
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	197b      	adds	r3, r7, r5
 8001adc:	8819      	ldrh	r1, [r3, #0]
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <I2C_RequestMemoryRead+0xc0>)
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f000 fa3f 	bl	8001f68 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aec:	6a39      	ldr	r1, [r7, #32]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f000 f8af 	bl	8001c54 <I2C_WaitOnTXISFlagUntilTimeout>
 8001af6:	1e03      	subs	r3, r0, #0
 8001af8:	d001      	beq.n	8001afe <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e033      	b.n	8001b66 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001afe:	1dbb      	adds	r3, r7, #6
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d107      	bne.n	8001b16 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b06:	2308      	movs	r3, #8
 8001b08:	18fb      	adds	r3, r7, r3
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	629a      	str	r2, [r3, #40]	; 0x28
 8001b14:	e019      	b.n	8001b4a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001b16:	2308      	movs	r3, #8
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2a:	6a39      	ldr	r1, [r7, #32]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f000 f890 	bl	8001c54 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b34:	1e03      	subs	r3, r0, #0
 8001b36:	d001      	beq.n	8001b3c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e014      	b.n	8001b66 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001b3c:	2308      	movs	r3, #8
 8001b3e:	18fb      	adds	r3, r7, r3
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001b4a:	6a3a      	ldr	r2, [r7, #32]
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	0013      	movs	r3, r2
 8001b54:	2200      	movs	r2, #0
 8001b56:	2140      	movs	r1, #64	; 0x40
 8001b58:	f000 f82e 	bl	8001bb8 <I2C_WaitOnFlagUntilTimeout>
 8001b5c:	1e03      	subs	r3, r0, #0
 8001b5e:	d001      	beq.n	8001b64 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	0018      	movs	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b004      	add	sp, #16
 8001b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	80002000 	.word	0x80002000

08001b74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2202      	movs	r2, #2
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d103      	bne.n	8001b92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d007      	beq.n	8001bb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	699a      	ldr	r2, [r3, #24]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2101      	movs	r1, #1
 8001bac:	430a      	orrs	r2, r1
 8001bae:	619a      	str	r2, [r3, #24]
  }
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b002      	add	sp, #8
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	1dfb      	adds	r3, r7, #7
 8001bc6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bc8:	e030      	b.n	8001c2c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	d02d      	beq.n	8001c2c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd0:	f7ff fa64 	bl	800109c <HAL_GetTick>
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d302      	bcc.n	8001be6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d122      	bne.n	8001c2c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	425a      	negs	r2, r3
 8001bf6:	4153      	adcs	r3, r2
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	001a      	movs	r2, r3
 8001bfc:	1dfb      	adds	r3, r7, #7
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d113      	bne.n	8001c2c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c08:	2220      	movs	r2, #32
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2241      	movs	r2, #65	; 0x41
 8001c14:	2120      	movs	r1, #32
 8001c16:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2242      	movs	r2, #66	; 0x42
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2240      	movs	r2, #64	; 0x40
 8001c24:	2100      	movs	r1, #0
 8001c26:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e00f      	b.n	8001c4c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	4013      	ands	r3, r2
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	425a      	negs	r2, r3
 8001c3c:	4153      	adcs	r3, r2
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	001a      	movs	r2, r3
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d0bf      	beq.n	8001bca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b004      	add	sp, #16
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c60:	e032      	b.n	8001cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f000 f87d 	bl	8001d68 <I2C_IsErrorOccurred>
 8001c6e:	1e03      	subs	r3, r0, #0
 8001c70:	d001      	beq.n	8001c76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e030      	b.n	8001cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	d025      	beq.n	8001cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c7c:	f7ff fa0e 	bl	800109c <HAL_GetTick>
 8001c80:	0002      	movs	r2, r0
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d302      	bcc.n	8001c92 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d11a      	bne.n	8001cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d013      	beq.n	8001cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2241      	movs	r2, #65	; 0x41
 8001cb0:	2120      	movs	r1, #32
 8001cb2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2242      	movs	r2, #66	; 0x42
 8001cb8:	2100      	movs	r1, #0
 8001cba:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2240      	movs	r2, #64	; 0x40
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e007      	b.n	8001cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d1c5      	bne.n	8001c62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b004      	add	sp, #16
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cec:	e02f      	b.n	8001d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f000 f837 	bl	8001d68 <I2C_IsErrorOccurred>
 8001cfa:	1e03      	subs	r3, r0, #0
 8001cfc:	d001      	beq.n	8001d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e02d      	b.n	8001d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d02:	f7ff f9cb 	bl	800109c <HAL_GetTick>
 8001d06:	0002      	movs	r2, r0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d302      	bcc.n	8001d18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d11a      	bne.n	8001d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	4013      	ands	r3, r2
 8001d22:	2b20      	cmp	r3, #32
 8001d24:	d013      	beq.n	8001d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2241      	movs	r2, #65	; 0x41
 8001d36:	2120      	movs	r1, #32
 8001d38:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2242      	movs	r2, #66	; 0x42
 8001d3e:	2100      	movs	r1, #0
 8001d40:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2240      	movs	r2, #64	; 0x40
 8001d46:	2100      	movs	r1, #0
 8001d48:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e007      	b.n	8001d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	2220      	movs	r2, #32
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	d1c8      	bne.n	8001cee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b004      	add	sp, #16
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b08b      	sub	sp, #44	; 0x2c
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d74:	2327      	movs	r3, #39	; 0x27
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2210      	movs	r2, #16
 8001d90:	4013      	ands	r3, r2
 8001d92:	d100      	bne.n	8001d96 <I2C_IsErrorOccurred+0x2e>
 8001d94:	e082      	b.n	8001e9c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2210      	movs	r2, #16
 8001d9c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d9e:	e060      	b.n	8001e62 <I2C_IsErrorOccurred+0xfa>
 8001da0:	2427      	movs	r4, #39	; 0x27
 8001da2:	193b      	adds	r3, r7, r4
 8001da4:	193a      	adds	r2, r7, r4
 8001da6:	7812      	ldrb	r2, [r2, #0]
 8001da8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	3301      	adds	r3, #1
 8001dae:	d058      	beq.n	8001e62 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001db0:	f7ff f974 	bl	800109c <HAL_GetTick>
 8001db4:	0002      	movs	r2, r0
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d306      	bcc.n	8001dce <I2C_IsErrorOccurred+0x66>
 8001dc0:	193b      	adds	r3, r7, r4
 8001dc2:	193a      	adds	r2, r7, r4
 8001dc4:	7812      	ldrb	r2, [r2, #0]
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d149      	bne.n	8001e62 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	01db      	lsls	r3, r3, #7
 8001dd8:	4013      	ands	r3, r2
 8001dda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ddc:	2013      	movs	r0, #19
 8001dde:	183b      	adds	r3, r7, r0
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	2142      	movs	r1, #66	; 0x42
 8001de4:	5c52      	ldrb	r2, [r2, r1]
 8001de6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699a      	ldr	r2, [r3, #24]
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	401a      	ands	r2, r3
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d126      	bne.n	8001e4a <I2C_IsErrorOccurred+0xe2>
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	01db      	lsls	r3, r3, #7
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d021      	beq.n	8001e4a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001e06:	183b      	adds	r3, r7, r0
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b20      	cmp	r3, #32
 8001e0c:	d01d      	beq.n	8001e4a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2180      	movs	r1, #128	; 0x80
 8001e1a:	01c9      	lsls	r1, r1, #7
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001e20:	f7ff f93c 	bl	800109c <HAL_GetTick>
 8001e24:	0003      	movs	r3, r0
 8001e26:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e28:	e00f      	b.n	8001e4a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e2a:	f7ff f937 	bl	800109c <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b19      	cmp	r3, #25
 8001e36:	d908      	bls.n	8001e4a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001e38:	6a3b      	ldr	r3, [r7, #32]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001e40:	2327      	movs	r3, #39	; 0x27
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]

              break;
 8001e48:	e00b      	b.n	8001e62 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	2220      	movs	r2, #32
 8001e52:	4013      	ands	r3, r2
 8001e54:	2127      	movs	r1, #39	; 0x27
 8001e56:	187a      	adds	r2, r7, r1
 8001e58:	1879      	adds	r1, r7, r1
 8001e5a:	7809      	ldrb	r1, [r1, #0]
 8001e5c:	7011      	strb	r1, [r2, #0]
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	d1e3      	bne.n	8001e2a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2220      	movs	r2, #32
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	d004      	beq.n	8001e7a <I2C_IsErrorOccurred+0x112>
 8001e70:	2327      	movs	r3, #39	; 0x27
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d092      	beq.n	8001da0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001e7a:	2327      	movs	r3, #39	; 0x27
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d103      	bne.n	8001e8c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	2204      	movs	r2, #4
 8001e90:	4313      	orrs	r3, r2
 8001e92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001e94:	2327      	movs	r3, #39	; 0x27
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d00c      	beq.n	8001ec8 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2280      	movs	r2, #128	; 0x80
 8001ebc:	0052      	lsls	r2, r2, #1
 8001ebe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ec0:	2327      	movs	r3, #39	; 0x27
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d00c      	beq.n	8001eec <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2280      	movs	r2, #128	; 0x80
 8001ee0:	00d2      	lsls	r2, r2, #3
 8001ee2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ee4:	2327      	movs	r3, #39	; 0x27
 8001ee6:	18fb      	adds	r3, r7, r3
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d00c      	beq.n	8001f10 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	4313      	orrs	r3, r2
 8001efc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2280      	movs	r2, #128	; 0x80
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f08:	2327      	movs	r3, #39	; 0x27
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001f10:	2327      	movs	r3, #39	; 0x27
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d01d      	beq.n	8001f56 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7ff fe29 	bl	8001b74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	490d      	ldr	r1, [pc, #52]	; (8001f64 <I2C_IsErrorOccurred+0x1fc>)
 8001f2e:	400a      	ands	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f36:	6a3b      	ldr	r3, [r7, #32]
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2241      	movs	r2, #65	; 0x41
 8001f42:	2120      	movs	r1, #32
 8001f44:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2242      	movs	r2, #66	; 0x42
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2240      	movs	r2, #64	; 0x40
 8001f52:	2100      	movs	r1, #0
 8001f54:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001f56:	2327      	movs	r3, #39	; 0x27
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	781b      	ldrb	r3, [r3, #0]
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b00b      	add	sp, #44	; 0x2c
 8001f62:	bd90      	pop	{r4, r7, pc}
 8001f64:	fe00e800 	.word	0xfe00e800

08001f68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	0008      	movs	r0, r1
 8001f72:	0011      	movs	r1, r2
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	240a      	movs	r4, #10
 8001f78:	193b      	adds	r3, r7, r4
 8001f7a:	1c02      	adds	r2, r0, #0
 8001f7c:	801a      	strh	r2, [r3, #0]
 8001f7e:	2009      	movs	r0, #9
 8001f80:	183b      	adds	r3, r7, r0
 8001f82:	1c0a      	adds	r2, r1, #0
 8001f84:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f86:	193b      	adds	r3, r7, r4
 8001f88:	881b      	ldrh	r3, [r3, #0]
 8001f8a:	059b      	lsls	r3, r3, #22
 8001f8c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f8e:	183b      	adds	r3, r7, r0
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	0419      	lsls	r1, r3, #16
 8001f94:	23ff      	movs	r3, #255	; 0xff
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f9a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fb2:	0d51      	lsrs	r1, r2, #21
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	00d2      	lsls	r2, r2, #3
 8001fb8:	400a      	ands	r2, r1
 8001fba:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <I2C_TransferConfig+0x70>)
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	43d2      	mvns	r2, r2
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	0011      	movs	r1, r2
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b007      	add	sp, #28
 8001fd4:	bd90      	pop	{r4, r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	03ff63ff 	.word	0x03ff63ff

08001fdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2241      	movs	r2, #65	; 0x41
 8001fea:	5c9b      	ldrb	r3, [r3, r2]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	d138      	bne.n	8002064 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2240      	movs	r2, #64	; 0x40
 8001ff6:	5c9b      	ldrb	r3, [r3, r2]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e032      	b.n	8002066 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2240      	movs	r2, #64	; 0x40
 8002004:	2101      	movs	r1, #1
 8002006:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2241      	movs	r2, #65	; 0x41
 800200c:	2124      	movs	r1, #36	; 0x24
 800200e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2101      	movs	r1, #1
 800201c:	438a      	bics	r2, r1
 800201e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4911      	ldr	r1, [pc, #68]	; (8002070 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800202c:	400a      	ands	r2, r1
 800202e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6819      	ldr	r1, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2101      	movs	r1, #1
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2241      	movs	r2, #65	; 0x41
 8002054:	2120      	movs	r1, #32
 8002056:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2240      	movs	r2, #64	; 0x40
 800205c:	2100      	movs	r1, #0
 800205e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	e000      	b.n	8002066 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002064:	2302      	movs	r3, #2
  }
}
 8002066:	0018      	movs	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	b002      	add	sp, #8
 800206c:	bd80      	pop	{r7, pc}
 800206e:	46c0      	nop			; (mov r8, r8)
 8002070:	ffffefff 	.word	0xffffefff

08002074 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2241      	movs	r2, #65	; 0x41
 8002082:	5c9b      	ldrb	r3, [r3, r2]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b20      	cmp	r3, #32
 8002088:	d139      	bne.n	80020fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2240      	movs	r2, #64	; 0x40
 800208e:	5c9b      	ldrb	r3, [r3, r2]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002094:	2302      	movs	r3, #2
 8002096:	e033      	b.n	8002100 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2240      	movs	r2, #64	; 0x40
 800209c:	2101      	movs	r1, #1
 800209e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2241      	movs	r2, #65	; 0x41
 80020a4:	2124      	movs	r1, #36	; 0x24
 80020a6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2101      	movs	r1, #1
 80020b4:	438a      	bics	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4a11      	ldr	r2, [pc, #68]	; (8002108 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	430a      	orrs	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2241      	movs	r2, #65	; 0x41
 80020ee:	2120      	movs	r1, #32
 80020f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2240      	movs	r2, #64	; 0x40
 80020f6:	2100      	movs	r1, #0
 80020f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e000      	b.n	8002100 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020fe:	2302      	movs	r3, #2
  }
}
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	b004      	add	sp, #16
 8002106:	bd80      	pop	{r7, pc}
 8002108:	fffff0ff 	.word	0xfffff0ff

0800210c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e301      	b.n	8002722 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2201      	movs	r2, #1
 8002124:	4013      	ands	r3, r2
 8002126:	d100      	bne.n	800212a <HAL_RCC_OscConfig+0x1e>
 8002128:	e08d      	b.n	8002246 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800212a:	4bc3      	ldr	r3, [pc, #780]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	220c      	movs	r2, #12
 8002130:	4013      	ands	r3, r2
 8002132:	2b04      	cmp	r3, #4
 8002134:	d00e      	beq.n	8002154 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002136:	4bc0      	ldr	r3, [pc, #768]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	220c      	movs	r2, #12
 800213c:	4013      	ands	r3, r2
 800213e:	2b08      	cmp	r3, #8
 8002140:	d116      	bne.n	8002170 <HAL_RCC_OscConfig+0x64>
 8002142:	4bbd      	ldr	r3, [pc, #756]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	025b      	lsls	r3, r3, #9
 800214a:	401a      	ands	r2, r3
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	025b      	lsls	r3, r3, #9
 8002150:	429a      	cmp	r2, r3
 8002152:	d10d      	bne.n	8002170 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	4bb8      	ldr	r3, [pc, #736]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	029b      	lsls	r3, r3, #10
 800215c:	4013      	ands	r3, r2
 800215e:	d100      	bne.n	8002162 <HAL_RCC_OscConfig+0x56>
 8002160:	e070      	b.n	8002244 <HAL_RCC_OscConfig+0x138>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d000      	beq.n	800216c <HAL_RCC_OscConfig+0x60>
 800216a:	e06b      	b.n	8002244 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e2d8      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d107      	bne.n	8002188 <HAL_RCC_OscConfig+0x7c>
 8002178:	4baf      	ldr	r3, [pc, #700]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4bae      	ldr	r3, [pc, #696]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 800217e:	2180      	movs	r1, #128	; 0x80
 8002180:	0249      	lsls	r1, r1, #9
 8002182:	430a      	orrs	r2, r1
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	e02f      	b.n	80021e8 <HAL_RCC_OscConfig+0xdc>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10c      	bne.n	80021aa <HAL_RCC_OscConfig+0x9e>
 8002190:	4ba9      	ldr	r3, [pc, #676]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4ba8      	ldr	r3, [pc, #672]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 8002196:	49a9      	ldr	r1, [pc, #676]	; (800243c <HAL_RCC_OscConfig+0x330>)
 8002198:	400a      	ands	r2, r1
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	4ba6      	ldr	r3, [pc, #664]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4ba5      	ldr	r3, [pc, #660]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80021a2:	49a7      	ldr	r1, [pc, #668]	; (8002440 <HAL_RCC_OscConfig+0x334>)
 80021a4:	400a      	ands	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	e01e      	b.n	80021e8 <HAL_RCC_OscConfig+0xdc>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b05      	cmp	r3, #5
 80021b0:	d10e      	bne.n	80021d0 <HAL_RCC_OscConfig+0xc4>
 80021b2:	4ba1      	ldr	r3, [pc, #644]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4ba0      	ldr	r3, [pc, #640]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80021b8:	2180      	movs	r1, #128	; 0x80
 80021ba:	02c9      	lsls	r1, r1, #11
 80021bc:	430a      	orrs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	4b9d      	ldr	r3, [pc, #628]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b9c      	ldr	r3, [pc, #624]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80021c6:	2180      	movs	r1, #128	; 0x80
 80021c8:	0249      	lsls	r1, r1, #9
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	e00b      	b.n	80021e8 <HAL_RCC_OscConfig+0xdc>
 80021d0:	4b99      	ldr	r3, [pc, #612]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b98      	ldr	r3, [pc, #608]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80021d6:	4999      	ldr	r1, [pc, #612]	; (800243c <HAL_RCC_OscConfig+0x330>)
 80021d8:	400a      	ands	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	4b96      	ldr	r3, [pc, #600]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b95      	ldr	r3, [pc, #596]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80021e2:	4997      	ldr	r1, [pc, #604]	; (8002440 <HAL_RCC_OscConfig+0x334>)
 80021e4:	400a      	ands	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d014      	beq.n	800221a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7fe ff54 	bl	800109c <HAL_GetTick>
 80021f4:	0003      	movs	r3, r0
 80021f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021fa:	f7fe ff4f 	bl	800109c <HAL_GetTick>
 80021fe:	0002      	movs	r2, r0
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b64      	cmp	r3, #100	; 0x64
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e28a      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220c:	4b8a      	ldr	r3, [pc, #552]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	029b      	lsls	r3, r3, #10
 8002214:	4013      	ands	r3, r2
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0xee>
 8002218:	e015      	b.n	8002246 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7fe ff3f 	bl	800109c <HAL_GetTick>
 800221e:	0003      	movs	r3, r0
 8002220:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002224:	f7fe ff3a 	bl	800109c <HAL_GetTick>
 8002228:	0002      	movs	r2, r0
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e275      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	4b80      	ldr	r3, [pc, #512]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	029b      	lsls	r3, r3, #10
 800223e:	4013      	ands	r3, r2
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x118>
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2202      	movs	r2, #2
 800224c:	4013      	ands	r3, r2
 800224e:	d100      	bne.n	8002252 <HAL_RCC_OscConfig+0x146>
 8002250:	e069      	b.n	8002326 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002252:	4b79      	ldr	r3, [pc, #484]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	220c      	movs	r2, #12
 8002258:	4013      	ands	r3, r2
 800225a:	d00b      	beq.n	8002274 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800225c:	4b76      	ldr	r3, [pc, #472]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	220c      	movs	r2, #12
 8002262:	4013      	ands	r3, r2
 8002264:	2b08      	cmp	r3, #8
 8002266:	d11c      	bne.n	80022a2 <HAL_RCC_OscConfig+0x196>
 8002268:	4b73      	ldr	r3, [pc, #460]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	025b      	lsls	r3, r3, #9
 8002270:	4013      	ands	r3, r2
 8002272:	d116      	bne.n	80022a2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002274:	4b70      	ldr	r3, [pc, #448]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2202      	movs	r2, #2
 800227a:	4013      	ands	r3, r2
 800227c:	d005      	beq.n	800228a <HAL_RCC_OscConfig+0x17e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d001      	beq.n	800228a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e24b      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	4b6b      	ldr	r3, [pc, #428]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	22f8      	movs	r2, #248	; 0xf8
 8002290:	4393      	bics	r3, r2
 8002292:	0019      	movs	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	00da      	lsls	r2, r3, #3
 800229a:	4b67      	ldr	r3, [pc, #412]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a0:	e041      	b.n	8002326 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d024      	beq.n	80022f4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022aa:	4b63      	ldr	r3, [pc, #396]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	4b62      	ldr	r3, [pc, #392]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80022b0:	2101      	movs	r1, #1
 80022b2:	430a      	orrs	r2, r1
 80022b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7fe fef1 	bl	800109c <HAL_GetTick>
 80022ba:	0003      	movs	r3, r0
 80022bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c0:	f7fe feec 	bl	800109c <HAL_GetTick>
 80022c4:	0002      	movs	r2, r0
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e227      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d2:	4b59      	ldr	r3, [pc, #356]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2202      	movs	r2, #2
 80022d8:	4013      	ands	r3, r2
 80022da:	d0f1      	beq.n	80022c0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022dc:	4b56      	ldr	r3, [pc, #344]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	22f8      	movs	r2, #248	; 0xf8
 80022e2:	4393      	bics	r3, r2
 80022e4:	0019      	movs	r1, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	00da      	lsls	r2, r3, #3
 80022ec:	4b52      	ldr	r3, [pc, #328]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80022ee:	430a      	orrs	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e018      	b.n	8002326 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f4:	4b50      	ldr	r3, [pc, #320]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b4f      	ldr	r3, [pc, #316]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80022fa:	2101      	movs	r1, #1
 80022fc:	438a      	bics	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe fecc 	bl	800109c <HAL_GetTick>
 8002304:	0003      	movs	r3, r0
 8002306:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002308:	e008      	b.n	800231c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800230a:	f7fe fec7 	bl	800109c <HAL_GetTick>
 800230e:	0002      	movs	r2, r0
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e202      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231c:	4b46      	ldr	r3, [pc, #280]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2202      	movs	r2, #2
 8002322:	4013      	ands	r3, r2
 8002324:	d1f1      	bne.n	800230a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2208      	movs	r2, #8
 800232c:	4013      	ands	r3, r2
 800232e:	d036      	beq.n	800239e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d019      	beq.n	800236c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002338:	4b3f      	ldr	r3, [pc, #252]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 800233a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800233c:	4b3e      	ldr	r3, [pc, #248]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 800233e:	2101      	movs	r1, #1
 8002340:	430a      	orrs	r2, r1
 8002342:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002344:	f7fe feaa 	bl	800109c <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800234e:	f7fe fea5 	bl	800109c <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e1e0      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002360:	4b35      	ldr	r3, [pc, #212]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	2202      	movs	r2, #2
 8002366:	4013      	ands	r3, r2
 8002368:	d0f1      	beq.n	800234e <HAL_RCC_OscConfig+0x242>
 800236a:	e018      	b.n	800239e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800236c:	4b32      	ldr	r3, [pc, #200]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 800236e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002370:	4b31      	ldr	r3, [pc, #196]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 8002372:	2101      	movs	r1, #1
 8002374:	438a      	bics	r2, r1
 8002376:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7fe fe90 	bl	800109c <HAL_GetTick>
 800237c:	0003      	movs	r3, r0
 800237e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002382:	f7fe fe8b 	bl	800109c <HAL_GetTick>
 8002386:	0002      	movs	r2, r0
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e1c6      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002394:	4b28      	ldr	r3, [pc, #160]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	2202      	movs	r2, #2
 800239a:	4013      	ands	r3, r2
 800239c:	d1f1      	bne.n	8002382 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2204      	movs	r2, #4
 80023a4:	4013      	ands	r3, r2
 80023a6:	d100      	bne.n	80023aa <HAL_RCC_OscConfig+0x29e>
 80023a8:	e0b4      	b.n	8002514 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023aa:	201f      	movs	r0, #31
 80023ac:	183b      	adds	r3, r7, r0
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b2:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80023b4:	69da      	ldr	r2, [r3, #28]
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	055b      	lsls	r3, r3, #21
 80023ba:	4013      	ands	r3, r2
 80023bc:	d110      	bne.n	80023e0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80023c0:	69da      	ldr	r2, [r3, #28]
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80023c4:	2180      	movs	r1, #128	; 0x80
 80023c6:	0549      	lsls	r1, r1, #21
 80023c8:	430a      	orrs	r2, r1
 80023ca:	61da      	str	r2, [r3, #28]
 80023cc:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 80023ce:	69da      	ldr	r2, [r3, #28]
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	055b      	lsls	r3, r3, #21
 80023d4:	4013      	ands	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023da:	183b      	adds	r3, r7, r0
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	4b18      	ldr	r3, [pc, #96]	; (8002444 <HAL_RCC_OscConfig+0x338>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4013      	ands	r3, r2
 80023ea:	d11a      	bne.n	8002422 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <HAL_RCC_OscConfig+0x338>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <HAL_RCC_OscConfig+0x338>)
 80023f2:	2180      	movs	r1, #128	; 0x80
 80023f4:	0049      	lsls	r1, r1, #1
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023fa:	f7fe fe4f 	bl	800109c <HAL_GetTick>
 80023fe:	0003      	movs	r3, r0
 8002400:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002404:	f7fe fe4a 	bl	800109c <HAL_GetTick>
 8002408:	0002      	movs	r2, r0
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	; 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e185      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002416:	4b0b      	ldr	r3, [pc, #44]	; (8002444 <HAL_RCC_OscConfig+0x338>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	4013      	ands	r3, r2
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d10e      	bne.n	8002448 <HAL_RCC_OscConfig+0x33c>
 800242a:	4b03      	ldr	r3, [pc, #12]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 800242c:	6a1a      	ldr	r2, [r3, #32]
 800242e:	4b02      	ldr	r3, [pc, #8]	; (8002438 <HAL_RCC_OscConfig+0x32c>)
 8002430:	2101      	movs	r1, #1
 8002432:	430a      	orrs	r2, r1
 8002434:	621a      	str	r2, [r3, #32]
 8002436:	e035      	b.n	80024a4 <HAL_RCC_OscConfig+0x398>
 8002438:	40021000 	.word	0x40021000
 800243c:	fffeffff 	.word	0xfffeffff
 8002440:	fffbffff 	.word	0xfffbffff
 8002444:	40007000 	.word	0x40007000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10c      	bne.n	800246a <HAL_RCC_OscConfig+0x35e>
 8002450:	4bb6      	ldr	r3, [pc, #728]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002452:	6a1a      	ldr	r2, [r3, #32]
 8002454:	4bb5      	ldr	r3, [pc, #724]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002456:	2101      	movs	r1, #1
 8002458:	438a      	bics	r2, r1
 800245a:	621a      	str	r2, [r3, #32]
 800245c:	4bb3      	ldr	r3, [pc, #716]	; (800272c <HAL_RCC_OscConfig+0x620>)
 800245e:	6a1a      	ldr	r2, [r3, #32]
 8002460:	4bb2      	ldr	r3, [pc, #712]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002462:	2104      	movs	r1, #4
 8002464:	438a      	bics	r2, r1
 8002466:	621a      	str	r2, [r3, #32]
 8002468:	e01c      	b.n	80024a4 <HAL_RCC_OscConfig+0x398>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b05      	cmp	r3, #5
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x380>
 8002472:	4bae      	ldr	r3, [pc, #696]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002474:	6a1a      	ldr	r2, [r3, #32]
 8002476:	4bad      	ldr	r3, [pc, #692]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002478:	2104      	movs	r1, #4
 800247a:	430a      	orrs	r2, r1
 800247c:	621a      	str	r2, [r3, #32]
 800247e:	4bab      	ldr	r3, [pc, #684]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002480:	6a1a      	ldr	r2, [r3, #32]
 8002482:	4baa      	ldr	r3, [pc, #680]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002484:	2101      	movs	r1, #1
 8002486:	430a      	orrs	r2, r1
 8002488:	621a      	str	r2, [r3, #32]
 800248a:	e00b      	b.n	80024a4 <HAL_RCC_OscConfig+0x398>
 800248c:	4ba7      	ldr	r3, [pc, #668]	; (800272c <HAL_RCC_OscConfig+0x620>)
 800248e:	6a1a      	ldr	r2, [r3, #32]
 8002490:	4ba6      	ldr	r3, [pc, #664]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002492:	2101      	movs	r1, #1
 8002494:	438a      	bics	r2, r1
 8002496:	621a      	str	r2, [r3, #32]
 8002498:	4ba4      	ldr	r3, [pc, #656]	; (800272c <HAL_RCC_OscConfig+0x620>)
 800249a:	6a1a      	ldr	r2, [r3, #32]
 800249c:	4ba3      	ldr	r3, [pc, #652]	; (800272c <HAL_RCC_OscConfig+0x620>)
 800249e:	2104      	movs	r1, #4
 80024a0:	438a      	bics	r2, r1
 80024a2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d014      	beq.n	80024d6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ac:	f7fe fdf6 	bl	800109c <HAL_GetTick>
 80024b0:	0003      	movs	r3, r0
 80024b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	e009      	b.n	80024ca <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7fe fdf1 	bl	800109c <HAL_GetTick>
 80024ba:	0002      	movs	r2, r0
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	4a9b      	ldr	r2, [pc, #620]	; (8002730 <HAL_RCC_OscConfig+0x624>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e12b      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ca:	4b98      	ldr	r3, [pc, #608]	; (800272c <HAL_RCC_OscConfig+0x620>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	2202      	movs	r2, #2
 80024d0:	4013      	ands	r3, r2
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x3aa>
 80024d4:	e013      	b.n	80024fe <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d6:	f7fe fde1 	bl	800109c <HAL_GetTick>
 80024da:	0003      	movs	r3, r0
 80024dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024de:	e009      	b.n	80024f4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e0:	f7fe fddc 	bl	800109c <HAL_GetTick>
 80024e4:	0002      	movs	r2, r0
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	4a91      	ldr	r2, [pc, #580]	; (8002730 <HAL_RCC_OscConfig+0x624>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e116      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f4:	4b8d      	ldr	r3, [pc, #564]	; (800272c <HAL_RCC_OscConfig+0x620>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	2202      	movs	r2, #2
 80024fa:	4013      	ands	r3, r2
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024fe:	231f      	movs	r3, #31
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d105      	bne.n	8002514 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002508:	4b88      	ldr	r3, [pc, #544]	; (800272c <HAL_RCC_OscConfig+0x620>)
 800250a:	69da      	ldr	r2, [r3, #28]
 800250c:	4b87      	ldr	r3, [pc, #540]	; (800272c <HAL_RCC_OscConfig+0x620>)
 800250e:	4989      	ldr	r1, [pc, #548]	; (8002734 <HAL_RCC_OscConfig+0x628>)
 8002510:	400a      	ands	r2, r1
 8002512:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2210      	movs	r2, #16
 800251a:	4013      	ands	r3, r2
 800251c:	d063      	beq.n	80025e6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d12a      	bne.n	800257c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002526:	4b81      	ldr	r3, [pc, #516]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800252a:	4b80      	ldr	r3, [pc, #512]	; (800272c <HAL_RCC_OscConfig+0x620>)
 800252c:	2104      	movs	r1, #4
 800252e:	430a      	orrs	r2, r1
 8002530:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002532:	4b7e      	ldr	r3, [pc, #504]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002536:	4b7d      	ldr	r3, [pc, #500]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002538:	2101      	movs	r1, #1
 800253a:	430a      	orrs	r2, r1
 800253c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253e:	f7fe fdad 	bl	800109c <HAL_GetTick>
 8002542:	0003      	movs	r3, r0
 8002544:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002548:	f7fe fda8 	bl	800109c <HAL_GetTick>
 800254c:	0002      	movs	r2, r0
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e0e3      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800255a:	4b74      	ldr	r3, [pc, #464]	; (800272c <HAL_RCC_OscConfig+0x620>)
 800255c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800255e:	2202      	movs	r2, #2
 8002560:	4013      	ands	r3, r2
 8002562:	d0f1      	beq.n	8002548 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002564:	4b71      	ldr	r3, [pc, #452]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002568:	22f8      	movs	r2, #248	; 0xf8
 800256a:	4393      	bics	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	00da      	lsls	r2, r3, #3
 8002574:	4b6d      	ldr	r3, [pc, #436]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002576:	430a      	orrs	r2, r1
 8002578:	635a      	str	r2, [r3, #52]	; 0x34
 800257a:	e034      	b.n	80025e6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	3305      	adds	r3, #5
 8002582:	d111      	bne.n	80025a8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002584:	4b69      	ldr	r3, [pc, #420]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002588:	4b68      	ldr	r3, [pc, #416]	; (800272c <HAL_RCC_OscConfig+0x620>)
 800258a:	2104      	movs	r1, #4
 800258c:	438a      	bics	r2, r1
 800258e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002590:	4b66      	ldr	r3, [pc, #408]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002594:	22f8      	movs	r2, #248	; 0xf8
 8002596:	4393      	bics	r3, r2
 8002598:	0019      	movs	r1, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	00da      	lsls	r2, r3, #3
 80025a0:	4b62      	ldr	r3, [pc, #392]	; (800272c <HAL_RCC_OscConfig+0x620>)
 80025a2:	430a      	orrs	r2, r1
 80025a4:	635a      	str	r2, [r3, #52]	; 0x34
 80025a6:	e01e      	b.n	80025e6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80025a8:	4b60      	ldr	r3, [pc, #384]	; (800272c <HAL_RCC_OscConfig+0x620>)
 80025aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025ac:	4b5f      	ldr	r3, [pc, #380]	; (800272c <HAL_RCC_OscConfig+0x620>)
 80025ae:	2104      	movs	r1, #4
 80025b0:	430a      	orrs	r2, r1
 80025b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80025b4:	4b5d      	ldr	r3, [pc, #372]	; (800272c <HAL_RCC_OscConfig+0x620>)
 80025b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025b8:	4b5c      	ldr	r3, [pc, #368]	; (800272c <HAL_RCC_OscConfig+0x620>)
 80025ba:	2101      	movs	r1, #1
 80025bc:	438a      	bics	r2, r1
 80025be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c0:	f7fe fd6c 	bl	800109c <HAL_GetTick>
 80025c4:	0003      	movs	r3, r0
 80025c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80025ca:	f7fe fd67 	bl	800109c <HAL_GetTick>
 80025ce:	0002      	movs	r2, r0
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e0a2      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80025dc:	4b53      	ldr	r3, [pc, #332]	; (800272c <HAL_RCC_OscConfig+0x620>)
 80025de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e0:	2202      	movs	r2, #2
 80025e2:	4013      	ands	r3, r2
 80025e4:	d1f1      	bne.n	80025ca <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d100      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4e4>
 80025ee:	e097      	b.n	8002720 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f0:	4b4e      	ldr	r3, [pc, #312]	; (800272c <HAL_RCC_OscConfig+0x620>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	220c      	movs	r2, #12
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d100      	bne.n	80025fe <HAL_RCC_OscConfig+0x4f2>
 80025fc:	e06b      	b.n	80026d6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d14c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002606:	4b49      	ldr	r3, [pc, #292]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4b48      	ldr	r3, [pc, #288]	; (800272c <HAL_RCC_OscConfig+0x620>)
 800260c:	494a      	ldr	r1, [pc, #296]	; (8002738 <HAL_RCC_OscConfig+0x62c>)
 800260e:	400a      	ands	r2, r1
 8002610:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002612:	f7fe fd43 	bl	800109c <HAL_GetTick>
 8002616:	0003      	movs	r3, r0
 8002618:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe fd3e 	bl	800109c <HAL_GetTick>
 8002620:	0002      	movs	r2, r0
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e079      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262e:	4b3f      	ldr	r3, [pc, #252]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	049b      	lsls	r3, r3, #18
 8002636:	4013      	ands	r3, r2
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800263a:	4b3c      	ldr	r3, [pc, #240]	; (800272c <HAL_RCC_OscConfig+0x620>)
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263e:	220f      	movs	r2, #15
 8002640:	4393      	bics	r3, r2
 8002642:	0019      	movs	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002648:	4b38      	ldr	r3, [pc, #224]	; (800272c <HAL_RCC_OscConfig+0x620>)
 800264a:	430a      	orrs	r2, r1
 800264c:	62da      	str	r2, [r3, #44]	; 0x2c
 800264e:	4b37      	ldr	r3, [pc, #220]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	4a3a      	ldr	r2, [pc, #232]	; (800273c <HAL_RCC_OscConfig+0x630>)
 8002654:	4013      	ands	r3, r2
 8002656:	0019      	movs	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	431a      	orrs	r2, r3
 8002662:	4b32      	ldr	r3, [pc, #200]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002664:	430a      	orrs	r2, r1
 8002666:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002668:	4b30      	ldr	r3, [pc, #192]	; (800272c <HAL_RCC_OscConfig+0x620>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b2f      	ldr	r3, [pc, #188]	; (800272c <HAL_RCC_OscConfig+0x620>)
 800266e:	2180      	movs	r1, #128	; 0x80
 8002670:	0449      	lsls	r1, r1, #17
 8002672:	430a      	orrs	r2, r1
 8002674:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7fe fd11 	bl	800109c <HAL_GetTick>
 800267a:	0003      	movs	r3, r0
 800267c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002680:	f7fe fd0c 	bl	800109c <HAL_GetTick>
 8002684:	0002      	movs	r2, r0
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e047      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002692:	4b26      	ldr	r3, [pc, #152]	; (800272c <HAL_RCC_OscConfig+0x620>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	049b      	lsls	r3, r3, #18
 800269a:	4013      	ands	r3, r2
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x574>
 800269e:	e03f      	b.n	8002720 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a0:	4b22      	ldr	r3, [pc, #136]	; (800272c <HAL_RCC_OscConfig+0x620>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b21      	ldr	r3, [pc, #132]	; (800272c <HAL_RCC_OscConfig+0x620>)
 80026a6:	4924      	ldr	r1, [pc, #144]	; (8002738 <HAL_RCC_OscConfig+0x62c>)
 80026a8:	400a      	ands	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7fe fcf6 	bl	800109c <HAL_GetTick>
 80026b0:	0003      	movs	r3, r0
 80026b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b6:	f7fe fcf1 	bl	800109c <HAL_GetTick>
 80026ba:	0002      	movs	r2, r0
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e02c      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c8:	4b18      	ldr	r3, [pc, #96]	; (800272c <HAL_RCC_OscConfig+0x620>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	049b      	lsls	r3, r3, #18
 80026d0:	4013      	ands	r3, r2
 80026d2:	d1f0      	bne.n	80026b6 <HAL_RCC_OscConfig+0x5aa>
 80026d4:	e024      	b.n	8002720 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e01f      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_RCC_OscConfig+0x620>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <HAL_RCC_OscConfig+0x620>)
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	2380      	movs	r3, #128	; 0x80
 80026f2:	025b      	lsls	r3, r3, #9
 80026f4:	401a      	ands	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d10e      	bne.n	800271c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	220f      	movs	r2, #15
 8002702:	401a      	ands	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d107      	bne.n	800271c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	23f0      	movs	r3, #240	; 0xf0
 8002710:	039b      	lsls	r3, r3, #14
 8002712:	401a      	ands	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	0018      	movs	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	b008      	add	sp, #32
 8002728:	bd80      	pop	{r7, pc}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	40021000 	.word	0x40021000
 8002730:	00001388 	.word	0x00001388
 8002734:	efffffff 	.word	0xefffffff
 8002738:	feffffff 	.word	0xfeffffff
 800273c:	ffc2ffff 	.word	0xffc2ffff

08002740 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0b3      	b.n	80028bc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002754:	4b5b      	ldr	r3, [pc, #364]	; (80028c4 <HAL_RCC_ClockConfig+0x184>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2201      	movs	r2, #1
 800275a:	4013      	ands	r3, r2
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d911      	bls.n	8002786 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b58      	ldr	r3, [pc, #352]	; (80028c4 <HAL_RCC_ClockConfig+0x184>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2201      	movs	r2, #1
 8002768:	4393      	bics	r3, r2
 800276a:	0019      	movs	r1, r3
 800276c:	4b55      	ldr	r3, [pc, #340]	; (80028c4 <HAL_RCC_ClockConfig+0x184>)
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002774:	4b53      	ldr	r3, [pc, #332]	; (80028c4 <HAL_RCC_ClockConfig+0x184>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2201      	movs	r2, #1
 800277a:	4013      	ands	r3, r2
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d001      	beq.n	8002786 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e09a      	b.n	80028bc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2202      	movs	r2, #2
 800278c:	4013      	ands	r3, r2
 800278e:	d015      	beq.n	80027bc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2204      	movs	r2, #4
 8002796:	4013      	ands	r3, r2
 8002798:	d006      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800279a:	4b4b      	ldr	r3, [pc, #300]	; (80028c8 <HAL_RCC_ClockConfig+0x188>)
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	4b4a      	ldr	r3, [pc, #296]	; (80028c8 <HAL_RCC_ClockConfig+0x188>)
 80027a0:	21e0      	movs	r1, #224	; 0xe0
 80027a2:	00c9      	lsls	r1, r1, #3
 80027a4:	430a      	orrs	r2, r1
 80027a6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a8:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCC_ClockConfig+0x188>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	22f0      	movs	r2, #240	; 0xf0
 80027ae:	4393      	bics	r3, r2
 80027b0:	0019      	movs	r1, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	4b44      	ldr	r3, [pc, #272]	; (80028c8 <HAL_RCC_ClockConfig+0x188>)
 80027b8:	430a      	orrs	r2, r1
 80027ba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2201      	movs	r2, #1
 80027c2:	4013      	ands	r3, r2
 80027c4:	d040      	beq.n	8002848 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ce:	4b3e      	ldr	r3, [pc, #248]	; (80028c8 <HAL_RCC_ClockConfig+0x188>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	029b      	lsls	r3, r3, #10
 80027d6:	4013      	ands	r3, r2
 80027d8:	d114      	bne.n	8002804 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06e      	b.n	80028bc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e6:	4b38      	ldr	r3, [pc, #224]	; (80028c8 <HAL_RCC_ClockConfig+0x188>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	049b      	lsls	r3, r3, #18
 80027ee:	4013      	ands	r3, r2
 80027f0:	d108      	bne.n	8002804 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e062      	b.n	80028bc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f6:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <HAL_RCC_ClockConfig+0x188>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2202      	movs	r2, #2
 80027fc:	4013      	ands	r3, r2
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e05b      	b.n	80028bc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002804:	4b30      	ldr	r3, [pc, #192]	; (80028c8 <HAL_RCC_ClockConfig+0x188>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2203      	movs	r2, #3
 800280a:	4393      	bics	r3, r2
 800280c:	0019      	movs	r1, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_RCC_ClockConfig+0x188>)
 8002814:	430a      	orrs	r2, r1
 8002816:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002818:	f7fe fc40 	bl	800109c <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002820:	e009      	b.n	8002836 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002822:	f7fe fc3b 	bl	800109c <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	4a27      	ldr	r2, [pc, #156]	; (80028cc <HAL_RCC_ClockConfig+0x18c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e042      	b.n	80028bc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_ClockConfig+0x188>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	220c      	movs	r2, #12
 800283c:	401a      	ands	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	429a      	cmp	r2, r3
 8002846:	d1ec      	bne.n	8002822 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002848:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <HAL_RCC_ClockConfig+0x184>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2201      	movs	r2, #1
 800284e:	4013      	ands	r3, r2
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d211      	bcs.n	800287a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <HAL_RCC_ClockConfig+0x184>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2201      	movs	r2, #1
 800285c:	4393      	bics	r3, r2
 800285e:	0019      	movs	r1, r3
 8002860:	4b18      	ldr	r3, [pc, #96]	; (80028c4 <HAL_RCC_ClockConfig+0x184>)
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002868:	4b16      	ldr	r3, [pc, #88]	; (80028c4 <HAL_RCC_ClockConfig+0x184>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2201      	movs	r2, #1
 800286e:	4013      	ands	r3, r2
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d001      	beq.n	800287a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e020      	b.n	80028bc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2204      	movs	r2, #4
 8002880:	4013      	ands	r3, r2
 8002882:	d009      	beq.n	8002898 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002884:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <HAL_RCC_ClockConfig+0x188>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a11      	ldr	r2, [pc, #68]	; (80028d0 <HAL_RCC_ClockConfig+0x190>)
 800288a:	4013      	ands	r3, r2
 800288c:	0019      	movs	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_RCC_ClockConfig+0x188>)
 8002894:	430a      	orrs	r2, r1
 8002896:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002898:	f000 f820 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800289c:	0001      	movs	r1, r0
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_RCC_ClockConfig+0x188>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	091b      	lsrs	r3, r3, #4
 80028a4:	220f      	movs	r2, #15
 80028a6:	4013      	ands	r3, r2
 80028a8:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <HAL_RCC_ClockConfig+0x194>)
 80028aa:	5cd3      	ldrb	r3, [r2, r3]
 80028ac:	000a      	movs	r2, r1
 80028ae:	40da      	lsrs	r2, r3
 80028b0:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x198>)
 80028b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7fe fbab 	bl	8001010 <HAL_InitTick>
  
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	0018      	movs	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	b004      	add	sp, #16
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40022000 	.word	0x40022000
 80028c8:	40021000 	.word	0x40021000
 80028cc:	00001388 	.word	0x00001388
 80028d0:	fffff8ff 	.word	0xfffff8ff
 80028d4:	080045a8 	.word	0x080045a8
 80028d8:	20000000 	.word	0x20000000

080028dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	2300      	movs	r3, #0
 80028f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80028f6:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	220c      	movs	r2, #12
 8002900:	4013      	ands	r3, r2
 8002902:	2b04      	cmp	r3, #4
 8002904:	d002      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x30>
 8002906:	2b08      	cmp	r3, #8
 8002908:	d003      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x36>
 800290a:	e02c      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_RCC_GetSysClockFreq+0xa0>)
 800290e:	613b      	str	r3, [r7, #16]
      break;
 8002910:	e02c      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	0c9b      	lsrs	r3, r3, #18
 8002916:	220f      	movs	r2, #15
 8002918:	4013      	ands	r3, r2
 800291a:	4a19      	ldr	r2, [pc, #100]	; (8002980 <HAL_RCC_GetSysClockFreq+0xa4>)
 800291c:	5cd3      	ldrb	r3, [r2, r3]
 800291e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002920:	4b15      	ldr	r3, [pc, #84]	; (8002978 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	220f      	movs	r2, #15
 8002926:	4013      	ands	r3, r2
 8002928:	4a16      	ldr	r2, [pc, #88]	; (8002984 <HAL_RCC_GetSysClockFreq+0xa8>)
 800292a:	5cd3      	ldrb	r3, [r2, r3]
 800292c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	025b      	lsls	r3, r3, #9
 8002934:	4013      	ands	r3, r2
 8002936:	d009      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	4810      	ldr	r0, [pc, #64]	; (800297c <HAL_RCC_GetSysClockFreq+0xa0>)
 800293c:	f7fd fbe4 	bl	8000108 <__udivsi3>
 8002940:	0003      	movs	r3, r0
 8002942:	001a      	movs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4353      	muls	r3, r2
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	e009      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	000a      	movs	r2, r1
 8002950:	0152      	lsls	r2, r2, #5
 8002952:	1a52      	subs	r2, r2, r1
 8002954:	0193      	lsls	r3, r2, #6
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	185b      	adds	r3, r3, r1
 800295c:	021b      	lsls	r3, r3, #8
 800295e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	613b      	str	r3, [r7, #16]
      break;
 8002964:	e002      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002966:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002968:	613b      	str	r3, [r7, #16]
      break;
 800296a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800296c:	693b      	ldr	r3, [r7, #16]
}
 800296e:	0018      	movs	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	b006      	add	sp, #24
 8002974:	bd80      	pop	{r7, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	40021000 	.word	0x40021000
 800297c:	007a1200 	.word	0x007a1200
 8002980:	080045c0 	.word	0x080045c0
 8002984:	080045d0 	.word	0x080045d0

08002988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800298c:	4b02      	ldr	r3, [pc, #8]	; (8002998 <HAL_RCC_GetHCLKFreq+0x10>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	0018      	movs	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	20000000 	.word	0x20000000

0800299c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80029a0:	f7ff fff2 	bl	8002988 <HAL_RCC_GetHCLKFreq>
 80029a4:	0001      	movs	r1, r0
 80029a6:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	2207      	movs	r2, #7
 80029ae:	4013      	ands	r3, r2
 80029b0:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029b2:	5cd3      	ldrb	r3, [r2, r3]
 80029b4:	40d9      	lsrs	r1, r3
 80029b6:	000b      	movs	r3, r1
}    
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	40021000 	.word	0x40021000
 80029c4:	080045b8 	.word	0x080045b8

080029c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	025b      	lsls	r3, r3, #9
 80029e0:	4013      	ands	r3, r2
 80029e2:	d100      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80029e4:	e08e      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80029e6:	2017      	movs	r0, #23
 80029e8:	183b      	adds	r3, r7, r0
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ee:	4b57      	ldr	r3, [pc, #348]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	2380      	movs	r3, #128	; 0x80
 80029f4:	055b      	lsls	r3, r3, #21
 80029f6:	4013      	ands	r3, r2
 80029f8:	d110      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029fa:	4b54      	ldr	r3, [pc, #336]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	4b53      	ldr	r3, [pc, #332]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a00:	2180      	movs	r1, #128	; 0x80
 8002a02:	0549      	lsls	r1, r1, #21
 8002a04:	430a      	orrs	r2, r1
 8002a06:	61da      	str	r2, [r3, #28]
 8002a08:	4b50      	ldr	r3, [pc, #320]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	2380      	movs	r3, #128	; 0x80
 8002a0e:	055b      	lsls	r3, r3, #21
 8002a10:	4013      	ands	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a16:	183b      	adds	r3, r7, r0
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1c:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4013      	ands	r3, r2
 8002a26:	d11a      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a28:	4b49      	ldr	r3, [pc, #292]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b48      	ldr	r3, [pc, #288]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	0049      	lsls	r1, r1, #1
 8002a32:	430a      	orrs	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a36:	f7fe fb31 	bl	800109c <HAL_GetTick>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3e:	e008      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a40:	f7fe fb2c 	bl	800109c <HAL_GetTick>
 8002a44:	0002      	movs	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e077      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a52:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a5e:	4b3b      	ldr	r3, [pc, #236]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a60:	6a1a      	ldr	r2, [r3, #32]
 8002a62:	23c0      	movs	r3, #192	; 0xc0
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4013      	ands	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d034      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	23c0      	movs	r3, #192	; 0xc0
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d02c      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a80:	4b32      	ldr	r3, [pc, #200]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	4a33      	ldr	r2, [pc, #204]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a8a:	4b30      	ldr	r3, [pc, #192]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a8c:	6a1a      	ldr	r2, [r3, #32]
 8002a8e:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a90:	2180      	movs	r1, #128	; 0x80
 8002a92:	0249      	lsls	r1, r1, #9
 8002a94:	430a      	orrs	r2, r1
 8002a96:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a98:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a9a:	6a1a      	ldr	r2, [r3, #32]
 8002a9c:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a9e:	492e      	ldr	r1, [pc, #184]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002aa4:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d013      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab2:	f7fe faf3 	bl	800109c <HAL_GetTick>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aba:	e009      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abc:	f7fe faee 	bl	800109c <HAL_GetTick>
 8002ac0:	0002      	movs	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	4a25      	ldr	r2, [pc, #148]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e038      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ada:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	0019      	movs	r1, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	4b18      	ldr	r3, [pc, #96]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aea:	430a      	orrs	r2, r1
 8002aec:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002aee:	2317      	movs	r3, #23
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d105      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af8:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002afa:	69da      	ldr	r2, [r3, #28]
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002afe:	4918      	ldr	r1, [pc, #96]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002b00:	400a      	ands	r2, r1
 8002b02:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d009      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	2203      	movs	r2, #3
 8002b14:	4393      	bics	r3, r2
 8002b16:	0019      	movs	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2220      	movs	r2, #32
 8002b28:	4013      	ands	r3, r2
 8002b2a:	d009      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b2c:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	2210      	movs	r2, #16
 8002b32:	4393      	bics	r3, r2
 8002b34:	0019      	movs	r1, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	0018      	movs	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b006      	add	sp, #24
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40007000 	.word	0x40007000
 8002b54:	fffffcff 	.word	0xfffffcff
 8002b58:	fffeffff 	.word	0xfffeffff
 8002b5c:	00001388 	.word	0x00001388
 8002b60:	efffffff 	.word	0xefffffff

08002b64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e042      	b.n	8002bfc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	223d      	movs	r2, #61	; 0x3d
 8002b7a:	5c9b      	ldrb	r3, [r3, r2]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d107      	bne.n	8002b92 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	223c      	movs	r2, #60	; 0x3c
 8002b86:	2100      	movs	r1, #0
 8002b88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f7fe f945 	bl	8000e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	223d      	movs	r2, #61	; 0x3d
 8002b96:	2102      	movs	r1, #2
 8002b98:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	0010      	movs	r0, r2
 8002ba6:	f000 f9af 	bl	8002f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2246      	movs	r2, #70	; 0x46
 8002bae:	2101      	movs	r1, #1
 8002bb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	223e      	movs	r2, #62	; 0x3e
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	223f      	movs	r2, #63	; 0x3f
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	5499      	strb	r1, [r3, r2]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2240      	movs	r2, #64	; 0x40
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2241      	movs	r2, #65	; 0x41
 8002bce:	2101      	movs	r1, #1
 8002bd0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2242      	movs	r2, #66	; 0x42
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2243      	movs	r2, #67	; 0x43
 8002bde:	2101      	movs	r1, #1
 8002be0:	5499      	strb	r1, [r3, r2]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2244      	movs	r2, #68	; 0x44
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2245      	movs	r2, #69	; 0x45
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	223d      	movs	r2, #61	; 0x3d
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b002      	add	sp, #8
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	223d      	movs	r2, #61	; 0x3d
 8002c10:	5c9b      	ldrb	r3, [r3, r2]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d001      	beq.n	8002c1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e036      	b.n	8002c8a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	223d      	movs	r2, #61	; 0x3d
 8002c20:	2102      	movs	r1, #2
 8002c22:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2101      	movs	r1, #1
 8002c30:	430a      	orrs	r2, r1
 8002c32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a16      	ldr	r2, [pc, #88]	; (8002c94 <HAL_TIM_Base_Start_IT+0x90>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d00a      	beq.n	8002c54 <HAL_TIM_Base_Start_IT+0x50>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	05db      	lsls	r3, r3, #23
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d004      	beq.n	8002c54 <HAL_TIM_Base_Start_IT+0x50>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a12      	ldr	r2, [pc, #72]	; (8002c98 <HAL_TIM_Base_Start_IT+0x94>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d111      	bne.n	8002c78 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2207      	movs	r2, #7
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b06      	cmp	r3, #6
 8002c64:	d010      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2101      	movs	r1, #1
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c76:	e007      	b.n	8002c88 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2101      	movs	r1, #1
 8002c84:	430a      	orrs	r2, r1
 8002c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b004      	add	sp, #16
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40000400 	.word	0x40000400

08002c9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	2202      	movs	r2, #2
 8002cac:	4013      	ands	r3, r2
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d124      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d11d      	bne.n	8002cfc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	4252      	negs	r2, r2
 8002cc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f000 f8fa 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002ce4:	e007      	b.n	8002cf6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 f8ed 	bl	8002ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f000 f8f9 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2204      	movs	r2, #4
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d125      	bne.n	8002d56 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2204      	movs	r2, #4
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d11e      	bne.n	8002d56 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2205      	movs	r2, #5
 8002d1e:	4252      	negs	r2, r2
 8002d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699a      	ldr	r2, [r3, #24]
 8002d2e:	23c0      	movs	r3, #192	; 0xc0
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4013      	ands	r3, r2
 8002d34:	d004      	beq.n	8002d40 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f000 f8cd 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002d3e:	e007      	b.n	8002d50 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 f8c0 	bl	8002ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 f8cc 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d124      	bne.n	8002dae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2208      	movs	r2, #8
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d11d      	bne.n	8002dae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2209      	movs	r2, #9
 8002d78:	4252      	negs	r2, r2
 8002d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2204      	movs	r2, #4
 8002d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	2203      	movs	r2, #3
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d004      	beq.n	8002d98 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	0018      	movs	r0, r3
 8002d92:	f000 f8a1 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002d96:	e007      	b.n	8002da8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f000 f894 	bl	8002ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	0018      	movs	r0, r3
 8002da4:	f000 f8a0 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	2210      	movs	r2, #16
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d125      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2210      	movs	r2, #16
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b10      	cmp	r3, #16
 8002dc8:	d11e      	bne.n	8002e08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2211      	movs	r2, #17
 8002dd0:	4252      	negs	r2, r2
 8002dd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2208      	movs	r2, #8
 8002dd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69da      	ldr	r2, [r3, #28]
 8002de0:	23c0      	movs	r3, #192	; 0xc0
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4013      	ands	r3, r2
 8002de6:	d004      	beq.n	8002df2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 f874 	bl	8002ed8 <HAL_TIM_IC_CaptureCallback>
 8002df0:	e007      	b.n	8002e02 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f000 f867 	bl	8002ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f000 f873 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4013      	ands	r3, r2
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d10f      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d108      	bne.n	8002e36 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	4252      	negs	r2, r2
 8002e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7fd fdc1 	bl	80009b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	2280      	movs	r2, #128	; 0x80
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b80      	cmp	r3, #128	; 0x80
 8002e42:	d10f      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b80      	cmp	r3, #128	; 0x80
 8002e50:	d108      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2281      	movs	r2, #129	; 0x81
 8002e58:	4252      	negs	r2, r2
 8002e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f000 f8d0 	bl	8003004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2240      	movs	r2, #64	; 0x40
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b40      	cmp	r3, #64	; 0x40
 8002e70:	d10f      	bne.n	8002e92 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	2240      	movs	r2, #64	; 0x40
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	d108      	bne.n	8002e92 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2241      	movs	r2, #65	; 0x41
 8002e86:	4252      	negs	r2, r2
 8002e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 f833 	bl	8002ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d10f      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	d108      	bne.n	8002ec0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2221      	movs	r2, #33	; 0x21
 8002eb4:	4252      	negs	r2, r2
 8002eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 f89a 	bl	8002ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b002      	add	sp, #8
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b002      	add	sp, #8
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b002      	add	sp, #8
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a30      	ldr	r2, [pc, #192]	; (8002fdc <TIM_Base_SetConfig+0xd4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d008      	beq.n	8002f32 <TIM_Base_SetConfig+0x2a>
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	05db      	lsls	r3, r3, #23
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d003      	beq.n	8002f32 <TIM_Base_SetConfig+0x2a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a2c      	ldr	r2, [pc, #176]	; (8002fe0 <TIM_Base_SetConfig+0xd8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d108      	bne.n	8002f44 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2270      	movs	r2, #112	; 0x70
 8002f36:	4393      	bics	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a25      	ldr	r2, [pc, #148]	; (8002fdc <TIM_Base_SetConfig+0xd4>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d014      	beq.n	8002f76 <TIM_Base_SetConfig+0x6e>
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	05db      	lsls	r3, r3, #23
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d00f      	beq.n	8002f76 <TIM_Base_SetConfig+0x6e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a21      	ldr	r2, [pc, #132]	; (8002fe0 <TIM_Base_SetConfig+0xd8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00b      	beq.n	8002f76 <TIM_Base_SetConfig+0x6e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a20      	ldr	r2, [pc, #128]	; (8002fe4 <TIM_Base_SetConfig+0xdc>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d007      	beq.n	8002f76 <TIM_Base_SetConfig+0x6e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <TIM_Base_SetConfig+0xe0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d003      	beq.n	8002f76 <TIM_Base_SetConfig+0x6e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a1e      	ldr	r2, [pc, #120]	; (8002fec <TIM_Base_SetConfig+0xe4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d108      	bne.n	8002f88 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4a1d      	ldr	r2, [pc, #116]	; (8002ff0 <TIM_Base_SetConfig+0xe8>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2280      	movs	r2, #128	; 0x80
 8002f8c:	4393      	bics	r3, r2
 8002f8e:	001a      	movs	r2, r3
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a0a      	ldr	r2, [pc, #40]	; (8002fdc <TIM_Base_SetConfig+0xd4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <TIM_Base_SetConfig+0xbe>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a0b      	ldr	r2, [pc, #44]	; (8002fe8 <TIM_Base_SetConfig+0xe0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d003      	beq.n	8002fc6 <TIM_Base_SetConfig+0xbe>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <TIM_Base_SetConfig+0xe4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d103      	bne.n	8002fce <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	615a      	str	r2, [r3, #20]
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b004      	add	sp, #16
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40012c00 	.word	0x40012c00
 8002fe0:	40000400 	.word	0x40000400
 8002fe4:	40002000 	.word	0x40002000
 8002fe8:	40014400 	.word	0x40014400
 8002fec:	40014800 	.word	0x40014800
 8002ff0:	fffffcff 	.word	0xfffffcff

08002ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ffc:	46c0      	nop			; (mov r8, r8)
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b002      	add	sp, #8
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	46bd      	mov	sp, r7
 8003010:	b002      	add	sp, #8
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e044      	b.n	80030b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d107      	bne.n	800303e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2278      	movs	r2, #120	; 0x78
 8003032:	2100      	movs	r1, #0
 8003034:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	0018      	movs	r0, r3
 800303a:	f7fd ff17 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2224      	movs	r2, #36	; 0x24
 8003042:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2101      	movs	r1, #1
 8003050:	438a      	bics	r2, r1
 8003052:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	0018      	movs	r0, r3
 8003058:	f000 fc2c 	bl	80038b4 <UART_SetConfig>
 800305c:	0003      	movs	r3, r0
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e024      	b.n	80030b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	0018      	movs	r0, r3
 8003072:	f000 fd47 	bl	8003b04 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	490d      	ldr	r1, [pc, #52]	; (80030b8 <HAL_UART_Init+0xa4>)
 8003082:	400a      	ands	r2, r1
 8003084:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	212a      	movs	r1, #42	; 0x2a
 8003092:	438a      	bics	r2, r1
 8003094:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2101      	movs	r1, #1
 80030a2:	430a      	orrs	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	0018      	movs	r0, r3
 80030aa:	f000 fddf 	bl	8003c6c <UART_CheckIdleState>
 80030ae:	0003      	movs	r3, r0
}
 80030b0:	0018      	movs	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b002      	add	sp, #8
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	ffffb7ff 	.word	0xffffb7ff

080030bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	; 0x28
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	1dbb      	adds	r3, r7, #6
 80030ca:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d000      	beq.n	80030d6 <HAL_UART_Transmit+0x1a>
 80030d4:	e08d      	b.n	80031f2 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_UART_Transmit+0x28>
 80030dc:	1dbb      	adds	r3, r7, #6
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e085      	b.n	80031f4 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	015b      	lsls	r3, r3, #5
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d109      	bne.n	8003108 <HAL_UART_Transmit+0x4c>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d105      	bne.n	8003108 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2201      	movs	r2, #1
 8003100:	4013      	ands	r3, r2
 8003102:	d001      	beq.n	8003108 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e075      	b.n	80031f4 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2284      	movs	r2, #132	; 0x84
 800310c:	2100      	movs	r1, #0
 800310e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2221      	movs	r2, #33	; 0x21
 8003114:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003116:	f7fd ffc1 	bl	800109c <HAL_GetTick>
 800311a:	0003      	movs	r3, r0
 800311c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1dba      	adds	r2, r7, #6
 8003122:	2150      	movs	r1, #80	; 0x50
 8003124:	8812      	ldrh	r2, [r2, #0]
 8003126:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1dba      	adds	r2, r7, #6
 800312c:	2152      	movs	r1, #82	; 0x52
 800312e:	8812      	ldrh	r2, [r2, #0]
 8003130:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	2380      	movs	r3, #128	; 0x80
 8003138:	015b      	lsls	r3, r3, #5
 800313a:	429a      	cmp	r2, r3
 800313c:	d108      	bne.n	8003150 <HAL_UART_Transmit+0x94>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d104      	bne.n	8003150 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	e003      	b.n	8003158 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003154:	2300      	movs	r3, #0
 8003156:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003158:	e030      	b.n	80031bc <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	0013      	movs	r3, r2
 8003164:	2200      	movs	r2, #0
 8003166:	2180      	movs	r1, #128	; 0x80
 8003168:	f000 fe28 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 800316c:	1e03      	subs	r3, r0, #0
 800316e:	d004      	beq.n	800317a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e03c      	b.n	80031f4 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10b      	bne.n	8003198 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	881a      	ldrh	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	05d2      	lsls	r2, r2, #23
 800318a:	0dd2      	lsrs	r2, r2, #23
 800318c:	b292      	uxth	r2, r2
 800318e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	3302      	adds	r3, #2
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	e008      	b.n	80031aa <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	781a      	ldrb	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	b292      	uxth	r2, r2
 80031a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	3301      	adds	r3, #1
 80031a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2252      	movs	r2, #82	; 0x52
 80031ae:	5a9b      	ldrh	r3, [r3, r2]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b299      	uxth	r1, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2252      	movs	r2, #82	; 0x52
 80031ba:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2252      	movs	r2, #82	; 0x52
 80031c0:	5a9b      	ldrh	r3, [r3, r2]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1c8      	bne.n	800315a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	0013      	movs	r3, r2
 80031d2:	2200      	movs	r2, #0
 80031d4:	2140      	movs	r1, #64	; 0x40
 80031d6:	f000 fdf1 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 80031da:	1e03      	subs	r3, r0, #0
 80031dc:	d004      	beq.n	80031e8 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e005      	b.n	80031f4 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e000      	b.n	80031f4 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 80031f2:	2302      	movs	r3, #2
  }
}
 80031f4:	0018      	movs	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b008      	add	sp, #32
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	1dbb      	adds	r3, r7, #6
 8003208:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2280      	movs	r2, #128	; 0x80
 800320e:	589b      	ldr	r3, [r3, r2]
 8003210:	2b20      	cmp	r3, #32
 8003212:	d145      	bne.n	80032a0 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_UART_Receive_IT+0x26>
 800321a:	1dbb      	adds	r3, r7, #6
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e03d      	b.n	80032a2 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	015b      	lsls	r3, r3, #5
 800322e:	429a      	cmp	r2, r3
 8003230:	d109      	bne.n	8003246 <HAL_UART_Receive_IT+0x4a>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d105      	bne.n	8003246 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2201      	movs	r2, #1
 800323e:	4013      	ands	r3, r2
 8003240:	d001      	beq.n	8003246 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e02d      	b.n	80032a2 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	4013      	ands	r3, r2
 8003258:	d019      	beq.n	800328e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800325a:	f3ef 8310 	mrs	r3, PRIMASK
 800325e:	613b      	str	r3, [r7, #16]
  return(result);
 8003260:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003262:	61fb      	str	r3, [r7, #28]
 8003264:	2301      	movs	r3, #1
 8003266:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	f383 8810 	msr	PRIMASK, r3
}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2180      	movs	r1, #128	; 0x80
 800327c:	04c9      	lsls	r1, r1, #19
 800327e:	430a      	orrs	r2, r1
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	f383 8810 	msr	PRIMASK, r3
}
 800328c:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800328e:	1dbb      	adds	r3, r7, #6
 8003290:	881a      	ldrh	r2, [r3, #0]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	0018      	movs	r0, r3
 8003298:	f000 fdfa 	bl	8003e90 <UART_Start_Receive_IT>
 800329c:	0003      	movs	r3, r0
 800329e:	e000      	b.n	80032a2 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80032a0:	2302      	movs	r3, #2
  }
}
 80032a2:	0018      	movs	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b008      	add	sp, #32
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b0ab      	sub	sp, #172	; 0xac
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	22a4      	movs	r2, #164	; 0xa4
 80032bc:	18b9      	adds	r1, r7, r2
 80032be:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	20a0      	movs	r0, #160	; 0xa0
 80032c8:	1839      	adds	r1, r7, r0
 80032ca:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	219c      	movs	r1, #156	; 0x9c
 80032d4:	1879      	adds	r1, r7, r1
 80032d6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032d8:	0011      	movs	r1, r2
 80032da:	18bb      	adds	r3, r7, r2
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a99      	ldr	r2, [pc, #612]	; (8003544 <HAL_UART_IRQHandler+0x298>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	2298      	movs	r2, #152	; 0x98
 80032e4:	18bc      	adds	r4, r7, r2
 80032e6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80032e8:	18bb      	adds	r3, r7, r2
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d114      	bne.n	800331a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2220      	movs	r2, #32
 80032f6:	4013      	ands	r3, r2
 80032f8:	d00f      	beq.n	800331a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032fa:	183b      	adds	r3, r7, r0
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2220      	movs	r2, #32
 8003300:	4013      	ands	r3, r2
 8003302:	d00a      	beq.n	800331a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003308:	2b00      	cmp	r3, #0
 800330a:	d100      	bne.n	800330e <HAL_UART_IRQHandler+0x62>
 800330c:	e29e      	b.n	800384c <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	0010      	movs	r0, r2
 8003316:	4798      	blx	r3
      }
      return;
 8003318:	e298      	b.n	800384c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800331a:	2398      	movs	r3, #152	; 0x98
 800331c:	18fb      	adds	r3, r7, r3
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d100      	bne.n	8003326 <HAL_UART_IRQHandler+0x7a>
 8003324:	e114      	b.n	8003550 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003326:	239c      	movs	r3, #156	; 0x9c
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2201      	movs	r2, #1
 800332e:	4013      	ands	r3, r2
 8003330:	d106      	bne.n	8003340 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003332:	23a0      	movs	r3, #160	; 0xa0
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a83      	ldr	r2, [pc, #524]	; (8003548 <HAL_UART_IRQHandler+0x29c>)
 800333a:	4013      	ands	r3, r2
 800333c:	d100      	bne.n	8003340 <HAL_UART_IRQHandler+0x94>
 800333e:	e107      	b.n	8003550 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003340:	23a4      	movs	r3, #164	; 0xa4
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2201      	movs	r2, #1
 8003348:	4013      	ands	r3, r2
 800334a:	d012      	beq.n	8003372 <HAL_UART_IRQHandler+0xc6>
 800334c:	23a0      	movs	r3, #160	; 0xa0
 800334e:	18fb      	adds	r3, r7, r3
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4013      	ands	r3, r2
 8003358:	d00b      	beq.n	8003372 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2201      	movs	r2, #1
 8003360:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2284      	movs	r2, #132	; 0x84
 8003366:	589b      	ldr	r3, [r3, r2]
 8003368:	2201      	movs	r2, #1
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2184      	movs	r1, #132	; 0x84
 8003370:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003372:	23a4      	movs	r3, #164	; 0xa4
 8003374:	18fb      	adds	r3, r7, r3
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2202      	movs	r2, #2
 800337a:	4013      	ands	r3, r2
 800337c:	d011      	beq.n	80033a2 <HAL_UART_IRQHandler+0xf6>
 800337e:	239c      	movs	r3, #156	; 0x9c
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2201      	movs	r2, #1
 8003386:	4013      	ands	r3, r2
 8003388:	d00b      	beq.n	80033a2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2202      	movs	r2, #2
 8003390:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2284      	movs	r2, #132	; 0x84
 8003396:	589b      	ldr	r3, [r3, r2]
 8003398:	2204      	movs	r2, #4
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2184      	movs	r1, #132	; 0x84
 80033a0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80033a2:	23a4      	movs	r3, #164	; 0xa4
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2204      	movs	r2, #4
 80033aa:	4013      	ands	r3, r2
 80033ac:	d011      	beq.n	80033d2 <HAL_UART_IRQHandler+0x126>
 80033ae:	239c      	movs	r3, #156	; 0x9c
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2201      	movs	r2, #1
 80033b6:	4013      	ands	r3, r2
 80033b8:	d00b      	beq.n	80033d2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2204      	movs	r2, #4
 80033c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2284      	movs	r2, #132	; 0x84
 80033c6:	589b      	ldr	r3, [r3, r2]
 80033c8:	2202      	movs	r2, #2
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2184      	movs	r1, #132	; 0x84
 80033d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033d2:	23a4      	movs	r3, #164	; 0xa4
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2208      	movs	r2, #8
 80033da:	4013      	ands	r3, r2
 80033dc:	d017      	beq.n	800340e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033de:	23a0      	movs	r3, #160	; 0xa0
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2220      	movs	r2, #32
 80033e6:	4013      	ands	r3, r2
 80033e8:	d105      	bne.n	80033f6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033ea:	239c      	movs	r3, #156	; 0x9c
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2201      	movs	r2, #1
 80033f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033f4:	d00b      	beq.n	800340e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2208      	movs	r2, #8
 80033fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2284      	movs	r2, #132	; 0x84
 8003402:	589b      	ldr	r3, [r3, r2]
 8003404:	2208      	movs	r2, #8
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2184      	movs	r1, #132	; 0x84
 800340c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800340e:	23a4      	movs	r3, #164	; 0xa4
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	4013      	ands	r3, r2
 800341a:	d013      	beq.n	8003444 <HAL_UART_IRQHandler+0x198>
 800341c:	23a0      	movs	r3, #160	; 0xa0
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	2380      	movs	r3, #128	; 0x80
 8003424:	04db      	lsls	r3, r3, #19
 8003426:	4013      	ands	r3, r2
 8003428:	d00c      	beq.n	8003444 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2280      	movs	r2, #128	; 0x80
 8003430:	0112      	lsls	r2, r2, #4
 8003432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2284      	movs	r2, #132	; 0x84
 8003438:	589b      	ldr	r3, [r3, r2]
 800343a:	2220      	movs	r2, #32
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2184      	movs	r1, #132	; 0x84
 8003442:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2284      	movs	r2, #132	; 0x84
 8003448:	589b      	ldr	r3, [r3, r2]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d100      	bne.n	8003450 <HAL_UART_IRQHandler+0x1a4>
 800344e:	e1ff      	b.n	8003850 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003450:	23a4      	movs	r3, #164	; 0xa4
 8003452:	18fb      	adds	r3, r7, r3
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2220      	movs	r2, #32
 8003458:	4013      	ands	r3, r2
 800345a:	d00e      	beq.n	800347a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800345c:	23a0      	movs	r3, #160	; 0xa0
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2220      	movs	r2, #32
 8003464:	4013      	ands	r3, r2
 8003466:	d008      	beq.n	800347a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800346c:	2b00      	cmp	r3, #0
 800346e:	d004      	beq.n	800347a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	0010      	movs	r0, r2
 8003478:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2284      	movs	r2, #132	; 0x84
 800347e:	589b      	ldr	r3, [r3, r2]
 8003480:	2194      	movs	r1, #148	; 0x94
 8003482:	187a      	adds	r2, r7, r1
 8003484:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2240      	movs	r2, #64	; 0x40
 800348e:	4013      	ands	r3, r2
 8003490:	2b40      	cmp	r3, #64	; 0x40
 8003492:	d004      	beq.n	800349e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003494:	187b      	adds	r3, r7, r1
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2228      	movs	r2, #40	; 0x28
 800349a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800349c:	d047      	beq.n	800352e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 fdab 	bl	8003ffc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2240      	movs	r2, #64	; 0x40
 80034ae:	4013      	ands	r3, r2
 80034b0:	2b40      	cmp	r3, #64	; 0x40
 80034b2:	d137      	bne.n	8003524 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b4:	f3ef 8310 	mrs	r3, PRIMASK
 80034b8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80034ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034bc:	2090      	movs	r0, #144	; 0x90
 80034be:	183a      	adds	r2, r7, r0
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	2301      	movs	r3, #1
 80034c4:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034c8:	f383 8810 	msr	PRIMASK, r3
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2140      	movs	r1, #64	; 0x40
 80034da:	438a      	bics	r2, r1
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	183b      	adds	r3, r7, r0
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034e6:	f383 8810 	msr	PRIMASK, r3
}
 80034ea:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d012      	beq.n	800351a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f8:	4a14      	ldr	r2, [pc, #80]	; (800354c <HAL_UART_IRQHandler+0x2a0>)
 80034fa:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003500:	0018      	movs	r0, r3
 8003502:	f7fd feeb 	bl	80012dc <HAL_DMA_Abort_IT>
 8003506:	1e03      	subs	r3, r0, #0
 8003508:	d01a      	beq.n	8003540 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003514:	0018      	movs	r0, r3
 8003516:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003518:	e012      	b.n	8003540 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	0018      	movs	r0, r3
 800351e:	f000 f9b5 	bl	800388c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003522:	e00d      	b.n	8003540 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	0018      	movs	r0, r3
 8003528:	f000 f9b0 	bl	800388c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800352c:	e008      	b.n	8003540 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	0018      	movs	r0, r3
 8003532:	f000 f9ab 	bl	800388c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2284      	movs	r2, #132	; 0x84
 800353a:	2100      	movs	r1, #0
 800353c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800353e:	e187      	b.n	8003850 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003540:	46c0      	nop			; (mov r8, r8)
    return;
 8003542:	e185      	b.n	8003850 <HAL_UART_IRQHandler+0x5a4>
 8003544:	0000080f 	.word	0x0000080f
 8003548:	04000120 	.word	0x04000120
 800354c:	080040c5 	.word	0x080040c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003554:	2b01      	cmp	r3, #1
 8003556:	d000      	beq.n	800355a <HAL_UART_IRQHandler+0x2ae>
 8003558:	e139      	b.n	80037ce <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800355a:	23a4      	movs	r3, #164	; 0xa4
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2210      	movs	r2, #16
 8003562:	4013      	ands	r3, r2
 8003564:	d100      	bne.n	8003568 <HAL_UART_IRQHandler+0x2bc>
 8003566:	e132      	b.n	80037ce <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003568:	23a0      	movs	r3, #160	; 0xa0
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2210      	movs	r2, #16
 8003570:	4013      	ands	r3, r2
 8003572:	d100      	bne.n	8003576 <HAL_UART_IRQHandler+0x2ca>
 8003574:	e12b      	b.n	80037ce <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2210      	movs	r2, #16
 800357c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2240      	movs	r2, #64	; 0x40
 8003586:	4013      	ands	r3, r2
 8003588:	2b40      	cmp	r3, #64	; 0x40
 800358a:	d000      	beq.n	800358e <HAL_UART_IRQHandler+0x2e2>
 800358c:	e09f      	b.n	80036ce <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	217e      	movs	r1, #126	; 0x7e
 8003598:	187b      	adds	r3, r7, r1
 800359a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800359c:	187b      	adds	r3, r7, r1
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d100      	bne.n	80035a6 <HAL_UART_IRQHandler+0x2fa>
 80035a4:	e156      	b.n	8003854 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2258      	movs	r2, #88	; 0x58
 80035aa:	5a9b      	ldrh	r3, [r3, r2]
 80035ac:	187a      	adds	r2, r7, r1
 80035ae:	8812      	ldrh	r2, [r2, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d300      	bcc.n	80035b6 <HAL_UART_IRQHandler+0x30a>
 80035b4:	e14e      	b.n	8003854 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	187a      	adds	r2, r7, r1
 80035ba:	215a      	movs	r1, #90	; 0x5a
 80035bc:	8812      	ldrh	r2, [r2, #0]
 80035be:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	d06f      	beq.n	80036aa <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ca:	f3ef 8310 	mrs	r3, PRIMASK
 80035ce:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80035d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80035d4:	2301      	movs	r3, #1
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035da:	f383 8810 	msr	PRIMASK, r3
}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	499e      	ldr	r1, [pc, #632]	; (8003864 <HAL_UART_IRQHandler+0x5b8>)
 80035ec:	400a      	ands	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f6:	f383 8810 	msr	PRIMASK, r3
}
 80035fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003600:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003604:	677b      	str	r3, [r7, #116]	; 0x74
 8003606:	2301      	movs	r3, #1
 8003608:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800360c:	f383 8810 	msr	PRIMASK, r3
}
 8003610:	46c0      	nop			; (mov r8, r8)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2101      	movs	r1, #1
 800361e:	438a      	bics	r2, r1
 8003620:	609a      	str	r2, [r3, #8]
 8003622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003624:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003628:	f383 8810 	msr	PRIMASK, r3
}
 800362c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800362e:	f3ef 8310 	mrs	r3, PRIMASK
 8003632:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003634:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003636:	673b      	str	r3, [r7, #112]	; 0x70
 8003638:	2301      	movs	r3, #1
 800363a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363e:	f383 8810 	msr	PRIMASK, r3
}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2140      	movs	r1, #64	; 0x40
 8003650:	438a      	bics	r2, r1
 8003652:	609a      	str	r2, [r3, #8]
 8003654:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003656:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800365a:	f383 8810 	msr	PRIMASK, r3
}
 800365e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2280      	movs	r2, #128	; 0x80
 8003664:	2120      	movs	r1, #32
 8003666:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800366e:	f3ef 8310 	mrs	r3, PRIMASK
 8003672:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003674:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003676:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003678:	2301      	movs	r3, #1
 800367a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800367e:	f383 8810 	msr	PRIMASK, r3
}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2110      	movs	r1, #16
 8003690:	438a      	bics	r2, r1
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003696:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800369a:	f383 8810 	msr	PRIMASK, r3
}
 800369e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a4:	0018      	movs	r0, r3
 80036a6:	f7fd fde1 	bl	800126c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2202      	movs	r2, #2
 80036ae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2258      	movs	r2, #88	; 0x58
 80036b4:	5a9a      	ldrh	r2, [r3, r2]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	215a      	movs	r1, #90	; 0x5a
 80036ba:	5a5b      	ldrh	r3, [r3, r1]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	0011      	movs	r1, r2
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 f8e8 	bl	800389c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036cc:	e0c2      	b.n	8003854 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2258      	movs	r2, #88	; 0x58
 80036d2:	5a99      	ldrh	r1, [r3, r2]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	225a      	movs	r2, #90	; 0x5a
 80036d8:	5a9b      	ldrh	r3, [r3, r2]
 80036da:	b29a      	uxth	r2, r3
 80036dc:	208e      	movs	r0, #142	; 0x8e
 80036de:	183b      	adds	r3, r7, r0
 80036e0:	1a8a      	subs	r2, r1, r2
 80036e2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	225a      	movs	r2, #90	; 0x5a
 80036e8:	5a9b      	ldrh	r3, [r3, r2]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d100      	bne.n	80036f2 <HAL_UART_IRQHandler+0x446>
 80036f0:	e0b2      	b.n	8003858 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80036f2:	183b      	adds	r3, r7, r0
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d100      	bne.n	80036fc <HAL_UART_IRQHandler+0x450>
 80036fa:	e0ad      	b.n	8003858 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003700:	60fb      	str	r3, [r7, #12]
  return(result);
 8003702:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003704:	2488      	movs	r4, #136	; 0x88
 8003706:	193a      	adds	r2, r7, r4
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	2301      	movs	r3, #1
 800370c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f383 8810 	msr	PRIMASK, r3
}
 8003714:	46c0      	nop			; (mov r8, r8)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4951      	ldr	r1, [pc, #324]	; (8003868 <HAL_UART_IRQHandler+0x5bc>)
 8003722:	400a      	ands	r2, r1
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	193b      	adds	r3, r7, r4
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f383 8810 	msr	PRIMASK, r3
}
 8003732:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003734:	f3ef 8310 	mrs	r3, PRIMASK
 8003738:	61bb      	str	r3, [r7, #24]
  return(result);
 800373a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373c:	2484      	movs	r4, #132	; 0x84
 800373e:	193a      	adds	r2, r7, r4
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	2301      	movs	r3, #1
 8003744:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f383 8810 	msr	PRIMASK, r3
}
 800374c:	46c0      	nop			; (mov r8, r8)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2101      	movs	r1, #1
 800375a:	438a      	bics	r2, r1
 800375c:	609a      	str	r2, [r3, #8]
 800375e:	193b      	adds	r3, r7, r4
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	f383 8810 	msr	PRIMASK, r3
}
 800376a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2280      	movs	r2, #128	; 0x80
 8003770:	2120      	movs	r1, #32
 8003772:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003780:	f3ef 8310 	mrs	r3, PRIMASK
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003788:	2480      	movs	r4, #128	; 0x80
 800378a:	193a      	adds	r2, r7, r4
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	2301      	movs	r3, #1
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	f383 8810 	msr	PRIMASK, r3
}
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2110      	movs	r1, #16
 80037a6:	438a      	bics	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	193b      	adds	r3, r7, r4
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b2:	f383 8810 	msr	PRIMASK, r3
}
 80037b6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037be:	183b      	adds	r3, r7, r0
 80037c0:	881a      	ldrh	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	0011      	movs	r1, r2
 80037c6:	0018      	movs	r0, r3
 80037c8:	f000 f868 	bl	800389c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037cc:	e044      	b.n	8003858 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037ce:	23a4      	movs	r3, #164	; 0xa4
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	035b      	lsls	r3, r3, #13
 80037d8:	4013      	ands	r3, r2
 80037da:	d010      	beq.n	80037fe <HAL_UART_IRQHandler+0x552>
 80037dc:	239c      	movs	r3, #156	; 0x9c
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	03db      	lsls	r3, r3, #15
 80037e6:	4013      	ands	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2280      	movs	r2, #128	; 0x80
 80037f0:	0352      	lsls	r2, r2, #13
 80037f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	0018      	movs	r0, r3
 80037f8:	f000 fe5e 	bl	80044b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037fc:	e02f      	b.n	800385e <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037fe:	23a4      	movs	r3, #164	; 0xa4
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2280      	movs	r2, #128	; 0x80
 8003806:	4013      	ands	r3, r2
 8003808:	d00f      	beq.n	800382a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800380a:	23a0      	movs	r3, #160	; 0xa0
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2280      	movs	r2, #128	; 0x80
 8003812:	4013      	ands	r3, r2
 8003814:	d009      	beq.n	800382a <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d01e      	beq.n	800385c <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	0010      	movs	r0, r2
 8003826:	4798      	blx	r3
    }
    return;
 8003828:	e018      	b.n	800385c <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800382a:	23a4      	movs	r3, #164	; 0xa4
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2240      	movs	r2, #64	; 0x40
 8003832:	4013      	ands	r3, r2
 8003834:	d013      	beq.n	800385e <HAL_UART_IRQHandler+0x5b2>
 8003836:	23a0      	movs	r3, #160	; 0xa0
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2240      	movs	r2, #64	; 0x40
 800383e:	4013      	ands	r3, r2
 8003840:	d00d      	beq.n	800385e <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	0018      	movs	r0, r3
 8003846:	f000 fc54 	bl	80040f2 <UART_EndTransmit_IT>
    return;
 800384a:	e008      	b.n	800385e <HAL_UART_IRQHandler+0x5b2>
      return;
 800384c:	46c0      	nop			; (mov r8, r8)
 800384e:	e006      	b.n	800385e <HAL_UART_IRQHandler+0x5b2>
    return;
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	e004      	b.n	800385e <HAL_UART_IRQHandler+0x5b2>
      return;
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	e002      	b.n	800385e <HAL_UART_IRQHandler+0x5b2>
      return;
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	e000      	b.n	800385e <HAL_UART_IRQHandler+0x5b2>
    return;
 800385c:	46c0      	nop			; (mov r8, r8)
  }

}
 800385e:	46bd      	mov	sp, r7
 8003860:	b02b      	add	sp, #172	; 0xac
 8003862:	bd90      	pop	{r4, r7, pc}
 8003864:	fffffeff 	.word	0xfffffeff
 8003868:	fffffedf 	.word	0xfffffedf

0800386c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003874:	46c0      	nop			; (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	b002      	add	sp, #8
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003884:	46c0      	nop			; (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003894:	46c0      	nop			; (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b002      	add	sp, #8
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	000a      	movs	r2, r1
 80038a6:	1cbb      	adds	r3, r7, #2
 80038a8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b002      	add	sp, #8
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038bc:	231e      	movs	r3, #30
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a83      	ldr	r2, [pc, #524]	; (8003af0 <UART_SetConfig+0x23c>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	0019      	movs	r1, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	4a7e      	ldr	r2, [pc, #504]	; (8003af4 <UART_SetConfig+0x240>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	0019      	movs	r1, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4a75      	ldr	r2, [pc, #468]	; (8003af8 <UART_SetConfig+0x244>)
 8003922:	4013      	ands	r3, r2
 8003924:	0019      	movs	r1, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	430a      	orrs	r2, r1
 800392e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003930:	4b72      	ldr	r3, [pc, #456]	; (8003afc <UART_SetConfig+0x248>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	2203      	movs	r2, #3
 8003936:	4013      	ands	r3, r2
 8003938:	2b03      	cmp	r3, #3
 800393a:	d00d      	beq.n	8003958 <UART_SetConfig+0xa4>
 800393c:	d81b      	bhi.n	8003976 <UART_SetConfig+0xc2>
 800393e:	2b02      	cmp	r3, #2
 8003940:	d014      	beq.n	800396c <UART_SetConfig+0xb8>
 8003942:	d818      	bhi.n	8003976 <UART_SetConfig+0xc2>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <UART_SetConfig+0x9a>
 8003948:	2b01      	cmp	r3, #1
 800394a:	d00a      	beq.n	8003962 <UART_SetConfig+0xae>
 800394c:	e013      	b.n	8003976 <UART_SetConfig+0xc2>
 800394e:	231f      	movs	r3, #31
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	e012      	b.n	800397e <UART_SetConfig+0xca>
 8003958:	231f      	movs	r3, #31
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	2202      	movs	r2, #2
 800395e:	701a      	strb	r2, [r3, #0]
 8003960:	e00d      	b.n	800397e <UART_SetConfig+0xca>
 8003962:	231f      	movs	r3, #31
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	2204      	movs	r2, #4
 8003968:	701a      	strb	r2, [r3, #0]
 800396a:	e008      	b.n	800397e <UART_SetConfig+0xca>
 800396c:	231f      	movs	r3, #31
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	2208      	movs	r2, #8
 8003972:	701a      	strb	r2, [r3, #0]
 8003974:	e003      	b.n	800397e <UART_SetConfig+0xca>
 8003976:	231f      	movs	r3, #31
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	2210      	movs	r2, #16
 800397c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69da      	ldr	r2, [r3, #28]
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	021b      	lsls	r3, r3, #8
 8003986:	429a      	cmp	r2, r3
 8003988:	d15c      	bne.n	8003a44 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 800398a:	231f      	movs	r3, #31
 800398c:	18fb      	adds	r3, r7, r3
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b08      	cmp	r3, #8
 8003992:	d015      	beq.n	80039c0 <UART_SetConfig+0x10c>
 8003994:	dc18      	bgt.n	80039c8 <UART_SetConfig+0x114>
 8003996:	2b04      	cmp	r3, #4
 8003998:	d00d      	beq.n	80039b6 <UART_SetConfig+0x102>
 800399a:	dc15      	bgt.n	80039c8 <UART_SetConfig+0x114>
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <UART_SetConfig+0xf2>
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d005      	beq.n	80039b0 <UART_SetConfig+0xfc>
 80039a4:	e010      	b.n	80039c8 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039a6:	f7fe fff9 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 80039aa:	0003      	movs	r3, r0
 80039ac:	61bb      	str	r3, [r7, #24]
        break;
 80039ae:	e012      	b.n	80039d6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039b0:	4b53      	ldr	r3, [pc, #332]	; (8003b00 <UART_SetConfig+0x24c>)
 80039b2:	61bb      	str	r3, [r7, #24]
        break;
 80039b4:	e00f      	b.n	80039d6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039b6:	f7fe ff91 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 80039ba:	0003      	movs	r3, r0
 80039bc:	61bb      	str	r3, [r7, #24]
        break;
 80039be:	e00a      	b.n	80039d6 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039c0:	2380      	movs	r3, #128	; 0x80
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	61bb      	str	r3, [r7, #24]
        break;
 80039c6:	e006      	b.n	80039d6 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039cc:	231e      	movs	r3, #30
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
        break;
 80039d4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d100      	bne.n	80039de <UART_SetConfig+0x12a>
 80039dc:	e07a      	b.n	8003ad4 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	005a      	lsls	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	085b      	lsrs	r3, r3, #1
 80039e8:	18d2      	adds	r2, r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	0019      	movs	r1, r3
 80039f0:	0010      	movs	r0, r2
 80039f2:	f7fc fb89 	bl	8000108 <__udivsi3>
 80039f6:	0003      	movs	r3, r0
 80039f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b0f      	cmp	r3, #15
 80039fe:	d91c      	bls.n	8003a3a <UART_SetConfig+0x186>
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	025b      	lsls	r3, r3, #9
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d217      	bcs.n	8003a3a <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	200e      	movs	r0, #14
 8003a10:	183b      	adds	r3, r7, r0
 8003a12:	210f      	movs	r1, #15
 8003a14:	438a      	bics	r2, r1
 8003a16:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2207      	movs	r2, #7
 8003a20:	4013      	ands	r3, r2
 8003a22:	b299      	uxth	r1, r3
 8003a24:	183b      	adds	r3, r7, r0
 8003a26:	183a      	adds	r2, r7, r0
 8003a28:	8812      	ldrh	r2, [r2, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	183a      	adds	r2, r7, r0
 8003a34:	8812      	ldrh	r2, [r2, #0]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	e04c      	b.n	8003ad4 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8003a3a:	231e      	movs	r3, #30
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	2201      	movs	r2, #1
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	e047      	b.n	8003ad4 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a44:	231f      	movs	r3, #31
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d015      	beq.n	8003a7a <UART_SetConfig+0x1c6>
 8003a4e:	dc18      	bgt.n	8003a82 <UART_SetConfig+0x1ce>
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d00d      	beq.n	8003a70 <UART_SetConfig+0x1bc>
 8003a54:	dc15      	bgt.n	8003a82 <UART_SetConfig+0x1ce>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <UART_SetConfig+0x1ac>
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d005      	beq.n	8003a6a <UART_SetConfig+0x1b6>
 8003a5e:	e010      	b.n	8003a82 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a60:	f7fe ff9c 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 8003a64:	0003      	movs	r3, r0
 8003a66:	61bb      	str	r3, [r7, #24]
        break;
 8003a68:	e012      	b.n	8003a90 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a6a:	4b25      	ldr	r3, [pc, #148]	; (8003b00 <UART_SetConfig+0x24c>)
 8003a6c:	61bb      	str	r3, [r7, #24]
        break;
 8003a6e:	e00f      	b.n	8003a90 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a70:	f7fe ff34 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 8003a74:	0003      	movs	r3, r0
 8003a76:	61bb      	str	r3, [r7, #24]
        break;
 8003a78:	e00a      	b.n	8003a90 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	021b      	lsls	r3, r3, #8
 8003a7e:	61bb      	str	r3, [r7, #24]
        break;
 8003a80:	e006      	b.n	8003a90 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a86:	231e      	movs	r3, #30
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	701a      	strb	r2, [r3, #0]
        break;
 8003a8e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d01e      	beq.n	8003ad4 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	085a      	lsrs	r2, r3, #1
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	18d2      	adds	r2, r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	0010      	movs	r0, r2
 8003aa8:	f7fc fb2e 	bl	8000108 <__udivsi3>
 8003aac:	0003      	movs	r3, r0
 8003aae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	2b0f      	cmp	r3, #15
 8003ab4:	d90a      	bls.n	8003acc <UART_SetConfig+0x218>
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	2380      	movs	r3, #128	; 0x80
 8003aba:	025b      	lsls	r3, r3, #9
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d205      	bcs.n	8003acc <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60da      	str	r2, [r3, #12]
 8003aca:	e003      	b.n	8003ad4 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8003acc:	231e      	movs	r3, #30
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ae0:	231e      	movs	r3, #30
 8003ae2:	18fb      	adds	r3, r7, r3
 8003ae4:	781b      	ldrb	r3, [r3, #0]
}
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b008      	add	sp, #32
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	ffff69f3 	.word	0xffff69f3
 8003af4:	ffffcfff 	.word	0xffffcfff
 8003af8:	fffff4ff 	.word	0xfffff4ff
 8003afc:	40021000 	.word	0x40021000
 8003b00:	007a1200 	.word	0x007a1200

08003b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	2201      	movs	r2, #1
 8003b12:	4013      	ands	r3, r2
 8003b14:	d00b      	beq.n	8003b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4a4a      	ldr	r2, [pc, #296]	; (8003c48 <UART_AdvFeatureConfig+0x144>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	0019      	movs	r1, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	2202      	movs	r2, #2
 8003b34:	4013      	ands	r3, r2
 8003b36:	d00b      	beq.n	8003b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4a43      	ldr	r2, [pc, #268]	; (8003c4c <UART_AdvFeatureConfig+0x148>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	0019      	movs	r1, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	2204      	movs	r2, #4
 8003b56:	4013      	ands	r3, r2
 8003b58:	d00b      	beq.n	8003b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	4a3b      	ldr	r2, [pc, #236]	; (8003c50 <UART_AdvFeatureConfig+0x14c>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	0019      	movs	r1, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	2208      	movs	r2, #8
 8003b78:	4013      	ands	r3, r2
 8003b7a:	d00b      	beq.n	8003b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	4a34      	ldr	r2, [pc, #208]	; (8003c54 <UART_AdvFeatureConfig+0x150>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	0019      	movs	r1, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	2210      	movs	r2, #16
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d00b      	beq.n	8003bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	4a2c      	ldr	r2, [pc, #176]	; (8003c58 <UART_AdvFeatureConfig+0x154>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	0019      	movs	r1, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	2220      	movs	r2, #32
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	d00b      	beq.n	8003bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	4a25      	ldr	r2, [pc, #148]	; (8003c5c <UART_AdvFeatureConfig+0x158>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	0019      	movs	r1, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	2240      	movs	r2, #64	; 0x40
 8003bde:	4013      	ands	r3, r2
 8003be0:	d01d      	beq.n	8003c1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <UART_AdvFeatureConfig+0x15c>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	0019      	movs	r1, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	035b      	lsls	r3, r3, #13
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d10b      	bne.n	8003c1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a15      	ldr	r2, [pc, #84]	; (8003c64 <UART_AdvFeatureConfig+0x160>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	0019      	movs	r1, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	2280      	movs	r2, #128	; 0x80
 8003c24:	4013      	ands	r3, r2
 8003c26:	d00b      	beq.n	8003c40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	4a0e      	ldr	r2, [pc, #56]	; (8003c68 <UART_AdvFeatureConfig+0x164>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	0019      	movs	r1, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	605a      	str	r2, [r3, #4]
  }
}
 8003c40:	46c0      	nop			; (mov r8, r8)
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b002      	add	sp, #8
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	fffdffff 	.word	0xfffdffff
 8003c4c:	fffeffff 	.word	0xfffeffff
 8003c50:	fffbffff 	.word	0xfffbffff
 8003c54:	ffff7fff 	.word	0xffff7fff
 8003c58:	ffffefff 	.word	0xffffefff
 8003c5c:	ffffdfff 	.word	0xffffdfff
 8003c60:	ffefffff 	.word	0xffefffff
 8003c64:	ff9fffff 	.word	0xff9fffff
 8003c68:	fff7ffff 	.word	0xfff7ffff

08003c6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b092      	sub	sp, #72	; 0x48
 8003c70:	af02      	add	r7, sp, #8
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2284      	movs	r2, #132	; 0x84
 8003c78:	2100      	movs	r1, #0
 8003c7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c7c:	f7fd fa0e 	bl	800109c <HAL_GetTick>
 8003c80:	0003      	movs	r3, r0
 8003c82:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2208      	movs	r2, #8
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d12c      	bne.n	8003cec <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c94:	2280      	movs	r2, #128	; 0x80
 8003c96:	0391      	lsls	r1, r2, #14
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	4a46      	ldr	r2, [pc, #280]	; (8003db4 <UART_CheckIdleState+0x148>)
 8003c9c:	9200      	str	r2, [sp, #0]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f000 f88c 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 8003ca4:	1e03      	subs	r3, r0, #0
 8003ca6:	d021      	beq.n	8003cec <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003cb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb8:	f383 8810 	msr	PRIMASK, r3
}
 8003cbc:	46c0      	nop			; (mov r8, r8)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2180      	movs	r1, #128	; 0x80
 8003cca:	438a      	bics	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	f383 8810 	msr	PRIMASK, r3
}
 8003cd8:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2278      	movs	r2, #120	; 0x78
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e05f      	b.n	8003dac <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d146      	bne.n	8003d88 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfc:	2280      	movs	r2, #128	; 0x80
 8003cfe:	03d1      	lsls	r1, r2, #15
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4a2c      	ldr	r2, [pc, #176]	; (8003db4 <UART_CheckIdleState+0x148>)
 8003d04:	9200      	str	r2, [sp, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f000 f858 	bl	8003dbc <UART_WaitOnFlagUntilTimeout>
 8003d0c:	1e03      	subs	r3, r0, #0
 8003d0e:	d03b      	beq.n	8003d88 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d10:	f3ef 8310 	mrs	r3, PRIMASK
 8003d14:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d16:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d18:	637b      	str	r3, [r7, #52]	; 0x34
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f383 8810 	msr	PRIMASK, r3
}
 8003d24:	46c0      	nop			; (mov r8, r8)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4921      	ldr	r1, [pc, #132]	; (8003db8 <UART_CheckIdleState+0x14c>)
 8003d32:	400a      	ands	r2, r1
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f383 8810 	msr	PRIMASK, r3
}
 8003d40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d42:	f3ef 8310 	mrs	r3, PRIMASK
 8003d46:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d48:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f383 8810 	msr	PRIMASK, r3
}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2101      	movs	r1, #1
 8003d64:	438a      	bics	r2, r1
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	f383 8810 	msr	PRIMASK, r3
}
 8003d72:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2280      	movs	r2, #128	; 0x80
 8003d78:	2120      	movs	r1, #32
 8003d7a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2278      	movs	r2, #120	; 0x78
 8003d80:	2100      	movs	r1, #0
 8003d82:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e011      	b.n	8003dac <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2280      	movs	r2, #128	; 0x80
 8003d92:	2120      	movs	r1, #32
 8003d94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2278      	movs	r2, #120	; 0x78
 8003da6:	2100      	movs	r1, #0
 8003da8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	0018      	movs	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b010      	add	sp, #64	; 0x40
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	01ffffff 	.word	0x01ffffff
 8003db8:	fffffedf 	.word	0xfffffedf

08003dbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	1dfb      	adds	r3, r7, #7
 8003dca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dcc:	e04b      	b.n	8003e66 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	d048      	beq.n	8003e66 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd4:	f7fd f962 	bl	800109c <HAL_GetTick>
 8003dd8:	0002      	movs	r2, r0
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d302      	bcc.n	8003dea <UART_WaitOnFlagUntilTimeout+0x2e>
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e04b      	b.n	8003e86 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2204      	movs	r2, #4
 8003df6:	4013      	ands	r3, r2
 8003df8:	d035      	beq.n	8003e66 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	2208      	movs	r2, #8
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d111      	bne.n	8003e2c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	0018      	movs	r0, r3
 8003e14:	f000 f8f2 	bl	8003ffc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2284      	movs	r2, #132	; 0x84
 8003e1c:	2108      	movs	r1, #8
 8003e1e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2278      	movs	r2, #120	; 0x78
 8003e24:	2100      	movs	r1, #0
 8003e26:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e02c      	b.n	8003e86 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	69da      	ldr	r2, [r3, #28]
 8003e32:	2380      	movs	r3, #128	; 0x80
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	401a      	ands	r2, r3
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d112      	bne.n	8003e66 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2280      	movs	r2, #128	; 0x80
 8003e46:	0112      	lsls	r2, r2, #4
 8003e48:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f000 f8d5 	bl	8003ffc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2284      	movs	r2, #132	; 0x84
 8003e56:	2120      	movs	r1, #32
 8003e58:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2278      	movs	r2, #120	; 0x78
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e00f      	b.n	8003e86 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	425a      	negs	r2, r3
 8003e76:	4153      	adcs	r3, r2
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	001a      	movs	r2, r3
 8003e7c:	1dfb      	adds	r3, r7, #7
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d0a4      	beq.n	8003dce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	0018      	movs	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b004      	add	sp, #16
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b090      	sub	sp, #64	; 0x40
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	1dbb      	adds	r3, r7, #6
 8003e9c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1dba      	adds	r2, r7, #6
 8003ea8:	2158      	movs	r1, #88	; 0x58
 8003eaa:	8812      	ldrh	r2, [r2, #0]
 8003eac:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1dba      	adds	r2, r7, #6
 8003eb2:	215a      	movs	r1, #90	; 0x5a
 8003eb4:	8812      	ldrh	r2, [r2, #0]
 8003eb6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	015b      	lsls	r3, r3, #5
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d10d      	bne.n	8003ee6 <UART_Start_Receive_IT+0x56>
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d104      	bne.n	8003edc <UART_Start_Receive_IT+0x4c>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	225c      	movs	r2, #92	; 0x5c
 8003ed6:	4946      	ldr	r1, [pc, #280]	; (8003ff0 <UART_Start_Receive_IT+0x160>)
 8003ed8:	5299      	strh	r1, [r3, r2]
 8003eda:	e01a      	b.n	8003f12 <UART_Start_Receive_IT+0x82>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	225c      	movs	r2, #92	; 0x5c
 8003ee0:	21ff      	movs	r1, #255	; 0xff
 8003ee2:	5299      	strh	r1, [r3, r2]
 8003ee4:	e015      	b.n	8003f12 <UART_Start_Receive_IT+0x82>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10d      	bne.n	8003f0a <UART_Start_Receive_IT+0x7a>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d104      	bne.n	8003f00 <UART_Start_Receive_IT+0x70>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	225c      	movs	r2, #92	; 0x5c
 8003efa:	21ff      	movs	r1, #255	; 0xff
 8003efc:	5299      	strh	r1, [r3, r2]
 8003efe:	e008      	b.n	8003f12 <UART_Start_Receive_IT+0x82>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	225c      	movs	r2, #92	; 0x5c
 8003f04:	217f      	movs	r1, #127	; 0x7f
 8003f06:	5299      	strh	r1, [r3, r2]
 8003f08:	e003      	b.n	8003f12 <UART_Start_Receive_IT+0x82>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	225c      	movs	r2, #92	; 0x5c
 8003f0e:	2100      	movs	r1, #0
 8003f10:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2284      	movs	r2, #132	; 0x84
 8003f16:	2100      	movs	r1, #0
 8003f18:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2280      	movs	r2, #128	; 0x80
 8003f1e:	2122      	movs	r1, #34	; 0x22
 8003f20:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f22:	f3ef 8310 	mrs	r3, PRIMASK
 8003f26:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003f28:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f32:	f383 8810 	msr	PRIMASK, r3
}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2101      	movs	r1, #1
 8003f44:	430a      	orrs	r2, r1
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4e:	f383 8810 	msr	PRIMASK, r3
}
 8003f52:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	015b      	lsls	r3, r3, #5
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d107      	bne.n	8003f70 <UART_Start_Receive_IT+0xe0>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d103      	bne.n	8003f70 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4a22      	ldr	r2, [pc, #136]	; (8003ff4 <UART_Start_Receive_IT+0x164>)
 8003f6c:	669a      	str	r2, [r3, #104]	; 0x68
 8003f6e:	e002      	b.n	8003f76 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4a21      	ldr	r2, [pc, #132]	; (8003ff8 <UART_Start_Receive_IT+0x168>)
 8003f74:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d019      	beq.n	8003fb2 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f82:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f84:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f86:	637b      	str	r3, [r7, #52]	; 0x34
 8003f88:	2301      	movs	r3, #1
 8003f8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	f383 8810 	msr	PRIMASK, r3
}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2190      	movs	r1, #144	; 0x90
 8003fa0:	0049      	lsls	r1, r1, #1
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	f383 8810 	msr	PRIMASK, r3
}
 8003fb0:	e018      	b.n	8003fe4 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb6:	613b      	str	r3, [r7, #16]
  return(result);
 8003fb8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003fba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f383 8810 	msr	PRIMASK, r3
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2120      	movs	r1, #32
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	f383 8810 	msr	PRIMASK, r3
}
 8003fe2:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b010      	add	sp, #64	; 0x40
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	000001ff 	.word	0x000001ff
 8003ff4:	08004301 	.word	0x08004301
 8003ff8:	08004149 	.word	0x08004149

08003ffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08e      	sub	sp, #56	; 0x38
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004004:	f3ef 8310 	mrs	r3, PRIMASK
 8004008:	617b      	str	r3, [r7, #20]
  return(result);
 800400a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800400c:	637b      	str	r3, [r7, #52]	; 0x34
 800400e:	2301      	movs	r3, #1
 8004010:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	f383 8810 	msr	PRIMASK, r3
}
 8004018:	46c0      	nop			; (mov r8, r8)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4926      	ldr	r1, [pc, #152]	; (80040c0 <UART_EndRxTransfer+0xc4>)
 8004026:	400a      	ands	r2, r1
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800402c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f383 8810 	msr	PRIMASK, r3
}
 8004034:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004036:	f3ef 8310 	mrs	r3, PRIMASK
 800403a:	623b      	str	r3, [r7, #32]
  return(result);
 800403c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403e:	633b      	str	r3, [r7, #48]	; 0x30
 8004040:	2301      	movs	r3, #1
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	f383 8810 	msr	PRIMASK, r3
}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2101      	movs	r1, #1
 8004058:	438a      	bics	r2, r1
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	f383 8810 	msr	PRIMASK, r3
}
 8004066:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406c:	2b01      	cmp	r3, #1
 800406e:	d118      	bne.n	80040a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004070:	f3ef 8310 	mrs	r3, PRIMASK
 8004074:	60bb      	str	r3, [r7, #8]
  return(result);
 8004076:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800407a:	2301      	movs	r3, #1
 800407c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f383 8810 	msr	PRIMASK, r3
}
 8004084:	46c0      	nop			; (mov r8, r8)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2110      	movs	r1, #16
 8004092:	438a      	bics	r2, r1
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004098:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f383 8810 	msr	PRIMASK, r3
}
 80040a0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2280      	movs	r2, #128	; 0x80
 80040a6:	2120      	movs	r1, #32
 80040a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b00e      	add	sp, #56	; 0x38
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	fffffedf 	.word	0xfffffedf

080040c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	225a      	movs	r2, #90	; 0x5a
 80040d6:	2100      	movs	r1, #0
 80040d8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2252      	movs	r2, #82	; 0x52
 80040de:	2100      	movs	r1, #0
 80040e0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7ff fbd1 	bl	800388c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b004      	add	sp, #16
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b086      	sub	sp, #24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040fa:	f3ef 8310 	mrs	r3, PRIMASK
 80040fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004100:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	2301      	movs	r3, #1
 8004106:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f383 8810 	msr	PRIMASK, r3
}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2140      	movs	r1, #64	; 0x40
 800411c:	438a      	bics	r2, r1
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f383 8810 	msr	PRIMASK, r3
}
 800412a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	0018      	movs	r0, r3
 800413c:	f7ff fb96 	bl	800386c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004140:	46c0      	nop			; (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	b006      	add	sp, #24
 8004146:	bd80      	pop	{r7, pc}

08004148 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b094      	sub	sp, #80	; 0x50
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004150:	204e      	movs	r0, #78	; 0x4e
 8004152:	183b      	adds	r3, r7, r0
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	215c      	movs	r1, #92	; 0x5c
 8004158:	5a52      	ldrh	r2, [r2, r1]
 800415a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2280      	movs	r2, #128	; 0x80
 8004160:	589b      	ldr	r3, [r3, r2]
 8004162:	2b22      	cmp	r3, #34	; 0x22
 8004164:	d000      	beq.n	8004168 <UART_RxISR_8BIT+0x20>
 8004166:	e0ba      	b.n	80042de <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	214c      	movs	r1, #76	; 0x4c
 800416e:	187b      	adds	r3, r7, r1
 8004170:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004172:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004174:	187b      	adds	r3, r7, r1
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b2da      	uxtb	r2, r3
 800417a:	183b      	adds	r3, r7, r0
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b2d9      	uxtb	r1, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004184:	400a      	ands	r2, r1
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	225a      	movs	r2, #90	; 0x5a
 8004198:	5a9b      	ldrh	r3, [r3, r2]
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b299      	uxth	r1, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	225a      	movs	r2, #90	; 0x5a
 80041a4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	225a      	movs	r2, #90	; 0x5a
 80041aa:	5a9b      	ldrh	r3, [r3, r2]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d000      	beq.n	80041b4 <UART_RxISR_8BIT+0x6c>
 80041b2:	e09c      	b.n	80042ee <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b4:	f3ef 8310 	mrs	r3, PRIMASK
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80041be:	2301      	movs	r3, #1
 80041c0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	f383 8810 	msr	PRIMASK, r3
}
 80041c8:	46c0      	nop			; (mov r8, r8)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4948      	ldr	r1, [pc, #288]	; (80042f8 <UART_RxISR_8BIT+0x1b0>)
 80041d6:	400a      	ands	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	f383 8810 	msr	PRIMASK, r3
}
 80041e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ea:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80041ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ee:	647b      	str	r3, [r7, #68]	; 0x44
 80041f0:	2301      	movs	r3, #1
 80041f2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f6:	f383 8810 	msr	PRIMASK, r3
}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2101      	movs	r1, #1
 8004208:	438a      	bics	r2, r1
 800420a:	609a      	str	r2, [r3, #8]
 800420c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004212:	f383 8810 	msr	PRIMASK, r3
}
 8004216:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2280      	movs	r2, #128	; 0x80
 800421c:	2120      	movs	r1, #32
 800421e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	2380      	movs	r3, #128	; 0x80
 8004234:	041b      	lsls	r3, r3, #16
 8004236:	4013      	ands	r3, r2
 8004238:	d018      	beq.n	800426c <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800423a:	f3ef 8310 	mrs	r3, PRIMASK
 800423e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004240:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004242:	643b      	str	r3, [r7, #64]	; 0x40
 8004244:	2301      	movs	r3, #1
 8004246:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f383 8810 	msr	PRIMASK, r3
}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4928      	ldr	r1, [pc, #160]	; (80042fc <UART_RxISR_8BIT+0x1b4>)
 800425c:	400a      	ands	r2, r1
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004262:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	f383 8810 	msr	PRIMASK, r3
}
 800426a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004270:	2b01      	cmp	r3, #1
 8004272:	d12f      	bne.n	80042d4 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800427a:	f3ef 8310 	mrs	r3, PRIMASK
 800427e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004280:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004284:	2301      	movs	r3, #1
 8004286:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f383 8810 	msr	PRIMASK, r3
}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2110      	movs	r1, #16
 800429c:	438a      	bics	r2, r1
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f383 8810 	msr	PRIMASK, r3
}
 80042aa:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	2210      	movs	r2, #16
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b10      	cmp	r3, #16
 80042b8:	d103      	bne.n	80042c2 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2210      	movs	r2, #16
 80042c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2258      	movs	r2, #88	; 0x58
 80042c6:	5a9a      	ldrh	r2, [r3, r2]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	0011      	movs	r1, r2
 80042cc:	0018      	movs	r0, r3
 80042ce:	f7ff fae5 	bl	800389c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042d2:	e00c      	b.n	80042ee <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7ff fad0 	bl	800387c <HAL_UART_RxCpltCallback>
}
 80042dc:	e007      	b.n	80042ee <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699a      	ldr	r2, [r3, #24]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2108      	movs	r1, #8
 80042ea:	430a      	orrs	r2, r1
 80042ec:	619a      	str	r2, [r3, #24]
}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b014      	add	sp, #80	; 0x50
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	fffffedf 	.word	0xfffffedf
 80042fc:	fbffffff 	.word	0xfbffffff

08004300 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b094      	sub	sp, #80	; 0x50
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004308:	204e      	movs	r0, #78	; 0x4e
 800430a:	183b      	adds	r3, r7, r0
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	215c      	movs	r1, #92	; 0x5c
 8004310:	5a52      	ldrh	r2, [r2, r1]
 8004312:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2280      	movs	r2, #128	; 0x80
 8004318:	589b      	ldr	r3, [r3, r2]
 800431a:	2b22      	cmp	r3, #34	; 0x22
 800431c:	d000      	beq.n	8004320 <UART_RxISR_16BIT+0x20>
 800431e:	e0ba      	b.n	8004496 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	214c      	movs	r1, #76	; 0x4c
 8004326:	187b      	adds	r3, r7, r1
 8004328:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800432a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004330:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004332:	187b      	adds	r3, r7, r1
 8004334:	183a      	adds	r2, r7, r0
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	8812      	ldrh	r2, [r2, #0]
 800433a:	4013      	ands	r3, r2
 800433c:	b29a      	uxth	r2, r3
 800433e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004340:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	1c9a      	adds	r2, r3, #2
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	225a      	movs	r2, #90	; 0x5a
 8004350:	5a9b      	ldrh	r3, [r3, r2]
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b299      	uxth	r1, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	225a      	movs	r2, #90	; 0x5a
 800435c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	225a      	movs	r2, #90	; 0x5a
 8004362:	5a9b      	ldrh	r3, [r3, r2]
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d000      	beq.n	800436c <UART_RxISR_16BIT+0x6c>
 800436a:	e09c      	b.n	80044a6 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800436c:	f3ef 8310 	mrs	r3, PRIMASK
 8004370:	623b      	str	r3, [r7, #32]
  return(result);
 8004372:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004374:	647b      	str	r3, [r7, #68]	; 0x44
 8004376:	2301      	movs	r3, #1
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	f383 8810 	msr	PRIMASK, r3
}
 8004380:	46c0      	nop			; (mov r8, r8)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4948      	ldr	r1, [pc, #288]	; (80044b0 <UART_RxISR_16BIT+0x1b0>)
 800438e:	400a      	ands	r2, r1
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	f383 8810 	msr	PRIMASK, r3
}
 800439c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800439e:	f3ef 8310 	mrs	r3, PRIMASK
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a6:	643b      	str	r3, [r7, #64]	; 0x40
 80043a8:	2301      	movs	r3, #1
 80043aa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ae:	f383 8810 	msr	PRIMASK, r3
}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2101      	movs	r1, #1
 80043c0:	438a      	bics	r2, r1
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ca:	f383 8810 	msr	PRIMASK, r3
}
 80043ce:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2280      	movs	r2, #128	; 0x80
 80043d4:	2120      	movs	r1, #32
 80043d6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	2380      	movs	r3, #128	; 0x80
 80043ec:	041b      	lsls	r3, r3, #16
 80043ee:	4013      	ands	r3, r2
 80043f0:	d018      	beq.n	8004424 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f2:	f3ef 8310 	mrs	r3, PRIMASK
 80043f6:	617b      	str	r3, [r7, #20]
  return(result);
 80043f8:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043fc:	2301      	movs	r3, #1
 80043fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f383 8810 	msr	PRIMASK, r3
}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4928      	ldr	r1, [pc, #160]	; (80044b4 <UART_RxISR_16BIT+0x1b4>)
 8004414:	400a      	ands	r2, r1
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800441a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f383 8810 	msr	PRIMASK, r3
}
 8004422:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004428:	2b01      	cmp	r3, #1
 800442a:	d12f      	bne.n	800448c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004432:	f3ef 8310 	mrs	r3, PRIMASK
 8004436:	60bb      	str	r3, [r7, #8]
  return(result);
 8004438:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800443a:	63bb      	str	r3, [r7, #56]	; 0x38
 800443c:	2301      	movs	r3, #1
 800443e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f383 8810 	msr	PRIMASK, r3
}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2110      	movs	r1, #16
 8004454:	438a      	bics	r2, r1
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f383 8810 	msr	PRIMASK, r3
}
 8004462:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	2210      	movs	r2, #16
 800446c:	4013      	ands	r3, r2
 800446e:	2b10      	cmp	r3, #16
 8004470:	d103      	bne.n	800447a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2210      	movs	r2, #16
 8004478:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2258      	movs	r2, #88	; 0x58
 800447e:	5a9a      	ldrh	r2, [r3, r2]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	0011      	movs	r1, r2
 8004484:	0018      	movs	r0, r3
 8004486:	f7ff fa09 	bl	800389c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800448a:	e00c      	b.n	80044a6 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	0018      	movs	r0, r3
 8004490:	f7ff f9f4 	bl	800387c <HAL_UART_RxCpltCallback>
}
 8004494:	e007      	b.n	80044a6 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699a      	ldr	r2, [r3, #24]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2108      	movs	r1, #8
 80044a2:	430a      	orrs	r2, r1
 80044a4:	619a      	str	r2, [r3, #24]
}
 80044a6:	46c0      	nop			; (mov r8, r8)
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b014      	add	sp, #80	; 0x50
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	fffffedf 	.word	0xfffffedf
 80044b4:	fbffffff 	.word	0xfbffffff

080044b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80044c0:	46c0      	nop			; (mov r8, r8)
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b002      	add	sp, #8
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <memset>:
 80044c8:	0003      	movs	r3, r0
 80044ca:	1882      	adds	r2, r0, r2
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d100      	bne.n	80044d2 <memset+0xa>
 80044d0:	4770      	bx	lr
 80044d2:	7019      	strb	r1, [r3, #0]
 80044d4:	3301      	adds	r3, #1
 80044d6:	e7f9      	b.n	80044cc <memset+0x4>

080044d8 <__libc_init_array>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	2600      	movs	r6, #0
 80044dc:	4c0c      	ldr	r4, [pc, #48]	; (8004510 <__libc_init_array+0x38>)
 80044de:	4d0d      	ldr	r5, [pc, #52]	; (8004514 <__libc_init_array+0x3c>)
 80044e0:	1b64      	subs	r4, r4, r5
 80044e2:	10a4      	asrs	r4, r4, #2
 80044e4:	42a6      	cmp	r6, r4
 80044e6:	d109      	bne.n	80044fc <__libc_init_array+0x24>
 80044e8:	2600      	movs	r6, #0
 80044ea:	f000 f819 	bl	8004520 <_init>
 80044ee:	4c0a      	ldr	r4, [pc, #40]	; (8004518 <__libc_init_array+0x40>)
 80044f0:	4d0a      	ldr	r5, [pc, #40]	; (800451c <__libc_init_array+0x44>)
 80044f2:	1b64      	subs	r4, r4, r5
 80044f4:	10a4      	asrs	r4, r4, #2
 80044f6:	42a6      	cmp	r6, r4
 80044f8:	d105      	bne.n	8004506 <__libc_init_array+0x2e>
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	00b3      	lsls	r3, r6, #2
 80044fe:	58eb      	ldr	r3, [r5, r3]
 8004500:	4798      	blx	r3
 8004502:	3601      	adds	r6, #1
 8004504:	e7ee      	b.n	80044e4 <__libc_init_array+0xc>
 8004506:	00b3      	lsls	r3, r6, #2
 8004508:	58eb      	ldr	r3, [r5, r3]
 800450a:	4798      	blx	r3
 800450c:	3601      	adds	r6, #1
 800450e:	e7f2      	b.n	80044f6 <__libc_init_array+0x1e>
 8004510:	080045e0 	.word	0x080045e0
 8004514:	080045e0 	.word	0x080045e0
 8004518:	080045e4 	.word	0x080045e4
 800451c:	080045e0 	.word	0x080045e0

08004520 <_init>:
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004526:	bc08      	pop	{r3}
 8004528:	469e      	mov	lr, r3
 800452a:	4770      	bx	lr

0800452c <_fini>:
 800452c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004532:	bc08      	pop	{r3}
 8004534:	469e      	mov	lr, r3
 8004536:	4770      	bx	lr
