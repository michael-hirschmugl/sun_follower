
sun_follower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002740  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002800  08002800  00012800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002838  08002838  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002838  08002838  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002838  08002838  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002838  08002838  00012838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800283c  0800283c  0001283c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  0800284c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  0800284c  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000edde  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e78  00000000  00000000  0002ee55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e28  00000000  00000000  00030cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b42  00000000  00000000  00031af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001137f  00000000  00000000  0003263a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001165e  00000000  00000000  000439b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00064c3d  00000000  00000000  00055017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000033b8  00000000  00000000  000b9c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000bd00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080027e8 	.word	0x080027e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080027e8 	.word	0x080027e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb54 	bl	80008d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f810 	bl	800024c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f92c 	bl	8000488 <_ZL12MX_GPIO_Initv>
  MX_I2C1_Init();
 8000230:	f000 f87c 	bl	800032c <_ZL12MX_I2C1_Initv>
  MX_USART1_UART_Init();
 8000234:	f000 f8f4 	bl	8000420 <_ZL19MX_USART1_UART_Initv>
  MX_TIM16_Init();
 8000238:	f000 f8c4 	bl	80003c4 <_ZL13MX_TIM16_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 800023c:	4b02      	ldr	r3, [pc, #8]	; (8000248 <main+0x28>)
 800023e:	0018      	movs	r0, r3
 8000240:	f001 fcf8 	bl	8001c34 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000244:	e7fe      	b.n	8000244 <main+0x24>
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	2000007c 	.word	0x2000007c

0800024c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b590      	push	{r4, r7, lr}
 800024e:	b095      	sub	sp, #84	; 0x54
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	2420      	movs	r4, #32
 8000254:	193b      	adds	r3, r7, r4
 8000256:	0018      	movs	r0, r3
 8000258:	2330      	movs	r3, #48	; 0x30
 800025a:	001a      	movs	r2, r3
 800025c:	2100      	movs	r1, #0
 800025e:	f002 fa97 	bl	8002790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000262:	2310      	movs	r3, #16
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	0018      	movs	r0, r3
 8000268:	2310      	movs	r3, #16
 800026a:	001a      	movs	r2, r3
 800026c:	2100      	movs	r1, #0
 800026e:	f002 fa8f 	bl	8002790 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000272:	003b      	movs	r3, r7
 8000274:	0018      	movs	r0, r3
 8000276:	2310      	movs	r3, #16
 8000278:	001a      	movs	r2, r3
 800027a:	2100      	movs	r1, #0
 800027c:	f002 fa88 	bl	8002790 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000280:	0021      	movs	r1, r4
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2202      	movs	r2, #2
 8000286:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	187b      	adds	r3, r7, r1
 800028a:	2201      	movs	r2, #1
 800028c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2210      	movs	r2, #16
 8000292:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2202      	movs	r2, #2
 8000298:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	22a0      	movs	r2, #160	; 0xa0
 80002a4:	0392      	lsls	r2, r2, #14
 80002a6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2200      	movs	r2, #0
 80002ac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 ff43 	bl	800113c <HAL_RCC_OscConfig>
 80002b6:	0003      	movs	r3, r0
 80002b8:	1e5a      	subs	r2, r3, #1
 80002ba:	4193      	sbcs	r3, r2
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <_Z18SystemClock_Configv+0x7a>
  {
    Error_Handler();
 80002c2:	f000 f9b7 	bl	8000634 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	2110      	movs	r1, #16
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2207      	movs	r2, #7
 80002cc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2202      	movs	r2, #2
 80002d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2101      	movs	r1, #1
 80002e4:	0018      	movs	r0, r3
 80002e6:	f001 fa43 	bl	8001770 <HAL_RCC_ClockConfig>
 80002ea:	0003      	movs	r3, r0
 80002ec:	1e5a      	subs	r2, r3, #1
 80002ee:	4193      	sbcs	r3, r2
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 80002f6:	f000 f99d 	bl	8000634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80002fa:	003b      	movs	r3, r7
 80002fc:	2221      	movs	r2, #33	; 0x21
 80002fe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000300:	003b      	movs	r3, r7
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000306:	003b      	movs	r3, r7
 8000308:	2200      	movs	r2, #0
 800030a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030c:	003b      	movs	r3, r7
 800030e:	0018      	movs	r0, r3
 8000310:	f001 fb72 	bl	80019f8 <HAL_RCCEx_PeriphCLKConfig>
 8000314:	0003      	movs	r3, r0
 8000316:	1e5a      	subs	r2, r3, #1
 8000318:	4193      	sbcs	r3, r2
 800031a:	b2db      	uxtb	r3, r3
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000320:	f000 f988 	bl	8000634 <Error_Handler>
  }
}
 8000324:	46c0      	nop			; (mov r8, r8)
 8000326:	46bd      	mov	sp, r7
 8000328:	b015      	add	sp, #84	; 0x54
 800032a:	bd90      	pop	{r4, r7, pc}

0800032c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000330:	4b21      	ldr	r3, [pc, #132]	; (80003b8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000332:	4a22      	ldr	r2, [pc, #136]	; (80003bc <_ZL12MX_I2C1_Initv+0x90>)
 8000334:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000336:	4b20      	ldr	r3, [pc, #128]	; (80003b8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000338:	4a21      	ldr	r2, [pc, #132]	; (80003c0 <_ZL12MX_I2C1_Initv+0x94>)
 800033a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800033c:	4b1e      	ldr	r3, [pc, #120]	; (80003b8 <_ZL12MX_I2C1_Initv+0x8c>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000342:	4b1d      	ldr	r3, [pc, #116]	; (80003b8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000344:	2201      	movs	r2, #1
 8000346:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000348:	4b1b      	ldr	r3, [pc, #108]	; (80003b8 <_ZL12MX_I2C1_Initv+0x8c>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800034e:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000350:	2200      	movs	r2, #0
 8000352:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000354:	4b18      	ldr	r3, [pc, #96]	; (80003b8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000356:	2200      	movs	r2, #0
 8000358:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800035a:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <_ZL12MX_I2C1_Initv+0x8c>)
 800035c:	2200      	movs	r2, #0
 800035e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000360:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000362:	2200      	movs	r2, #0
 8000364:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000366:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000368:	0018      	movs	r0, r3
 800036a:	f000 fdb9 	bl	8000ee0 <HAL_I2C_Init>
 800036e:	0003      	movs	r3, r0
 8000370:	1e5a      	subs	r2, r3, #1
 8000372:	4193      	sbcs	r3, r2
 8000374:	b2db      	uxtb	r3, r3
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <_ZL12MX_I2C1_Initv+0x52>
  {
    Error_Handler();
 800037a:	f000 f95b 	bl	8000634 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000380:	2100      	movs	r1, #0
 8000382:	0018      	movs	r0, r3
 8000384:	f000 fe42 	bl	800100c <HAL_I2CEx_ConfigAnalogFilter>
 8000388:	0003      	movs	r3, r0
 800038a:	1e5a      	subs	r2, r3, #1
 800038c:	4193      	sbcs	r3, r2
 800038e:	b2db      	uxtb	r3, r3
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <_ZL12MX_I2C1_Initv+0x6c>
  {
    Error_Handler();
 8000394:	f000 f94e 	bl	8000634 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000398:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <_ZL12MX_I2C1_Initv+0x8c>)
 800039a:	2100      	movs	r1, #0
 800039c:	0018      	movs	r0, r3
 800039e:	f000 fe81 	bl	80010a4 <HAL_I2CEx_ConfigDigitalFilter>
 80003a2:	0003      	movs	r3, r0
 80003a4:	1e5a      	subs	r2, r3, #1
 80003a6:	4193      	sbcs	r3, r2
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <_ZL12MX_I2C1_Initv+0x86>
  {
    Error_Handler();
 80003ae:	f000 f941 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000028 	.word	0x20000028
 80003bc:	40005400 	.word	0x40005400
 80003c0:	2000090e 	.word	0x2000090e

080003c4 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <_ZL13MX_TIM16_Initv+0x4c>)
 80003ca:	4a12      	ldr	r2, [pc, #72]	; (8000414 <_ZL13MX_TIM16_Initv+0x50>)
 80003cc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000-1;
 80003ce:	4b10      	ldr	r3, [pc, #64]	; (8000410 <_ZL13MX_TIM16_Initv+0x4c>)
 80003d0:	4a11      	ldr	r2, [pc, #68]	; (8000418 <_ZL13MX_TIM16_Initv+0x54>)
 80003d2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d4:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <_ZL13MX_TIM16_Initv+0x4c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80003da:	4b0d      	ldr	r3, [pc, #52]	; (8000410 <_ZL13MX_TIM16_Initv+0x4c>)
 80003dc:	4a0f      	ldr	r2, [pc, #60]	; (800041c <_ZL13MX_TIM16_Initv+0x58>)
 80003de:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e0:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <_ZL13MX_TIM16_Initv+0x4c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <_ZL13MX_TIM16_Initv+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <_ZL13MX_TIM16_Initv+0x4c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80003f2:	4b07      	ldr	r3, [pc, #28]	; (8000410 <_ZL13MX_TIM16_Initv+0x4c>)
 80003f4:	0018      	movs	r0, r3
 80003f6:	f001 fbcd 	bl	8001b94 <HAL_TIM_Base_Init>
 80003fa:	0003      	movs	r3, r0
 80003fc:	1e5a      	subs	r2, r3, #1
 80003fe:	4193      	sbcs	r3, r2
 8000400:	b2db      	uxtb	r3, r3
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <_ZL13MX_TIM16_Initv+0x46>
  {
    Error_Handler();
 8000406:	f000 f915 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	2000007c 	.word	0x2000007c
 8000414:	40014400 	.word	0x40014400
 8000418:	0000bb7f 	.word	0x0000bb7f
 800041c:	000003e7 	.word	0x000003e7

08000420 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000424:	4b16      	ldr	r3, [pc, #88]	; (8000480 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000426:	4a17      	ldr	r2, [pc, #92]	; (8000484 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000428:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800042a:	4b15      	ldr	r3, [pc, #84]	; (8000480 <_ZL19MX_USART1_UART_Initv+0x60>)
 800042c:	2296      	movs	r2, #150	; 0x96
 800042e:	0212      	lsls	r2, r2, #8
 8000430:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000432:	4b13      	ldr	r3, [pc, #76]	; (8000480 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000434:	2200      	movs	r2, #0
 8000436:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <_ZL19MX_USART1_UART_Initv+0x60>)
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000444:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000446:	220c      	movs	r2, #12
 8000448:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <_ZL19MX_USART1_UART_Initv+0x60>)
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000450:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000458:	2200      	movs	r2, #0
 800045a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <_ZL19MX_USART1_UART_Initv+0x60>)
 800045e:	2200      	movs	r2, #0
 8000460:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000462:	4b07      	ldr	r3, [pc, #28]	; (8000480 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000464:	0018      	movs	r0, r3
 8000466:	f001 fded 	bl	8002044 <HAL_UART_Init>
 800046a:	0003      	movs	r3, r0
 800046c:	1e5a      	subs	r2, r3, #1
 800046e:	4193      	sbcs	r3, r2
 8000470:	b2db      	uxtb	r3, r3
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <_ZL19MX_USART1_UART_Initv+0x5a>
  {
    Error_Handler();
 8000476:	f000 f8dd 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	200000c4 	.word	0x200000c4
 8000484:	40013800 	.word	0x40013800

08000488 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000488:	b590      	push	{r4, r7, lr}
 800048a:	b089      	sub	sp, #36	; 0x24
 800048c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048e:	240c      	movs	r4, #12
 8000490:	193b      	adds	r3, r7, r4
 8000492:	0018      	movs	r0, r3
 8000494:	2314      	movs	r3, #20
 8000496:	001a      	movs	r2, r3
 8000498:	2100      	movs	r1, #0
 800049a:	f002 f979 	bl	8002790 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800049e:	4b58      	ldr	r3, [pc, #352]	; (8000600 <_ZL12MX_GPIO_Initv+0x178>)
 80004a0:	695a      	ldr	r2, [r3, #20]
 80004a2:	4b57      	ldr	r3, [pc, #348]	; (8000600 <_ZL12MX_GPIO_Initv+0x178>)
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	03c9      	lsls	r1, r1, #15
 80004a8:	430a      	orrs	r2, r1
 80004aa:	615a      	str	r2, [r3, #20]
 80004ac:	4b54      	ldr	r3, [pc, #336]	; (8000600 <_ZL12MX_GPIO_Initv+0x178>)
 80004ae:	695a      	ldr	r2, [r3, #20]
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	03db      	lsls	r3, r3, #15
 80004b4:	4013      	ands	r3, r2
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b51      	ldr	r3, [pc, #324]	; (8000600 <_ZL12MX_GPIO_Initv+0x178>)
 80004bc:	695a      	ldr	r2, [r3, #20]
 80004be:	4b50      	ldr	r3, [pc, #320]	; (8000600 <_ZL12MX_GPIO_Initv+0x178>)
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	0289      	lsls	r1, r1, #10
 80004c4:	430a      	orrs	r2, r1
 80004c6:	615a      	str	r2, [r3, #20]
 80004c8:	4b4d      	ldr	r3, [pc, #308]	; (8000600 <_ZL12MX_GPIO_Initv+0x178>)
 80004ca:	695a      	ldr	r2, [r3, #20]
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	029b      	lsls	r3, r3, #10
 80004d0:	4013      	ands	r3, r2
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d6:	4b4a      	ldr	r3, [pc, #296]	; (8000600 <_ZL12MX_GPIO_Initv+0x178>)
 80004d8:	695a      	ldr	r2, [r3, #20]
 80004da:	4b49      	ldr	r3, [pc, #292]	; (8000600 <_ZL12MX_GPIO_Initv+0x178>)
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	02c9      	lsls	r1, r1, #11
 80004e0:	430a      	orrs	r2, r1
 80004e2:	615a      	str	r2, [r3, #20]
 80004e4:	4b46      	ldr	r3, [pc, #280]	; (8000600 <_ZL12MX_GPIO_Initv+0x178>)
 80004e6:	695a      	ldr	r2, [r3, #20]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	02db      	lsls	r3, r3, #11
 80004ec:	4013      	ands	r3, r2
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_TEMP_SENS_Pin|USR_LED_GREEN_Pin|USR_RLY_4_Pin|USR_RLY_3_Pin, GPIO_PIN_RESET);
 80004f2:	4b44      	ldr	r3, [pc, #272]	; (8000604 <_ZL12MX_GPIO_Initv+0x17c>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	213a      	movs	r1, #58	; 0x3a
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 fc93 	bl	8000e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USR_RLY_1_Pin|USR_RLY_2_Pin, GPIO_PIN_RESET);
 80004fe:	2390      	movs	r3, #144	; 0x90
 8000500:	0119      	lsls	r1, r3, #4
 8000502:	2390      	movs	r3, #144	; 0x90
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	2200      	movs	r2, #0
 8000508:	0018      	movs	r0, r3
 800050a:	f000 fc8b 	bl	8000e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_BTN_2_Pin USR_WIND_SENS_Pin */
  GPIO_InitStruct.Pin = USR_BTN_2_Pin|USR_WIND_SENS_Pin;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2241      	movs	r2, #65	; 0x41
 8000512:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2200      	movs	r2, #0
 8000518:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2201      	movs	r2, #1
 800051e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000520:	193b      	adds	r3, r7, r4
 8000522:	4a38      	ldr	r2, [pc, #224]	; (8000604 <_ZL12MX_GPIO_Initv+0x17c>)
 8000524:	0019      	movs	r1, r3
 8000526:	0010      	movs	r0, r2
 8000528:	f000 fb14 	bl	8000b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_TEMP_SENS_Pin */
  GPIO_InitStruct.Pin = USR_TEMP_SENS_Pin;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2202      	movs	r2, #2
 8000530:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2201      	movs	r2, #1
 8000536:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2201      	movs	r2, #1
 800053c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2203      	movs	r2, #3
 8000542:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USR_TEMP_SENS_GPIO_Port, &GPIO_InitStruct);
 8000544:	193b      	adds	r3, r7, r4
 8000546:	4a2f      	ldr	r2, [pc, #188]	; (8000604 <_ZL12MX_GPIO_Initv+0x17c>)
 8000548:	0019      	movs	r1, r3
 800054a:	0010      	movs	r0, r2
 800054c:	f000 fb02 	bl	8000b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_RLY_1_Pin USR_RLY_2_Pin */
  GPIO_InitStruct.Pin = USR_RLY_1_Pin|USR_RLY_2_Pin;
 8000550:	0021      	movs	r1, r4
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2290      	movs	r2, #144	; 0x90
 8000556:	0112      	lsls	r2, r2, #4
 8000558:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055a:	000c      	movs	r4, r1
 800055c:	193b      	adds	r3, r7, r4
 800055e:	2201      	movs	r2, #1
 8000560:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056e:	193a      	adds	r2, r7, r4
 8000570:	2390      	movs	r3, #144	; 0x90
 8000572:	05db      	lsls	r3, r3, #23
 8000574:	0011      	movs	r1, r2
 8000576:	0018      	movs	r0, r3
 8000578:	f000 faec 	bl	8000b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_BTN_1_Pin */
  GPIO_InitStruct.Pin = USR_BTN_1_Pin;
 800057c:	193b      	adds	r3, r7, r4
 800057e:	2280      	movs	r2, #128	; 0x80
 8000580:	0152      	lsls	r2, r2, #5
 8000582:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000584:	193b      	adds	r3, r7, r4
 8000586:	2284      	movs	r2, #132	; 0x84
 8000588:	0392      	lsls	r2, r2, #14
 800058a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	2201      	movs	r2, #1
 8000590:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USR_BTN_1_GPIO_Port, &GPIO_InitStruct);
 8000592:	193a      	adds	r2, r7, r4
 8000594:	2390      	movs	r3, #144	; 0x90
 8000596:	05db      	lsls	r3, r3, #23
 8000598:	0011      	movs	r1, r2
 800059a:	0018      	movs	r0, r3
 800059c:	f000 fada 	bl	8000b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_LED_GREEN_Pin USR_RLY_4_Pin USR_RLY_3_Pin */
  GPIO_InitStruct.Pin = USR_LED_GREEN_Pin|USR_RLY_4_Pin|USR_RLY_3_Pin;
 80005a0:	193b      	adds	r3, r7, r4
 80005a2:	2238      	movs	r2, #56	; 0x38
 80005a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2201      	movs	r2, #1
 80005aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	4a12      	ldr	r2, [pc, #72]	; (8000604 <_ZL12MX_GPIO_Initv+0x17c>)
 80005bc:	0019      	movs	r1, r3
 80005be:	0010      	movs	r0, r2
 80005c0:	f000 fac8 	bl	8000b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_BTN_3_Pin */
  GPIO_InitStruct.Pin = USR_BTN_3_Pin;
 80005c4:	0021      	movs	r1, r4
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2280      	movs	r2, #128	; 0x80
 80005ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2284      	movs	r2, #132	; 0x84
 80005d0:	0392      	lsls	r2, r2, #14
 80005d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2201      	movs	r2, #1
 80005d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USR_BTN_3_GPIO_Port, &GPIO_InitStruct);
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	4a09      	ldr	r2, [pc, #36]	; (8000604 <_ZL12MX_GPIO_Initv+0x17c>)
 80005de:	0019      	movs	r1, r3
 80005e0:	0010      	movs	r0, r2
 80005e2:	f000 fab7 	bl	8000b54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	2007      	movs	r0, #7
 80005ec:	f000 fa80 	bl	8000af0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80005f0:	2007      	movs	r0, #7
 80005f2:	f000 fa92 	bl	8000b1a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b009      	add	sp, #36	; 0x24
 80005fc:	bd90      	pop	{r4, r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	40021000 	.word	0x40021000
 8000604:	48000400 	.word	0x48000400

08000608 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	if(htim == &htim16)
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000614:	429a      	cmp	r2, r3
 8000616:	d104      	bne.n	8000622 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		HAL_GPIO_TogglePin(GPIOB, USR_LED_GREEN_Pin);
 8000618:	4b05      	ldr	r3, [pc, #20]	; (8000630 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800061a:	2108      	movs	r1, #8
 800061c:	0018      	movs	r0, r3
 800061e:	f000 fc1e 	bl	8000e5e <HAL_GPIO_TogglePin>
	}
}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b002      	add	sp, #8
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	2000007c 	.word	0x2000007c
 8000630:	48000400 	.word	0x48000400

08000634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000638:	b672      	cpsid	i
}
 800063a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800063c:	e7fe      	b.n	800063c <Error_Handler+0x8>
	...

08000640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <HAL_MspInit+0x44>)
 8000648:	699a      	ldr	r2, [r3, #24]
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <HAL_MspInit+0x44>)
 800064c:	2101      	movs	r1, #1
 800064e:	430a      	orrs	r2, r1
 8000650:	619a      	str	r2, [r3, #24]
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <HAL_MspInit+0x44>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	2201      	movs	r2, #1
 8000658:	4013      	ands	r3, r2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_MspInit+0x44>)
 8000660:	69da      	ldr	r2, [r3, #28]
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <HAL_MspInit+0x44>)
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	0549      	lsls	r1, r1, #21
 8000668:	430a      	orrs	r2, r1
 800066a:	61da      	str	r2, [r3, #28]
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <HAL_MspInit+0x44>)
 800066e:	69da      	ldr	r2, [r3, #28]
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	055b      	lsls	r3, r3, #21
 8000674:	4013      	ands	r3, r2
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b002      	add	sp, #8
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	40021000 	.word	0x40021000

08000688 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b08b      	sub	sp, #44	; 0x2c
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	2414      	movs	r4, #20
 8000692:	193b      	adds	r3, r7, r4
 8000694:	0018      	movs	r0, r3
 8000696:	2314      	movs	r3, #20
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f002 f878 	bl	8002790 <memset>
  if(hi2c->Instance==I2C1)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a1d      	ldr	r2, [pc, #116]	; (800071c <HAL_I2C_MspInit+0x94>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d133      	bne.n	8000712 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <HAL_I2C_MspInit+0x98>)
 80006ac:	695a      	ldr	r2, [r3, #20]
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <HAL_I2C_MspInit+0x98>)
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	0289      	lsls	r1, r1, #10
 80006b4:	430a      	orrs	r2, r1
 80006b6:	615a      	str	r2, [r3, #20]
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <HAL_I2C_MspInit+0x98>)
 80006ba:	695a      	ldr	r2, [r3, #20]
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	029b      	lsls	r3, r3, #10
 80006c0:	4013      	ands	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	22c0      	movs	r2, #192	; 0xc0
 80006ca:	00d2      	lsls	r2, r2, #3
 80006cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ce:	0021      	movs	r1, r4
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2212      	movs	r2, #18
 80006d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2203      	movs	r2, #3
 80006e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2204      	movs	r2, #4
 80006e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e8:	187a      	adds	r2, r7, r1
 80006ea:	2390      	movs	r3, #144	; 0x90
 80006ec:	05db      	lsls	r3, r3, #23
 80006ee:	0011      	movs	r1, r2
 80006f0:	0018      	movs	r0, r3
 80006f2:	f000 fa2f 	bl	8000b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <HAL_I2C_MspInit+0x98>)
 80006f8:	69da      	ldr	r2, [r3, #28]
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_I2C_MspInit+0x98>)
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	0389      	lsls	r1, r1, #14
 8000700:	430a      	orrs	r2, r1
 8000702:	61da      	str	r2, [r3, #28]
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_I2C_MspInit+0x98>)
 8000706:	69da      	ldr	r2, [r3, #28]
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	039b      	lsls	r3, r3, #14
 800070c:	4013      	ands	r3, r2
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b00b      	add	sp, #44	; 0x2c
 8000718:	bd90      	pop	{r4, r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	40005400 	.word	0x40005400
 8000720:	40021000 	.word	0x40021000

08000724 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a0e      	ldr	r2, [pc, #56]	; (800076c <HAL_TIM_Base_MspInit+0x48>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d115      	bne.n	8000762 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <HAL_TIM_Base_MspInit+0x4c>)
 8000738:	699a      	ldr	r2, [r3, #24]
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <HAL_TIM_Base_MspInit+0x4c>)
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	0289      	lsls	r1, r1, #10
 8000740:	430a      	orrs	r2, r1
 8000742:	619a      	str	r2, [r3, #24]
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <HAL_TIM_Base_MspInit+0x4c>)
 8000746:	699a      	ldr	r2, [r3, #24]
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	029b      	lsls	r3, r3, #10
 800074c:	4013      	ands	r3, r2
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	2015      	movs	r0, #21
 8000758:	f000 f9ca 	bl	8000af0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800075c:	2015      	movs	r0, #21
 800075e:	f000 f9dc 	bl	8000b1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b004      	add	sp, #16
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	40014400 	.word	0x40014400
 8000770:	40021000 	.word	0x40021000

08000774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b08b      	sub	sp, #44	; 0x2c
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	2414      	movs	r4, #20
 800077e:	193b      	adds	r3, r7, r4
 8000780:	0018      	movs	r0, r3
 8000782:	2314      	movs	r3, #20
 8000784:	001a      	movs	r2, r3
 8000786:	2100      	movs	r1, #0
 8000788:	f002 f802 	bl	8002790 <memset>
  if(huart->Instance==USART1)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <HAL_UART_MspInit+0x90>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d132      	bne.n	80007fc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <HAL_UART_MspInit+0x94>)
 8000798:	699a      	ldr	r2, [r3, #24]
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <HAL_UART_MspInit+0x94>)
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	01c9      	lsls	r1, r1, #7
 80007a0:	430a      	orrs	r2, r1
 80007a2:	619a      	str	r2, [r3, #24]
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <HAL_UART_MspInit+0x94>)
 80007a6:	699a      	ldr	r2, [r3, #24]
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	01db      	lsls	r3, r3, #7
 80007ac:	4013      	ands	r3, r2
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <HAL_UART_MspInit+0x94>)
 80007b4:	695a      	ldr	r2, [r3, #20]
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <HAL_UART_MspInit+0x94>)
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	0289      	lsls	r1, r1, #10
 80007bc:	430a      	orrs	r2, r1
 80007be:	615a      	str	r2, [r3, #20]
 80007c0:	4b11      	ldr	r3, [pc, #68]	; (8000808 <HAL_UART_MspInit+0x94>)
 80007c2:	695a      	ldr	r2, [r3, #20]
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	029b      	lsls	r3, r3, #10
 80007c8:	4013      	ands	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80007ce:	0021      	movs	r1, r4
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <HAL_UART_MspInit+0x98>)
 80007d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2202      	movs	r2, #2
 80007da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2203      	movs	r2, #3
 80007e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2201      	movs	r2, #1
 80007ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	187a      	adds	r2, r7, r1
 80007f0:	2390      	movs	r3, #144	; 0x90
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	0011      	movs	r1, r2
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 f9ac 	bl	8000b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b00b      	add	sp, #44	; 0x2c
 8000802:	bd90      	pop	{r4, r7, pc}
 8000804:	40013800 	.word	0x40013800
 8000808:	40021000 	.word	0x40021000
 800080c:	00008004 	.word	0x00008004

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <NMI_Handler+0x4>

08000816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <HardFault_Handler+0x4>

0800081c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000834:	f000 f894 	bl	8000960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_3_Pin);
 8000842:	2080      	movs	r0, #128	; 0x80
 8000844:	f000 fb26 	bl	8000e94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_1_Pin);
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	015b      	lsls	r3, r3, #5
 800084c:	0018      	movs	r0, r3
 800084e:	f000 fb21 	bl	8000e94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <TIM16_IRQHandler+0x14>)
 800085e:	0018      	movs	r0, r3
 8000860:	f001 fa34 	bl	8001ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	2000007c 	.word	0x2000007c

08000870 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800087e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000880:	f7ff fff6 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000886:	490d      	ldr	r1, [pc, #52]	; (80008bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <LoopForever+0xe>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800089c:	4c0a      	ldr	r4, [pc, #40]	; (80008c8 <LoopForever+0x16>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008aa:	f001 ff79 	bl	80027a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ae:	f7ff fcb7 	bl	8000220 <main>

080008b2 <LoopForever>:

LoopForever:
    b LoopForever
 80008b2:	e7fe      	b.n	80008b2 <LoopForever>
  ldr   r0, =_estack
 80008b4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008c0:	08002840 	.word	0x08002840
  ldr r2, =_sbss
 80008c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008c8:	20000150 	.word	0x20000150

080008cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC1_IRQHandler>
	...

080008d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <HAL_Init+0x24>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <HAL_Init+0x24>)
 80008da:	2110      	movs	r1, #16
 80008dc:	430a      	orrs	r2, r1
 80008de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f000 f809 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e6:	f7ff feab 	bl	8000640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	0018      	movs	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	40022000 	.word	0x40022000

080008f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <HAL_InitTick+0x5c>)
 8000902:	681c      	ldr	r4, [r3, #0]
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_InitTick+0x60>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	0019      	movs	r1, r3
 800090a:	23fa      	movs	r3, #250	; 0xfa
 800090c:	0098      	lsls	r0, r3, #2
 800090e:	f7ff fbfb 	bl	8000108 <__udivsi3>
 8000912:	0003      	movs	r3, r0
 8000914:	0019      	movs	r1, r3
 8000916:	0020      	movs	r0, r4
 8000918:	f7ff fbf6 	bl	8000108 <__udivsi3>
 800091c:	0003      	movs	r3, r0
 800091e:	0018      	movs	r0, r3
 8000920:	f000 f90b 	bl	8000b3a <HAL_SYSTICK_Config>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000928:	2301      	movs	r3, #1
 800092a:	e00f      	b.n	800094c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b03      	cmp	r3, #3
 8000930:	d80b      	bhi.n	800094a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	2301      	movs	r3, #1
 8000936:	425b      	negs	r3, r3
 8000938:	2200      	movs	r2, #0
 800093a:	0018      	movs	r0, r3
 800093c:	f000 f8d8 	bl	8000af0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_InitTick+0x64>)
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	e000      	b.n	800094c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
}
 800094c:	0018      	movs	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	b003      	add	sp, #12
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	20000000 	.word	0x20000000
 8000958:	20000008 	.word	0x20000008
 800095c:	20000004 	.word	0x20000004

08000960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x1c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	001a      	movs	r2, r3
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x20>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	18d2      	adds	r2, r2, r3
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <HAL_IncTick+0x20>)
 8000972:	601a      	str	r2, [r3, #0]
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	20000008 	.word	0x20000008
 8000980:	2000014c 	.word	0x2000014c

08000984 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <HAL_GetTick+0x10>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	2000014c 	.word	0x2000014c

08000998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	0002      	movs	r2, r0
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b7f      	cmp	r3, #127	; 0x7f
 80009aa:	d809      	bhi.n	80009c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	001a      	movs	r2, r3
 80009b2:	231f      	movs	r3, #31
 80009b4:	401a      	ands	r2, r3
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <__NVIC_EnableIRQ+0x30>)
 80009b8:	2101      	movs	r1, #1
 80009ba:	4091      	lsls	r1, r2
 80009bc:	000a      	movs	r2, r1
 80009be:	601a      	str	r2, [r3, #0]
  }
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b002      	add	sp, #8
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	e000e100 	.word	0xe000e100

080009cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	0002      	movs	r2, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	1dfb      	adds	r3, r7, #7
 80009d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b7f      	cmp	r3, #127	; 0x7f
 80009e0:	d828      	bhi.n	8000a34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e2:	4a2f      	ldr	r2, [pc, #188]	; (8000aa0 <__NVIC_SetPriority+0xd4>)
 80009e4:	1dfb      	adds	r3, r7, #7
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b25b      	sxtb	r3, r3
 80009ea:	089b      	lsrs	r3, r3, #2
 80009ec:	33c0      	adds	r3, #192	; 0xc0
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	589b      	ldr	r3, [r3, r2]
 80009f2:	1dfa      	adds	r2, r7, #7
 80009f4:	7812      	ldrb	r2, [r2, #0]
 80009f6:	0011      	movs	r1, r2
 80009f8:	2203      	movs	r2, #3
 80009fa:	400a      	ands	r2, r1
 80009fc:	00d2      	lsls	r2, r2, #3
 80009fe:	21ff      	movs	r1, #255	; 0xff
 8000a00:	4091      	lsls	r1, r2
 8000a02:	000a      	movs	r2, r1
 8000a04:	43d2      	mvns	r2, r2
 8000a06:	401a      	ands	r2, r3
 8000a08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	019b      	lsls	r3, r3, #6
 8000a0e:	22ff      	movs	r2, #255	; 0xff
 8000a10:	401a      	ands	r2, r3
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	0018      	movs	r0, r3
 8000a18:	2303      	movs	r3, #3
 8000a1a:	4003      	ands	r3, r0
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a20:	481f      	ldr	r0, [pc, #124]	; (8000aa0 <__NVIC_SetPriority+0xd4>)
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	b25b      	sxtb	r3, r3
 8000a28:	089b      	lsrs	r3, r3, #2
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	33c0      	adds	r3, #192	; 0xc0
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a32:	e031      	b.n	8000a98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a34:	4a1b      	ldr	r2, [pc, #108]	; (8000aa4 <__NVIC_SetPriority+0xd8>)
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	400b      	ands	r3, r1
 8000a40:	3b08      	subs	r3, #8
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	3306      	adds	r3, #6
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	18d3      	adds	r3, r2, r3
 8000a4a:	3304      	adds	r3, #4
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	1dfa      	adds	r2, r7, #7
 8000a50:	7812      	ldrb	r2, [r2, #0]
 8000a52:	0011      	movs	r1, r2
 8000a54:	2203      	movs	r2, #3
 8000a56:	400a      	ands	r2, r1
 8000a58:	00d2      	lsls	r2, r2, #3
 8000a5a:	21ff      	movs	r1, #255	; 0xff
 8000a5c:	4091      	lsls	r1, r2
 8000a5e:	000a      	movs	r2, r1
 8000a60:	43d2      	mvns	r2, r2
 8000a62:	401a      	ands	r2, r3
 8000a64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	019b      	lsls	r3, r3, #6
 8000a6a:	22ff      	movs	r2, #255	; 0xff
 8000a6c:	401a      	ands	r2, r3
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	0018      	movs	r0, r3
 8000a74:	2303      	movs	r3, #3
 8000a76:	4003      	ands	r3, r0
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a7c:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <__NVIC_SetPriority+0xd8>)
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	001c      	movs	r4, r3
 8000a84:	230f      	movs	r3, #15
 8000a86:	4023      	ands	r3, r4
 8000a88:	3b08      	subs	r3, #8
 8000a8a:	089b      	lsrs	r3, r3, #2
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	3306      	adds	r3, #6
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	18c3      	adds	r3, r0, r3
 8000a94:	3304      	adds	r3, #4
 8000a96:	601a      	str	r2, [r3, #0]
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b003      	add	sp, #12
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	e000e100 	.word	0xe000e100
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	1e5a      	subs	r2, r3, #1
 8000ab4:	2380      	movs	r3, #128	; 0x80
 8000ab6:	045b      	lsls	r3, r3, #17
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d301      	bcc.n	8000ac0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000abc:	2301      	movs	r3, #1
 8000abe:	e010      	b.n	8000ae2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <SysTick_Config+0x44>)
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	3a01      	subs	r2, #1
 8000ac6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac8:	2301      	movs	r3, #1
 8000aca:	425b      	negs	r3, r3
 8000acc:	2103      	movs	r1, #3
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff ff7c 	bl	80009cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ad4:	4b05      	ldr	r3, [pc, #20]	; (8000aec <SysTick_Config+0x44>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <SysTick_Config+0x44>)
 8000adc:	2207      	movs	r2, #7
 8000ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	e000e010 	.word	0xe000e010

08000af0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
 8000afa:	210f      	movs	r1, #15
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	1c02      	adds	r2, r0, #0
 8000b00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	0011      	movs	r1, r2
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f7ff ff5d 	bl	80009cc <__NVIC_SetPriority>
}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b004      	add	sp, #16
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	0002      	movs	r2, r0
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b26:	1dfb      	adds	r3, r7, #7
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b25b      	sxtb	r3, r3
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f7ff ff33 	bl	8000998 <__NVIC_EnableIRQ>
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b002      	add	sp, #8
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff ffaf 	bl	8000aa8 <SysTick_Config>
 8000b4a:	0003      	movs	r3, r0
}
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b002      	add	sp, #8
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b62:	e149      	b.n	8000df8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2101      	movs	r1, #1
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	4091      	lsls	r1, r2
 8000b6e:	000a      	movs	r2, r1
 8000b70:	4013      	ands	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d100      	bne.n	8000b7c <HAL_GPIO_Init+0x28>
 8000b7a:	e13a      	b.n	8000df2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	2203      	movs	r2, #3
 8000b82:	4013      	ands	r3, r2
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d005      	beq.n	8000b94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d130      	bne.n	8000bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	409a      	lsls	r2, r3
 8000ba2:	0013      	movs	r3, r2
 8000ba4:	43da      	mvns	r2, r3
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	409a      	lsls	r2, r3
 8000bb6:	0013      	movs	r3, r2
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bca:	2201      	movs	r2, #1
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	091b      	lsrs	r3, r3, #4
 8000be0:	2201      	movs	r2, #1
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	d017      	beq.n	8000c32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	409a      	lsls	r2, r3
 8000c10:	0013      	movs	r3, r2
 8000c12:	43da      	mvns	r2, r3
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	409a      	lsls	r2, r3
 8000c24:	0013      	movs	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2203      	movs	r2, #3
 8000c38:	4013      	ands	r3, r2
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d123      	bne.n	8000c86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	08da      	lsrs	r2, r3, #3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3208      	adds	r2, #8
 8000c46:	0092      	lsls	r2, r2, #2
 8000c48:	58d3      	ldr	r3, [r2, r3]
 8000c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	2207      	movs	r2, #7
 8000c50:	4013      	ands	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	220f      	movs	r2, #15
 8000c56:	409a      	lsls	r2, r3
 8000c58:	0013      	movs	r3, r2
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	691a      	ldr	r2, [r3, #16]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	2107      	movs	r1, #7
 8000c6a:	400b      	ands	r3, r1
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	409a      	lsls	r2, r3
 8000c70:	0013      	movs	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	08da      	lsrs	r2, r3, #3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3208      	adds	r2, #8
 8000c80:	0092      	lsls	r2, r2, #2
 8000c82:	6939      	ldr	r1, [r7, #16]
 8000c84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2203      	movs	r2, #3
 8000c92:	409a      	lsls	r2, r3
 8000c94:	0013      	movs	r3, r2
 8000c96:	43da      	mvns	r2, r3
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	409a      	lsls	r2, r3
 8000cac:	0013      	movs	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	23c0      	movs	r3, #192	; 0xc0
 8000cc0:	029b      	lsls	r3, r3, #10
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	d100      	bne.n	8000cc8 <HAL_GPIO_Init+0x174>
 8000cc6:	e094      	b.n	8000df2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc8:	4b51      	ldr	r3, [pc, #324]	; (8000e10 <HAL_GPIO_Init+0x2bc>)
 8000cca:	699a      	ldr	r2, [r3, #24]
 8000ccc:	4b50      	ldr	r3, [pc, #320]	; (8000e10 <HAL_GPIO_Init+0x2bc>)
 8000cce:	2101      	movs	r1, #1
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	619a      	str	r2, [r3, #24]
 8000cd4:	4b4e      	ldr	r3, [pc, #312]	; (8000e10 <HAL_GPIO_Init+0x2bc>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4013      	ands	r3, r2
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ce0:	4a4c      	ldr	r2, [pc, #304]	; (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	089b      	lsrs	r3, r3, #2
 8000ce6:	3302      	adds	r3, #2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	589b      	ldr	r3, [r3, r2]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	220f      	movs	r2, #15
 8000cf8:	409a      	lsls	r2, r3
 8000cfa:	0013      	movs	r3, r2
 8000cfc:	43da      	mvns	r2, r3
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	4013      	ands	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	2390      	movs	r3, #144	; 0x90
 8000d08:	05db      	lsls	r3, r3, #23
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d00d      	beq.n	8000d2a <HAL_GPIO_Init+0x1d6>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a41      	ldr	r2, [pc, #260]	; (8000e18 <HAL_GPIO_Init+0x2c4>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d007      	beq.n	8000d26 <HAL_GPIO_Init+0x1d2>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a40      	ldr	r2, [pc, #256]	; (8000e1c <HAL_GPIO_Init+0x2c8>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d101      	bne.n	8000d22 <HAL_GPIO_Init+0x1ce>
 8000d1e:	2302      	movs	r3, #2
 8000d20:	e004      	b.n	8000d2c <HAL_GPIO_Init+0x1d8>
 8000d22:	2305      	movs	r3, #5
 8000d24:	e002      	b.n	8000d2c <HAL_GPIO_Init+0x1d8>
 8000d26:	2301      	movs	r3, #1
 8000d28:	e000      	b.n	8000d2c <HAL_GPIO_Init+0x1d8>
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	2103      	movs	r1, #3
 8000d30:	400a      	ands	r2, r1
 8000d32:	0092      	lsls	r2, r2, #2
 8000d34:	4093      	lsls	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d3c:	4935      	ldr	r1, [pc, #212]	; (8000e14 <HAL_GPIO_Init+0x2c0>)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	089b      	lsrs	r3, r3, #2
 8000d42:	3302      	adds	r3, #2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d4a:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <HAL_GPIO_Init+0x2cc>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	43da      	mvns	r2, r3
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	2380      	movs	r3, #128	; 0x80
 8000d60:	035b      	lsls	r3, r3, #13
 8000d62:	4013      	ands	r3, r2
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d6e:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <HAL_GPIO_Init+0x2cc>)
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d74:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <HAL_GPIO_Init+0x2cc>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	43da      	mvns	r2, r3
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	2380      	movs	r3, #128	; 0x80
 8000d8a:	039b      	lsls	r3, r3, #14
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	d003      	beq.n	8000d98 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d98:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <HAL_GPIO_Init+0x2cc>)
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <HAL_GPIO_Init+0x2cc>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	43da      	mvns	r2, r3
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	029b      	lsls	r3, r3, #10
 8000db6:	4013      	ands	r3, r2
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_GPIO_Init+0x2cc>)
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_GPIO_Init+0x2cc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	43da      	mvns	r2, r3
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	025b      	lsls	r3, r3, #9
 8000de0:	4013      	ands	r3, r2
 8000de2:	d003      	beq.n	8000dec <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dec:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <HAL_GPIO_Init+0x2cc>)
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3301      	adds	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	40da      	lsrs	r2, r3
 8000e00:	1e13      	subs	r3, r2, #0
 8000e02:	d000      	beq.n	8000e06 <HAL_GPIO_Init+0x2b2>
 8000e04:	e6ae      	b.n	8000b64 <HAL_GPIO_Init+0x10>
  } 
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b006      	add	sp, #24
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010000 	.word	0x40010000
 8000e18:	48000400 	.word	0x48000400
 8000e1c:	48000800 	.word	0x48000800
 8000e20:	40010400 	.word	0x40010400

08000e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	0008      	movs	r0, r1
 8000e2e:	0011      	movs	r1, r2
 8000e30:	1cbb      	adds	r3, r7, #2
 8000e32:	1c02      	adds	r2, r0, #0
 8000e34:	801a      	strh	r2, [r3, #0]
 8000e36:	1c7b      	adds	r3, r7, #1
 8000e38:	1c0a      	adds	r2, r1, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e3c:	1c7b      	adds	r3, r7, #1
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e44:	1cbb      	adds	r3, r7, #2
 8000e46:	881a      	ldrh	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e4c:	e003      	b.n	8000e56 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e4e:	1cbb      	adds	r3, r7, #2
 8000e50:	881a      	ldrh	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b002      	add	sp, #8
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	000a      	movs	r2, r1
 8000e68:	1cbb      	adds	r3, r7, #2
 8000e6a:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e72:	1cbb      	adds	r3, r7, #2
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	041a      	lsls	r2, r3, #16
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	1cb9      	adds	r1, r7, #2
 8000e82:	8809      	ldrh	r1, [r1, #0]
 8000e84:	400b      	ands	r3, r1
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	619a      	str	r2, [r3, #24]
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	b004      	add	sp, #16
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	1dbb      	adds	r3, r7, #6
 8000e9e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	1dba      	adds	r2, r7, #6
 8000ea6:	8812      	ldrh	r2, [r2, #0]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d008      	beq.n	8000ebe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000eae:	1dba      	adds	r2, r7, #6
 8000eb0:	8812      	ldrh	r2, [r2, #0]
 8000eb2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000eb4:	1dbb      	adds	r3, r7, #6
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f000 f807 	bl	8000ecc <HAL_GPIO_EXTI_Callback>
  }
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	40010400 	.word	0x40010400

08000ecc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	0002      	movs	r2, r0
 8000ed4:	1dbb      	adds	r3, r7, #6
 8000ed6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b002      	add	sp, #8
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e082      	b.n	8000ff8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2241      	movs	r2, #65	; 0x41
 8000ef6:	5c9b      	ldrb	r3, [r3, r2]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d107      	bne.n	8000f0e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2240      	movs	r2, #64	; 0x40
 8000f02:	2100      	movs	r1, #0
 8000f04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff fbbd 	bl	8000688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2241      	movs	r2, #65	; 0x41
 8000f12:	2124      	movs	r1, #36	; 0x24
 8000f14:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2101      	movs	r1, #1
 8000f22:	438a      	bics	r2, r1
 8000f24:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4934      	ldr	r1, [pc, #208]	; (8001000 <HAL_I2C_Init+0x120>)
 8000f30:	400a      	ands	r2, r1
 8000f32:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4931      	ldr	r1, [pc, #196]	; (8001004 <HAL_I2C_Init+0x124>)
 8000f40:	400a      	ands	r2, r1
 8000f42:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d108      	bne.n	8000f5e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	0209      	lsls	r1, r1, #8
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	e007      	b.n	8000f6e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2184      	movs	r1, #132	; 0x84
 8000f68:	0209      	lsls	r1, r1, #8
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d104      	bne.n	8000f80 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2280      	movs	r2, #128	; 0x80
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	491f      	ldr	r1, [pc, #124]	; (8001008 <HAL_I2C_Init+0x128>)
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	491a      	ldr	r1, [pc, #104]	; (8001004 <HAL_I2C_Init+0x124>)
 8000f9c:	400a      	ands	r2, r1
 8000f9e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691a      	ldr	r2, [r3, #16]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69d9      	ldr	r1, [r3, #28]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a1a      	ldr	r2, [r3, #32]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	430a      	orrs	r2, r1
 8000fc8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2241      	movs	r2, #65	; 0x41
 8000fe4:	2120      	movs	r1, #32
 8000fe6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2242      	movs	r2, #66	; 0x42
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b002      	add	sp, #8
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	f0ffffff 	.word	0xf0ffffff
 8001004:	ffff7fff 	.word	0xffff7fff
 8001008:	02008000 	.word	0x02008000

0800100c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2241      	movs	r2, #65	; 0x41
 800101a:	5c9b      	ldrb	r3, [r3, r2]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b20      	cmp	r3, #32
 8001020:	d138      	bne.n	8001094 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2240      	movs	r2, #64	; 0x40
 8001026:	5c9b      	ldrb	r3, [r3, r2]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d101      	bne.n	8001030 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800102c:	2302      	movs	r3, #2
 800102e:	e032      	b.n	8001096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2240      	movs	r2, #64	; 0x40
 8001034:	2101      	movs	r1, #1
 8001036:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2241      	movs	r2, #65	; 0x41
 800103c:	2124      	movs	r1, #36	; 0x24
 800103e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2101      	movs	r1, #1
 800104c:	438a      	bics	r2, r1
 800104e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4911      	ldr	r1, [pc, #68]	; (80010a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800105c:	400a      	ands	r2, r1
 800105e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6819      	ldr	r1, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	430a      	orrs	r2, r1
 800106e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2101      	movs	r1, #1
 800107c:	430a      	orrs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2241      	movs	r2, #65	; 0x41
 8001084:	2120      	movs	r1, #32
 8001086:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2240      	movs	r2, #64	; 0x40
 800108c:	2100      	movs	r1, #0
 800108e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	e000      	b.n	8001096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001094:	2302      	movs	r3, #2
  }
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	ffffefff 	.word	0xffffefff

080010a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2241      	movs	r2, #65	; 0x41
 80010b2:	5c9b      	ldrb	r3, [r3, r2]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b20      	cmp	r3, #32
 80010b8:	d139      	bne.n	800112e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2240      	movs	r2, #64	; 0x40
 80010be:	5c9b      	ldrb	r3, [r3, r2]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d101      	bne.n	80010c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e033      	b.n	8001130 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2240      	movs	r2, #64	; 0x40
 80010cc:	2101      	movs	r1, #1
 80010ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2241      	movs	r2, #65	; 0x41
 80010d4:	2124      	movs	r1, #36	; 0x24
 80010d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2101      	movs	r1, #1
 80010e4:	438a      	bics	r2, r1
 80010e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4a11      	ldr	r2, [pc, #68]	; (8001138 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68fa      	ldr	r2, [r7, #12]
 8001108:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2101      	movs	r1, #1
 8001116:	430a      	orrs	r2, r1
 8001118:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2241      	movs	r2, #65	; 0x41
 800111e:	2120      	movs	r1, #32
 8001120:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2240      	movs	r2, #64	; 0x40
 8001126:	2100      	movs	r1, #0
 8001128:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800112e:	2302      	movs	r3, #2
  }
}
 8001130:	0018      	movs	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	b004      	add	sp, #16
 8001136:	bd80      	pop	{r7, pc}
 8001138:	fffff0ff 	.word	0xfffff0ff

0800113c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e301      	b.n	8001752 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2201      	movs	r2, #1
 8001154:	4013      	ands	r3, r2
 8001156:	d100      	bne.n	800115a <HAL_RCC_OscConfig+0x1e>
 8001158:	e08d      	b.n	8001276 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800115a:	4bc3      	ldr	r3, [pc, #780]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	220c      	movs	r2, #12
 8001160:	4013      	ands	r3, r2
 8001162:	2b04      	cmp	r3, #4
 8001164:	d00e      	beq.n	8001184 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001166:	4bc0      	ldr	r3, [pc, #768]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	220c      	movs	r2, #12
 800116c:	4013      	ands	r3, r2
 800116e:	2b08      	cmp	r3, #8
 8001170:	d116      	bne.n	80011a0 <HAL_RCC_OscConfig+0x64>
 8001172:	4bbd      	ldr	r3, [pc, #756]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	2380      	movs	r3, #128	; 0x80
 8001178:	025b      	lsls	r3, r3, #9
 800117a:	401a      	ands	r2, r3
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	025b      	lsls	r3, r3, #9
 8001180:	429a      	cmp	r2, r3
 8001182:	d10d      	bne.n	80011a0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	4bb8      	ldr	r3, [pc, #736]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	029b      	lsls	r3, r3, #10
 800118c:	4013      	ands	r3, r2
 800118e:	d100      	bne.n	8001192 <HAL_RCC_OscConfig+0x56>
 8001190:	e070      	b.n	8001274 <HAL_RCC_OscConfig+0x138>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d000      	beq.n	800119c <HAL_RCC_OscConfig+0x60>
 800119a:	e06b      	b.n	8001274 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e2d8      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d107      	bne.n	80011b8 <HAL_RCC_OscConfig+0x7c>
 80011a8:	4baf      	ldr	r3, [pc, #700]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4bae      	ldr	r3, [pc, #696]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80011ae:	2180      	movs	r1, #128	; 0x80
 80011b0:	0249      	lsls	r1, r1, #9
 80011b2:	430a      	orrs	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	e02f      	b.n	8001218 <HAL_RCC_OscConfig+0xdc>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10c      	bne.n	80011da <HAL_RCC_OscConfig+0x9e>
 80011c0:	4ba9      	ldr	r3, [pc, #676]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4ba8      	ldr	r3, [pc, #672]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80011c6:	49a9      	ldr	r1, [pc, #676]	; (800146c <HAL_RCC_OscConfig+0x330>)
 80011c8:	400a      	ands	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	4ba6      	ldr	r3, [pc, #664]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4ba5      	ldr	r3, [pc, #660]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80011d2:	49a7      	ldr	r1, [pc, #668]	; (8001470 <HAL_RCC_OscConfig+0x334>)
 80011d4:	400a      	ands	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e01e      	b.n	8001218 <HAL_RCC_OscConfig+0xdc>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b05      	cmp	r3, #5
 80011e0:	d10e      	bne.n	8001200 <HAL_RCC_OscConfig+0xc4>
 80011e2:	4ba1      	ldr	r3, [pc, #644]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4ba0      	ldr	r3, [pc, #640]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80011e8:	2180      	movs	r1, #128	; 0x80
 80011ea:	02c9      	lsls	r1, r1, #11
 80011ec:	430a      	orrs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	4b9d      	ldr	r3, [pc, #628]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b9c      	ldr	r3, [pc, #624]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	0249      	lsls	r1, r1, #9
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	e00b      	b.n	8001218 <HAL_RCC_OscConfig+0xdc>
 8001200:	4b99      	ldr	r3, [pc, #612]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b98      	ldr	r3, [pc, #608]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 8001206:	4999      	ldr	r1, [pc, #612]	; (800146c <HAL_RCC_OscConfig+0x330>)
 8001208:	400a      	ands	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	4b96      	ldr	r3, [pc, #600]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b95      	ldr	r3, [pc, #596]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 8001212:	4997      	ldr	r1, [pc, #604]	; (8001470 <HAL_RCC_OscConfig+0x334>)
 8001214:	400a      	ands	r2, r1
 8001216:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d014      	beq.n	800124a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fbb0 	bl	8000984 <HAL_GetTick>
 8001224:	0003      	movs	r3, r0
 8001226:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800122a:	f7ff fbab 	bl	8000984 <HAL_GetTick>
 800122e:	0002      	movs	r2, r0
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b64      	cmp	r3, #100	; 0x64
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e28a      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123c:	4b8a      	ldr	r3, [pc, #552]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	029b      	lsls	r3, r3, #10
 8001244:	4013      	ands	r3, r2
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0xee>
 8001248:	e015      	b.n	8001276 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124a:	f7ff fb9b 	bl	8000984 <HAL_GetTick>
 800124e:	0003      	movs	r3, r0
 8001250:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fb96 	bl	8000984 <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e275      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001266:	4b80      	ldr	r3, [pc, #512]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	2380      	movs	r3, #128	; 0x80
 800126c:	029b      	lsls	r3, r3, #10
 800126e:	4013      	ands	r3, r2
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x118>
 8001272:	e000      	b.n	8001276 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2202      	movs	r2, #2
 800127c:	4013      	ands	r3, r2
 800127e:	d100      	bne.n	8001282 <HAL_RCC_OscConfig+0x146>
 8001280:	e069      	b.n	8001356 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001282:	4b79      	ldr	r3, [pc, #484]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	220c      	movs	r2, #12
 8001288:	4013      	ands	r3, r2
 800128a:	d00b      	beq.n	80012a4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800128c:	4b76      	ldr	r3, [pc, #472]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	220c      	movs	r2, #12
 8001292:	4013      	ands	r3, r2
 8001294:	2b08      	cmp	r3, #8
 8001296:	d11c      	bne.n	80012d2 <HAL_RCC_OscConfig+0x196>
 8001298:	4b73      	ldr	r3, [pc, #460]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	025b      	lsls	r3, r3, #9
 80012a0:	4013      	ands	r3, r2
 80012a2:	d116      	bne.n	80012d2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a4:	4b70      	ldr	r3, [pc, #448]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2202      	movs	r2, #2
 80012aa:	4013      	ands	r3, r2
 80012ac:	d005      	beq.n	80012ba <HAL_RCC_OscConfig+0x17e>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d001      	beq.n	80012ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e24b      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ba:	4b6b      	ldr	r3, [pc, #428]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	22f8      	movs	r2, #248	; 0xf8
 80012c0:	4393      	bics	r3, r2
 80012c2:	0019      	movs	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	00da      	lsls	r2, r3, #3
 80012ca:	4b67      	ldr	r3, [pc, #412]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80012cc:	430a      	orrs	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d0:	e041      	b.n	8001356 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d024      	beq.n	8001324 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012da:	4b63      	ldr	r3, [pc, #396]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4b62      	ldr	r3, [pc, #392]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80012e0:	2101      	movs	r1, #1
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e6:	f7ff fb4d 	bl	8000984 <HAL_GetTick>
 80012ea:	0003      	movs	r3, r0
 80012ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f0:	f7ff fb48 	bl	8000984 <HAL_GetTick>
 80012f4:	0002      	movs	r2, r0
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e227      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001302:	4b59      	ldr	r3, [pc, #356]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2202      	movs	r2, #2
 8001308:	4013      	ands	r3, r2
 800130a:	d0f1      	beq.n	80012f0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b56      	ldr	r3, [pc, #344]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	22f8      	movs	r2, #248	; 0xf8
 8001312:	4393      	bics	r3, r2
 8001314:	0019      	movs	r1, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	00da      	lsls	r2, r3, #3
 800131c:	4b52      	ldr	r3, [pc, #328]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 800131e:	430a      	orrs	r2, r1
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	e018      	b.n	8001356 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001324:	4b50      	ldr	r3, [pc, #320]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b4f      	ldr	r3, [pc, #316]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 800132a:	2101      	movs	r1, #1
 800132c:	438a      	bics	r2, r1
 800132e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001330:	f7ff fb28 	bl	8000984 <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133a:	f7ff fb23 	bl	8000984 <HAL_GetTick>
 800133e:	0002      	movs	r2, r0
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e202      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134c:	4b46      	ldr	r3, [pc, #280]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2202      	movs	r2, #2
 8001352:	4013      	ands	r3, r2
 8001354:	d1f1      	bne.n	800133a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2208      	movs	r2, #8
 800135c:	4013      	ands	r3, r2
 800135e:	d036      	beq.n	80013ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d019      	beq.n	800139c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001368:	4b3f      	ldr	r3, [pc, #252]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 800136a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800136c:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 800136e:	2101      	movs	r1, #1
 8001370:	430a      	orrs	r2, r1
 8001372:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001374:	f7ff fb06 	bl	8000984 <HAL_GetTick>
 8001378:	0003      	movs	r3, r0
 800137a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800137e:	f7ff fb01 	bl	8000984 <HAL_GetTick>
 8001382:	0002      	movs	r2, r0
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e1e0      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001390:	4b35      	ldr	r3, [pc, #212]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	2202      	movs	r2, #2
 8001396:	4013      	ands	r3, r2
 8001398:	d0f1      	beq.n	800137e <HAL_RCC_OscConfig+0x242>
 800139a:	e018      	b.n	80013ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800139c:	4b32      	ldr	r3, [pc, #200]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 800139e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013a0:	4b31      	ldr	r3, [pc, #196]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80013a2:	2101      	movs	r1, #1
 80013a4:	438a      	bics	r2, r1
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a8:	f7ff faec 	bl	8000984 <HAL_GetTick>
 80013ac:	0003      	movs	r3, r0
 80013ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b2:	f7ff fae7 	bl	8000984 <HAL_GetTick>
 80013b6:	0002      	movs	r2, r0
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e1c6      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c4:	4b28      	ldr	r3, [pc, #160]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	2202      	movs	r2, #2
 80013ca:	4013      	ands	r3, r2
 80013cc:	d1f1      	bne.n	80013b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2204      	movs	r2, #4
 80013d4:	4013      	ands	r3, r2
 80013d6:	d100      	bne.n	80013da <HAL_RCC_OscConfig+0x29e>
 80013d8:	e0b4      	b.n	8001544 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013da:	201f      	movs	r0, #31
 80013dc:	183b      	adds	r3, r7, r0
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80013e4:	69da      	ldr	r2, [r3, #28]
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	055b      	lsls	r3, r3, #21
 80013ea:	4013      	ands	r3, r2
 80013ec:	d110      	bne.n	8001410 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80013f0:	69da      	ldr	r2, [r3, #28]
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80013f4:	2180      	movs	r1, #128	; 0x80
 80013f6:	0549      	lsls	r1, r1, #21
 80013f8:	430a      	orrs	r2, r1
 80013fa:	61da      	str	r2, [r3, #28]
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	69da      	ldr	r2, [r3, #28]
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	055b      	lsls	r3, r3, #21
 8001404:	4013      	ands	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800140a:	183b      	adds	r3, r7, r0
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <HAL_RCC_OscConfig+0x338>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4013      	ands	r3, r2
 800141a:	d11a      	bne.n	8001452 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_RCC_OscConfig+0x338>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_RCC_OscConfig+0x338>)
 8001422:	2180      	movs	r1, #128	; 0x80
 8001424:	0049      	lsls	r1, r1, #1
 8001426:	430a      	orrs	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800142a:	f7ff faab 	bl	8000984 <HAL_GetTick>
 800142e:	0003      	movs	r3, r0
 8001430:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001434:	f7ff faa6 	bl	8000984 <HAL_GetTick>
 8001438:	0002      	movs	r2, r0
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e185      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_RCC_OscConfig+0x338>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4013      	ands	r3, r2
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d10e      	bne.n	8001478 <HAL_RCC_OscConfig+0x33c>
 800145a:	4b03      	ldr	r3, [pc, #12]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 800145c:	6a1a      	ldr	r2, [r3, #32]
 800145e:	4b02      	ldr	r3, [pc, #8]	; (8001468 <HAL_RCC_OscConfig+0x32c>)
 8001460:	2101      	movs	r1, #1
 8001462:	430a      	orrs	r2, r1
 8001464:	621a      	str	r2, [r3, #32]
 8001466:	e035      	b.n	80014d4 <HAL_RCC_OscConfig+0x398>
 8001468:	40021000 	.word	0x40021000
 800146c:	fffeffff 	.word	0xfffeffff
 8001470:	fffbffff 	.word	0xfffbffff
 8001474:	40007000 	.word	0x40007000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10c      	bne.n	800149a <HAL_RCC_OscConfig+0x35e>
 8001480:	4bb6      	ldr	r3, [pc, #728]	; (800175c <HAL_RCC_OscConfig+0x620>)
 8001482:	6a1a      	ldr	r2, [r3, #32]
 8001484:	4bb5      	ldr	r3, [pc, #724]	; (800175c <HAL_RCC_OscConfig+0x620>)
 8001486:	2101      	movs	r1, #1
 8001488:	438a      	bics	r2, r1
 800148a:	621a      	str	r2, [r3, #32]
 800148c:	4bb3      	ldr	r3, [pc, #716]	; (800175c <HAL_RCC_OscConfig+0x620>)
 800148e:	6a1a      	ldr	r2, [r3, #32]
 8001490:	4bb2      	ldr	r3, [pc, #712]	; (800175c <HAL_RCC_OscConfig+0x620>)
 8001492:	2104      	movs	r1, #4
 8001494:	438a      	bics	r2, r1
 8001496:	621a      	str	r2, [r3, #32]
 8001498:	e01c      	b.n	80014d4 <HAL_RCC_OscConfig+0x398>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x380>
 80014a2:	4bae      	ldr	r3, [pc, #696]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80014a4:	6a1a      	ldr	r2, [r3, #32]
 80014a6:	4bad      	ldr	r3, [pc, #692]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80014a8:	2104      	movs	r1, #4
 80014aa:	430a      	orrs	r2, r1
 80014ac:	621a      	str	r2, [r3, #32]
 80014ae:	4bab      	ldr	r3, [pc, #684]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80014b0:	6a1a      	ldr	r2, [r3, #32]
 80014b2:	4baa      	ldr	r3, [pc, #680]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80014b4:	2101      	movs	r1, #1
 80014b6:	430a      	orrs	r2, r1
 80014b8:	621a      	str	r2, [r3, #32]
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0x398>
 80014bc:	4ba7      	ldr	r3, [pc, #668]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80014be:	6a1a      	ldr	r2, [r3, #32]
 80014c0:	4ba6      	ldr	r3, [pc, #664]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80014c2:	2101      	movs	r1, #1
 80014c4:	438a      	bics	r2, r1
 80014c6:	621a      	str	r2, [r3, #32]
 80014c8:	4ba4      	ldr	r3, [pc, #656]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80014ca:	6a1a      	ldr	r2, [r3, #32]
 80014cc:	4ba3      	ldr	r3, [pc, #652]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80014ce:	2104      	movs	r1, #4
 80014d0:	438a      	bics	r2, r1
 80014d2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d014      	beq.n	8001506 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014dc:	f7ff fa52 	bl	8000984 <HAL_GetTick>
 80014e0:	0003      	movs	r3, r0
 80014e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e4:	e009      	b.n	80014fa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014e6:	f7ff fa4d 	bl	8000984 <HAL_GetTick>
 80014ea:	0002      	movs	r2, r0
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	4a9b      	ldr	r2, [pc, #620]	; (8001760 <HAL_RCC_OscConfig+0x624>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e12b      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fa:	4b98      	ldr	r3, [pc, #608]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	2202      	movs	r2, #2
 8001500:	4013      	ands	r3, r2
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x3aa>
 8001504:	e013      	b.n	800152e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001506:	f7ff fa3d 	bl	8000984 <HAL_GetTick>
 800150a:	0003      	movs	r3, r0
 800150c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150e:	e009      	b.n	8001524 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001510:	f7ff fa38 	bl	8000984 <HAL_GetTick>
 8001514:	0002      	movs	r2, r0
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	4a91      	ldr	r2, [pc, #580]	; (8001760 <HAL_RCC_OscConfig+0x624>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e116      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001524:	4b8d      	ldr	r3, [pc, #564]	; (800175c <HAL_RCC_OscConfig+0x620>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	2202      	movs	r2, #2
 800152a:	4013      	ands	r3, r2
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800152e:	231f      	movs	r3, #31
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d105      	bne.n	8001544 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001538:	4b88      	ldr	r3, [pc, #544]	; (800175c <HAL_RCC_OscConfig+0x620>)
 800153a:	69da      	ldr	r2, [r3, #28]
 800153c:	4b87      	ldr	r3, [pc, #540]	; (800175c <HAL_RCC_OscConfig+0x620>)
 800153e:	4989      	ldr	r1, [pc, #548]	; (8001764 <HAL_RCC_OscConfig+0x628>)
 8001540:	400a      	ands	r2, r1
 8001542:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2210      	movs	r2, #16
 800154a:	4013      	ands	r3, r2
 800154c:	d063      	beq.n	8001616 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d12a      	bne.n	80015ac <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001556:	4b81      	ldr	r3, [pc, #516]	; (800175c <HAL_RCC_OscConfig+0x620>)
 8001558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800155a:	4b80      	ldr	r3, [pc, #512]	; (800175c <HAL_RCC_OscConfig+0x620>)
 800155c:	2104      	movs	r1, #4
 800155e:	430a      	orrs	r2, r1
 8001560:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001562:	4b7e      	ldr	r3, [pc, #504]	; (800175c <HAL_RCC_OscConfig+0x620>)
 8001564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001566:	4b7d      	ldr	r3, [pc, #500]	; (800175c <HAL_RCC_OscConfig+0x620>)
 8001568:	2101      	movs	r1, #1
 800156a:	430a      	orrs	r2, r1
 800156c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff fa09 	bl	8000984 <HAL_GetTick>
 8001572:	0003      	movs	r3, r0
 8001574:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001578:	f7ff fa04 	bl	8000984 <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e0e3      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800158a:	4b74      	ldr	r3, [pc, #464]	; (800175c <HAL_RCC_OscConfig+0x620>)
 800158c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158e:	2202      	movs	r2, #2
 8001590:	4013      	ands	r3, r2
 8001592:	d0f1      	beq.n	8001578 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001594:	4b71      	ldr	r3, [pc, #452]	; (800175c <HAL_RCC_OscConfig+0x620>)
 8001596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001598:	22f8      	movs	r2, #248	; 0xf8
 800159a:	4393      	bics	r3, r2
 800159c:	0019      	movs	r1, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	00da      	lsls	r2, r3, #3
 80015a4:	4b6d      	ldr	r3, [pc, #436]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80015a6:	430a      	orrs	r2, r1
 80015a8:	635a      	str	r2, [r3, #52]	; 0x34
 80015aa:	e034      	b.n	8001616 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	3305      	adds	r3, #5
 80015b2:	d111      	bne.n	80015d8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015b4:	4b69      	ldr	r3, [pc, #420]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80015b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b8:	4b68      	ldr	r3, [pc, #416]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80015ba:	2104      	movs	r1, #4
 80015bc:	438a      	bics	r2, r1
 80015be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015c0:	4b66      	ldr	r3, [pc, #408]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80015c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c4:	22f8      	movs	r2, #248	; 0xf8
 80015c6:	4393      	bics	r3, r2
 80015c8:	0019      	movs	r1, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	00da      	lsls	r2, r3, #3
 80015d0:	4b62      	ldr	r3, [pc, #392]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80015d2:	430a      	orrs	r2, r1
 80015d4:	635a      	str	r2, [r3, #52]	; 0x34
 80015d6:	e01e      	b.n	8001616 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015d8:	4b60      	ldr	r3, [pc, #384]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80015da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015dc:	4b5f      	ldr	r3, [pc, #380]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80015de:	2104      	movs	r1, #4
 80015e0:	430a      	orrs	r2, r1
 80015e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80015e4:	4b5d      	ldr	r3, [pc, #372]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80015e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e8:	4b5c      	ldr	r3, [pc, #368]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80015ea:	2101      	movs	r1, #1
 80015ec:	438a      	bics	r2, r1
 80015ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f0:	f7ff f9c8 	bl	8000984 <HAL_GetTick>
 80015f4:	0003      	movs	r3, r0
 80015f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015fa:	f7ff f9c3 	bl	8000984 <HAL_GetTick>
 80015fe:	0002      	movs	r2, r0
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e0a2      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800160c:	4b53      	ldr	r3, [pc, #332]	; (800175c <HAL_RCC_OscConfig+0x620>)
 800160e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001610:	2202      	movs	r2, #2
 8001612:	4013      	ands	r3, r2
 8001614:	d1f1      	bne.n	80015fa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d100      	bne.n	8001620 <HAL_RCC_OscConfig+0x4e4>
 800161e:	e097      	b.n	8001750 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001620:	4b4e      	ldr	r3, [pc, #312]	; (800175c <HAL_RCC_OscConfig+0x620>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	220c      	movs	r2, #12
 8001626:	4013      	ands	r3, r2
 8001628:	2b08      	cmp	r3, #8
 800162a:	d100      	bne.n	800162e <HAL_RCC_OscConfig+0x4f2>
 800162c:	e06b      	b.n	8001706 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d14c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001636:	4b49      	ldr	r3, [pc, #292]	; (800175c <HAL_RCC_OscConfig+0x620>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b48      	ldr	r3, [pc, #288]	; (800175c <HAL_RCC_OscConfig+0x620>)
 800163c:	494a      	ldr	r1, [pc, #296]	; (8001768 <HAL_RCC_OscConfig+0x62c>)
 800163e:	400a      	ands	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff f99f 	bl	8000984 <HAL_GetTick>
 8001646:	0003      	movs	r3, r0
 8001648:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164c:	f7ff f99a 	bl	8000984 <HAL_GetTick>
 8001650:	0002      	movs	r2, r0
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e079      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165e:	4b3f      	ldr	r3, [pc, #252]	; (800175c <HAL_RCC_OscConfig+0x620>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	049b      	lsls	r3, r3, #18
 8001666:	4013      	ands	r3, r2
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800166a:	4b3c      	ldr	r3, [pc, #240]	; (800175c <HAL_RCC_OscConfig+0x620>)
 800166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166e:	220f      	movs	r2, #15
 8001670:	4393      	bics	r3, r2
 8001672:	0019      	movs	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001678:	4b38      	ldr	r3, [pc, #224]	; (800175c <HAL_RCC_OscConfig+0x620>)
 800167a:	430a      	orrs	r2, r1
 800167c:	62da      	str	r2, [r3, #44]	; 0x2c
 800167e:	4b37      	ldr	r3, [pc, #220]	; (800175c <HAL_RCC_OscConfig+0x620>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4a3a      	ldr	r2, [pc, #232]	; (800176c <HAL_RCC_OscConfig+0x630>)
 8001684:	4013      	ands	r3, r2
 8001686:	0019      	movs	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	431a      	orrs	r2, r3
 8001692:	4b32      	ldr	r3, [pc, #200]	; (800175c <HAL_RCC_OscConfig+0x620>)
 8001694:	430a      	orrs	r2, r1
 8001696:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001698:	4b30      	ldr	r3, [pc, #192]	; (800175c <HAL_RCC_OscConfig+0x620>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b2f      	ldr	r3, [pc, #188]	; (800175c <HAL_RCC_OscConfig+0x620>)
 800169e:	2180      	movs	r1, #128	; 0x80
 80016a0:	0449      	lsls	r1, r1, #17
 80016a2:	430a      	orrs	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff f96d 	bl	8000984 <HAL_GetTick>
 80016aa:	0003      	movs	r3, r0
 80016ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff f968 	bl	8000984 <HAL_GetTick>
 80016b4:	0002      	movs	r2, r0
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e047      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016c2:	4b26      	ldr	r3, [pc, #152]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	049b      	lsls	r3, r3, #18
 80016ca:	4013      	ands	r3, r2
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0x574>
 80016ce:	e03f      	b.n	8001750 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80016d6:	4924      	ldr	r1, [pc, #144]	; (8001768 <HAL_RCC_OscConfig+0x62c>)
 80016d8:	400a      	ands	r2, r1
 80016da:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7ff f952 	bl	8000984 <HAL_GetTick>
 80016e0:	0003      	movs	r3, r0
 80016e2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e6:	f7ff f94d 	bl	8000984 <HAL_GetTick>
 80016ea:	0002      	movs	r2, r0
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e02c      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_RCC_OscConfig+0x620>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	049b      	lsls	r3, r3, #18
 8001700:	4013      	ands	r3, r2
 8001702:	d1f0      	bne.n	80016e6 <HAL_RCC_OscConfig+0x5aa>
 8001704:	e024      	b.n	8001750 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e01f      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_RCC_OscConfig+0x620>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_RCC_OscConfig+0x620>)
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	025b      	lsls	r3, r3, #9
 8001724:	401a      	ands	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	429a      	cmp	r2, r3
 800172c:	d10e      	bne.n	800174c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	220f      	movs	r2, #15
 8001732:	401a      	ands	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001738:	429a      	cmp	r2, r3
 800173a:	d107      	bne.n	800174c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	23f0      	movs	r3, #240	; 0xf0
 8001740:	039b      	lsls	r3, r3, #14
 8001742:	401a      	ands	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	0018      	movs	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	b008      	add	sp, #32
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	40021000 	.word	0x40021000
 8001760:	00001388 	.word	0x00001388
 8001764:	efffffff 	.word	0xefffffff
 8001768:	feffffff 	.word	0xfeffffff
 800176c:	ffc2ffff 	.word	0xffc2ffff

08001770 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0b3      	b.n	80018ec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001784:	4b5b      	ldr	r3, [pc, #364]	; (80018f4 <HAL_RCC_ClockConfig+0x184>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2201      	movs	r2, #1
 800178a:	4013      	ands	r3, r2
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d911      	bls.n	80017b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b58      	ldr	r3, [pc, #352]	; (80018f4 <HAL_RCC_ClockConfig+0x184>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2201      	movs	r2, #1
 8001798:	4393      	bics	r3, r2
 800179a:	0019      	movs	r1, r3
 800179c:	4b55      	ldr	r3, [pc, #340]	; (80018f4 <HAL_RCC_ClockConfig+0x184>)
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a4:	4b53      	ldr	r3, [pc, #332]	; (80018f4 <HAL_RCC_ClockConfig+0x184>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2201      	movs	r2, #1
 80017aa:	4013      	ands	r3, r2
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d001      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e09a      	b.n	80018ec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2202      	movs	r2, #2
 80017bc:	4013      	ands	r3, r2
 80017be:	d015      	beq.n	80017ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2204      	movs	r2, #4
 80017c6:	4013      	ands	r3, r2
 80017c8:	d006      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017ca:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <HAL_RCC_ClockConfig+0x188>)
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	4b4a      	ldr	r3, [pc, #296]	; (80018f8 <HAL_RCC_ClockConfig+0x188>)
 80017d0:	21e0      	movs	r1, #224	; 0xe0
 80017d2:	00c9      	lsls	r1, r1, #3
 80017d4:	430a      	orrs	r2, r1
 80017d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d8:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_RCC_ClockConfig+0x188>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	22f0      	movs	r2, #240	; 0xf0
 80017de:	4393      	bics	r3, r2
 80017e0:	0019      	movs	r1, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <HAL_RCC_ClockConfig+0x188>)
 80017e8:	430a      	orrs	r2, r1
 80017ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2201      	movs	r2, #1
 80017f2:	4013      	ands	r3, r2
 80017f4:	d040      	beq.n	8001878 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	4b3e      	ldr	r3, [pc, #248]	; (80018f8 <HAL_RCC_ClockConfig+0x188>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	029b      	lsls	r3, r3, #10
 8001806:	4013      	ands	r3, r2
 8001808:	d114      	bne.n	8001834 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e06e      	b.n	80018ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001816:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <HAL_RCC_ClockConfig+0x188>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	049b      	lsls	r3, r3, #18
 800181e:	4013      	ands	r3, r2
 8001820:	d108      	bne.n	8001834 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e062      	b.n	80018ec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001826:	4b34      	ldr	r3, [pc, #208]	; (80018f8 <HAL_RCC_ClockConfig+0x188>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2202      	movs	r2, #2
 800182c:	4013      	ands	r3, r2
 800182e:	d101      	bne.n	8001834 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e05b      	b.n	80018ec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001834:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <HAL_RCC_ClockConfig+0x188>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2203      	movs	r2, #3
 800183a:	4393      	bics	r3, r2
 800183c:	0019      	movs	r1, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <HAL_RCC_ClockConfig+0x188>)
 8001844:	430a      	orrs	r2, r1
 8001846:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001848:	f7ff f89c 	bl	8000984 <HAL_GetTick>
 800184c:	0003      	movs	r3, r0
 800184e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001850:	e009      	b.n	8001866 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001852:	f7ff f897 	bl	8000984 <HAL_GetTick>
 8001856:	0002      	movs	r2, r0
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	4a27      	ldr	r2, [pc, #156]	; (80018fc <HAL_RCC_ClockConfig+0x18c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e042      	b.n	80018ec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001866:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_RCC_ClockConfig+0x188>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	220c      	movs	r2, #12
 800186c:	401a      	ands	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	429a      	cmp	r2, r3
 8001876:	d1ec      	bne.n	8001852 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <HAL_RCC_ClockConfig+0x184>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2201      	movs	r2, #1
 800187e:	4013      	ands	r3, r2
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d211      	bcs.n	80018aa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <HAL_RCC_ClockConfig+0x184>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2201      	movs	r2, #1
 800188c:	4393      	bics	r3, r2
 800188e:	0019      	movs	r1, r3
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_RCC_ClockConfig+0x184>)
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001898:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <HAL_RCC_ClockConfig+0x184>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2201      	movs	r2, #1
 800189e:	4013      	ands	r3, r2
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d001      	beq.n	80018aa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e020      	b.n	80018ec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2204      	movs	r2, #4
 80018b0:	4013      	ands	r3, r2
 80018b2:	d009      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_RCC_ClockConfig+0x188>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	4a11      	ldr	r2, [pc, #68]	; (8001900 <HAL_RCC_ClockConfig+0x190>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68da      	ldr	r2, [r3, #12]
 80018c2:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_RCC_ClockConfig+0x188>)
 80018c4:	430a      	orrs	r2, r1
 80018c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018c8:	f000 f820 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80018cc:	0001      	movs	r1, r0
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_RCC_ClockConfig+0x188>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	091b      	lsrs	r3, r3, #4
 80018d4:	220f      	movs	r2, #15
 80018d6:	4013      	ands	r3, r2
 80018d8:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <HAL_RCC_ClockConfig+0x194>)
 80018da:	5cd3      	ldrb	r3, [r2, r3]
 80018dc:	000a      	movs	r2, r1
 80018de:	40da      	lsrs	r2, r3
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x198>)
 80018e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7ff f807 	bl	80008f8 <HAL_InitTick>
  
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b004      	add	sp, #16
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40022000 	.word	0x40022000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	00001388 	.word	0x00001388
 8001900:	fffff8ff 	.word	0xfffff8ff
 8001904:	08002800 	.word	0x08002800
 8001908:	20000000 	.word	0x20000000

0800190c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	220c      	movs	r2, #12
 8001930:	4013      	ands	r3, r2
 8001932:	2b04      	cmp	r3, #4
 8001934:	d002      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x30>
 8001936:	2b08      	cmp	r3, #8
 8001938:	d003      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0x36>
 800193a:	e02c      	b.n	8001996 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800193e:	613b      	str	r3, [r7, #16]
      break;
 8001940:	e02c      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	0c9b      	lsrs	r3, r3, #18
 8001946:	220f      	movs	r2, #15
 8001948:	4013      	ands	r3, r2
 800194a:	4a19      	ldr	r2, [pc, #100]	; (80019b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800194c:	5cd3      	ldrb	r3, [r2, r3]
 800194e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001954:	220f      	movs	r2, #15
 8001956:	4013      	ands	r3, r2
 8001958:	4a16      	ldr	r2, [pc, #88]	; (80019b4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	025b      	lsls	r3, r3, #9
 8001964:	4013      	ands	r3, r2
 8001966:	d009      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	4810      	ldr	r0, [pc, #64]	; (80019ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800196c:	f7fe fbcc 	bl	8000108 <__udivsi3>
 8001970:	0003      	movs	r3, r0
 8001972:	001a      	movs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4353      	muls	r3, r2
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	e009      	b.n	8001990 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	000a      	movs	r2, r1
 8001980:	0152      	lsls	r2, r2, #5
 8001982:	1a52      	subs	r2, r2, r1
 8001984:	0193      	lsls	r3, r2, #6
 8001986:	1a9b      	subs	r3, r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	185b      	adds	r3, r3, r1
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	613b      	str	r3, [r7, #16]
      break;
 8001994:	e002      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001998:	613b      	str	r3, [r7, #16]
      break;
 800199a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800199c:	693b      	ldr	r3, [r7, #16]
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b006      	add	sp, #24
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	40021000 	.word	0x40021000
 80019ac:	007a1200 	.word	0x007a1200
 80019b0:	08002818 	.word	0x08002818
 80019b4:	08002828 	.word	0x08002828

080019b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019bc:	4b02      	ldr	r3, [pc, #8]	; (80019c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	20000000 	.word	0x20000000

080019cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80019d0:	f7ff fff2 	bl	80019b8 <HAL_RCC_GetHCLKFreq>
 80019d4:	0001      	movs	r1, r0
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	0a1b      	lsrs	r3, r3, #8
 80019dc:	2207      	movs	r2, #7
 80019de:	4013      	ands	r3, r2
 80019e0:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019e2:	5cd3      	ldrb	r3, [r2, r3]
 80019e4:	40d9      	lsrs	r1, r3
 80019e6:	000b      	movs	r3, r1
}    
 80019e8:	0018      	movs	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	40021000 	.word	0x40021000
 80019f4:	08002810 	.word	0x08002810

080019f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	025b      	lsls	r3, r3, #9
 8001a10:	4013      	ands	r3, r2
 8001a12:	d100      	bne.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a14:	e08e      	b.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a16:	2017      	movs	r0, #23
 8001a18:	183b      	adds	r3, r7, r0
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a1e:	4b57      	ldr	r3, [pc, #348]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a20:	69da      	ldr	r2, [r3, #28]
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	055b      	lsls	r3, r3, #21
 8001a26:	4013      	ands	r3, r2
 8001a28:	d110      	bne.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	4b54      	ldr	r3, [pc, #336]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a2c:	69da      	ldr	r2, [r3, #28]
 8001a2e:	4b53      	ldr	r3, [pc, #332]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	0549      	lsls	r1, r1, #21
 8001a34:	430a      	orrs	r2, r1
 8001a36:	61da      	str	r2, [r3, #28]
 8001a38:	4b50      	ldr	r3, [pc, #320]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a3a:	69da      	ldr	r2, [r3, #28]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	055b      	lsls	r3, r3, #21
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a46:	183b      	adds	r3, r7, r0
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4c:	4b4c      	ldr	r3, [pc, #304]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4013      	ands	r3, r2
 8001a56:	d11a      	bne.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a58:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b48      	ldr	r3, [pc, #288]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a5e:	2180      	movs	r1, #128	; 0x80
 8001a60:	0049      	lsls	r1, r1, #1
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a66:	f7fe ff8d 	bl	8000984 <HAL_GetTick>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6e:	e008      	b.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a70:	f7fe ff88 	bl	8000984 <HAL_GetTick>
 8001a74:	0002      	movs	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b64      	cmp	r3, #100	; 0x64
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e077      	b.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a82:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a8e:	4b3b      	ldr	r3, [pc, #236]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a90:	6a1a      	ldr	r2, [r3, #32]
 8001a92:	23c0      	movs	r3, #192	; 0xc0
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4013      	ands	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d034      	beq.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	23c0      	movs	r3, #192	; 0xc0
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d02c      	beq.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ab0:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4a33      	ldr	r2, [pc, #204]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aba:	4b30      	ldr	r3, [pc, #192]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001abc:	6a1a      	ldr	r2, [r3, #32]
 8001abe:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ac0:	2180      	movs	r1, #128	; 0x80
 8001ac2:	0249      	lsls	r1, r1, #9
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ac8:	4b2c      	ldr	r3, [pc, #176]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aca:	6a1a      	ldr	r2, [r3, #32]
 8001acc:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ace:	492e      	ldr	r1, [pc, #184]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ad4:	4b29      	ldr	r3, [pc, #164]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7fe ff4f 	bl	8000984 <HAL_GetTick>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aea:	e009      	b.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aec:	f7fe ff4a 	bl	8000984 <HAL_GetTick>
 8001af0:	0002      	movs	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	4a25      	ldr	r2, [pc, #148]	; (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e038      	b.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b00:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	2202      	movs	r2, #2
 8001b06:	4013      	ands	r3, r2
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b0a:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4a1d      	ldr	r2, [pc, #116]	; (8001b84 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	0019      	movs	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b1e:	2317      	movs	r3, #23
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d105      	bne.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b2a:	69da      	ldr	r2, [r3, #28]
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b2e:	4918      	ldr	r1, [pc, #96]	; (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d009      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	2203      	movs	r2, #3
 8001b44:	4393      	bics	r3, r2
 8001b46:	0019      	movs	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2220      	movs	r2, #32
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d009      	beq.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	2210      	movs	r2, #16
 8001b62:	4393      	bics	r3, r2
 8001b64:	0019      	movs	r1, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	0018      	movs	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b006      	add	sp, #24
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40007000 	.word	0x40007000
 8001b84:	fffffcff 	.word	0xfffffcff
 8001b88:	fffeffff 	.word	0xfffeffff
 8001b8c:	00001388 	.word	0x00001388
 8001b90:	efffffff 	.word	0xefffffff

08001b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e042      	b.n	8001c2c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	223d      	movs	r2, #61	; 0x3d
 8001baa:	5c9b      	ldrb	r3, [r3, r2]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d107      	bne.n	8001bc2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	223c      	movs	r2, #60	; 0x3c
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f7fe fdb1 	bl	8000724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	223d      	movs	r2, #61	; 0x3d
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	0010      	movs	r0, r2
 8001bd6:	f000 f9af 	bl	8001f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2246      	movs	r2, #70	; 0x46
 8001bde:	2101      	movs	r1, #1
 8001be0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	223e      	movs	r2, #62	; 0x3e
 8001be6:	2101      	movs	r1, #1
 8001be8:	5499      	strb	r1, [r3, r2]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	223f      	movs	r2, #63	; 0x3f
 8001bee:	2101      	movs	r1, #1
 8001bf0:	5499      	strb	r1, [r3, r2]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2240      	movs	r2, #64	; 0x40
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	5499      	strb	r1, [r3, r2]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2241      	movs	r2, #65	; 0x41
 8001bfe:	2101      	movs	r1, #1
 8001c00:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2242      	movs	r2, #66	; 0x42
 8001c06:	2101      	movs	r1, #1
 8001c08:	5499      	strb	r1, [r3, r2]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2243      	movs	r2, #67	; 0x43
 8001c0e:	2101      	movs	r1, #1
 8001c10:	5499      	strb	r1, [r3, r2]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2244      	movs	r2, #68	; 0x44
 8001c16:	2101      	movs	r1, #1
 8001c18:	5499      	strb	r1, [r3, r2]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2245      	movs	r2, #69	; 0x45
 8001c1e:	2101      	movs	r1, #1
 8001c20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	223d      	movs	r2, #61	; 0x3d
 8001c26:	2101      	movs	r1, #1
 8001c28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b002      	add	sp, #8
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	223d      	movs	r2, #61	; 0x3d
 8001c40:	5c9b      	ldrb	r3, [r3, r2]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d001      	beq.n	8001c4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e036      	b.n	8001cba <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	223d      	movs	r2, #61	; 0x3d
 8001c50:	2102      	movs	r1, #2
 8001c52:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2101      	movs	r1, #1
 8001c60:	430a      	orrs	r2, r1
 8001c62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <HAL_TIM_Base_Start_IT+0x90>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00a      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x50>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	05db      	lsls	r3, r3, #23
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d004      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x50>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <HAL_TIM_Base_Start_IT+0x94>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d111      	bne.n	8001ca8 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d010      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca6:	e007      	b.n	8001cb8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	0018      	movs	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b004      	add	sp, #16
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	40012c00 	.word	0x40012c00
 8001cc8:	40000400 	.word	0x40000400

08001ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	4013      	ands	r3, r2
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d124      	bne.n	8001d2c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d11d      	bne.n	8001d2c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	4252      	negs	r2, r2
 8001cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2203      	movs	r2, #3
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d004      	beq.n	8001d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f000 f8fa 	bl	8001f08 <HAL_TIM_IC_CaptureCallback>
 8001d14:	e007      	b.n	8001d26 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 f8ed 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f000 f8f9 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	2204      	movs	r2, #4
 8001d34:	4013      	ands	r3, r2
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d125      	bne.n	8001d86 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2204      	movs	r2, #4
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d11e      	bne.n	8001d86 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2205      	movs	r2, #5
 8001d4e:	4252      	negs	r2, r2
 8001d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2202      	movs	r2, #2
 8001d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699a      	ldr	r2, [r3, #24]
 8001d5e:	23c0      	movs	r3, #192	; 0xc0
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4013      	ands	r3, r2
 8001d64:	d004      	beq.n	8001d70 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f000 f8cd 	bl	8001f08 <HAL_TIM_IC_CaptureCallback>
 8001d6e:	e007      	b.n	8001d80 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	0018      	movs	r0, r3
 8001d74:	f000 f8c0 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f000 f8cc 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	2208      	movs	r2, #8
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d124      	bne.n	8001dde <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d11d      	bne.n	8001dde <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2209      	movs	r2, #9
 8001da8:	4252      	negs	r2, r2
 8001daa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2204      	movs	r2, #4
 8001db0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	2203      	movs	r2, #3
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d004      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f000 f8a1 	bl	8001f08 <HAL_TIM_IC_CaptureCallback>
 8001dc6:	e007      	b.n	8001dd8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f000 f894 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 f8a0 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	2210      	movs	r2, #16
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d125      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2210      	movs	r2, #16
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b10      	cmp	r3, #16
 8001df8:	d11e      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2211      	movs	r2, #17
 8001e00:	4252      	negs	r2, r2
 8001e02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2208      	movs	r2, #8
 8001e08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	69da      	ldr	r2, [r3, #28]
 8001e10:	23c0      	movs	r3, #192	; 0xc0
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4013      	ands	r3, r2
 8001e16:	d004      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f000 f874 	bl	8001f08 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e007      	b.n	8001e32 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	0018      	movs	r0, r3
 8001e26:	f000 f867 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f000 f873 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d10f      	bne.n	8001e66 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d108      	bne.n	8001e66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	4252      	negs	r2, r2
 8001e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	0018      	movs	r0, r3
 8001e62:	f7fe fbd1 	bl	8000608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	2280      	movs	r2, #128	; 0x80
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b80      	cmp	r3, #128	; 0x80
 8001e72:	d10f      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2280      	movs	r2, #128	; 0x80
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b80      	cmp	r3, #128	; 0x80
 8001e80:	d108      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2281      	movs	r2, #129	; 0x81
 8001e88:	4252      	negs	r2, r2
 8001e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f000 f8d0 	bl	8002034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2240      	movs	r2, #64	; 0x40
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b40      	cmp	r3, #64	; 0x40
 8001ea0:	d10f      	bne.n	8001ec2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	2240      	movs	r2, #64	; 0x40
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b40      	cmp	r3, #64	; 0x40
 8001eae:	d108      	bne.n	8001ec2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2241      	movs	r2, #65	; 0x41
 8001eb6:	4252      	negs	r2, r2
 8001eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f000 f833 	bl	8001f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b20      	cmp	r3, #32
 8001ece:	d10f      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d108      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2221      	movs	r2, #33	; 0x21
 8001ee4:	4252      	negs	r2, r2
 8001ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	0018      	movs	r0, r3
 8001eec:	f000 f89a 	bl	8002024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ef0:	46c0      	nop			; (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b002      	add	sp, #8
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f00:	46c0      	nop			; (mov r8, r8)
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b002      	add	sp, #8
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b002      	add	sp, #8
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f20:	46c0      	nop			; (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b002      	add	sp, #8
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f30:	46c0      	nop			; (mov r8, r8)
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b002      	add	sp, #8
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a30      	ldr	r2, [pc, #192]	; (800200c <TIM_Base_SetConfig+0xd4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d008      	beq.n	8001f62 <TIM_Base_SetConfig+0x2a>
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	05db      	lsls	r3, r3, #23
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d003      	beq.n	8001f62 <TIM_Base_SetConfig+0x2a>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a2c      	ldr	r2, [pc, #176]	; (8002010 <TIM_Base_SetConfig+0xd8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d108      	bne.n	8001f74 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2270      	movs	r2, #112	; 0x70
 8001f66:	4393      	bics	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a25      	ldr	r2, [pc, #148]	; (800200c <TIM_Base_SetConfig+0xd4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d014      	beq.n	8001fa6 <TIM_Base_SetConfig+0x6e>
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	05db      	lsls	r3, r3, #23
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d00f      	beq.n	8001fa6 <TIM_Base_SetConfig+0x6e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a21      	ldr	r2, [pc, #132]	; (8002010 <TIM_Base_SetConfig+0xd8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00b      	beq.n	8001fa6 <TIM_Base_SetConfig+0x6e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a20      	ldr	r2, [pc, #128]	; (8002014 <TIM_Base_SetConfig+0xdc>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <TIM_Base_SetConfig+0x6e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a1f      	ldr	r2, [pc, #124]	; (8002018 <TIM_Base_SetConfig+0xe0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d003      	beq.n	8001fa6 <TIM_Base_SetConfig+0x6e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a1e      	ldr	r2, [pc, #120]	; (800201c <TIM_Base_SetConfig+0xe4>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d108      	bne.n	8001fb8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <TIM_Base_SetConfig+0xe8>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	4393      	bics	r3, r2
 8001fbe:	001a      	movs	r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <TIM_Base_SetConfig+0xd4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d007      	beq.n	8001ff6 <TIM_Base_SetConfig+0xbe>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <TIM_Base_SetConfig+0xe0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d003      	beq.n	8001ff6 <TIM_Base_SetConfig+0xbe>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a0a      	ldr	r2, [pc, #40]	; (800201c <TIM_Base_SetConfig+0xe4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d103      	bne.n	8001ffe <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	615a      	str	r2, [r3, #20]
}
 8002004:	46c0      	nop			; (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	b004      	add	sp, #16
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40012c00 	.word	0x40012c00
 8002010:	40000400 	.word	0x40000400
 8002014:	40002000 	.word	0x40002000
 8002018:	40014400 	.word	0x40014400
 800201c:	40014800 	.word	0x40014800
 8002020:	fffffcff 	.word	0xfffffcff

08002024 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800202c:	46c0      	nop			; (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	b002      	add	sp, #8
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b002      	add	sp, #8
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e044      	b.n	80020e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800205a:	2b00      	cmp	r3, #0
 800205c:	d107      	bne.n	800206e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2278      	movs	r2, #120	; 0x78
 8002062:	2100      	movs	r1, #0
 8002064:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	0018      	movs	r0, r3
 800206a:	f7fe fb83 	bl	8000774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2224      	movs	r2, #36	; 0x24
 8002072:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2101      	movs	r1, #1
 8002080:	438a      	bics	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	0018      	movs	r0, r3
 8002088:	f000 f830 	bl	80020ec <UART_SetConfig>
 800208c:	0003      	movs	r3, r0
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e024      	b.n	80020e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f000 f94b 	bl	800233c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	490d      	ldr	r1, [pc, #52]	; (80020e8 <HAL_UART_Init+0xa4>)
 80020b2:	400a      	ands	r2, r1
 80020b4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	212a      	movs	r1, #42	; 0x2a
 80020c2:	438a      	bics	r2, r1
 80020c4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2101      	movs	r1, #1
 80020d2:	430a      	orrs	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	0018      	movs	r0, r3
 80020da:	f000 f9e3 	bl	80024a4 <UART_CheckIdleState>
 80020de:	0003      	movs	r3, r0
}
 80020e0:	0018      	movs	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b002      	add	sp, #8
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	ffffb7ff 	.word	0xffffb7ff

080020ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80020f4:	231e      	movs	r3, #30
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	4313      	orrs	r3, r2
 8002112:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a83      	ldr	r2, [pc, #524]	; (8002328 <UART_SetConfig+0x23c>)
 800211c:	4013      	ands	r3, r2
 800211e:	0019      	movs	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	430a      	orrs	r2, r1
 8002128:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a7e      	ldr	r2, [pc, #504]	; (800232c <UART_SetConfig+0x240>)
 8002132:	4013      	ands	r3, r2
 8002134:	0019      	movs	r1, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4a75      	ldr	r2, [pc, #468]	; (8002330 <UART_SetConfig+0x244>)
 800215a:	4013      	ands	r3, r2
 800215c:	0019      	movs	r1, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	430a      	orrs	r2, r1
 8002166:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002168:	4b72      	ldr	r3, [pc, #456]	; (8002334 <UART_SetConfig+0x248>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	2203      	movs	r2, #3
 800216e:	4013      	ands	r3, r2
 8002170:	2b03      	cmp	r3, #3
 8002172:	d00d      	beq.n	8002190 <UART_SetConfig+0xa4>
 8002174:	d81b      	bhi.n	80021ae <UART_SetConfig+0xc2>
 8002176:	2b02      	cmp	r3, #2
 8002178:	d014      	beq.n	80021a4 <UART_SetConfig+0xb8>
 800217a:	d818      	bhi.n	80021ae <UART_SetConfig+0xc2>
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <UART_SetConfig+0x9a>
 8002180:	2b01      	cmp	r3, #1
 8002182:	d00a      	beq.n	800219a <UART_SetConfig+0xae>
 8002184:	e013      	b.n	80021ae <UART_SetConfig+0xc2>
 8002186:	231f      	movs	r3, #31
 8002188:	18fb      	adds	r3, r7, r3
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
 800218e:	e012      	b.n	80021b6 <UART_SetConfig+0xca>
 8002190:	231f      	movs	r3, #31
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	2202      	movs	r2, #2
 8002196:	701a      	strb	r2, [r3, #0]
 8002198:	e00d      	b.n	80021b6 <UART_SetConfig+0xca>
 800219a:	231f      	movs	r3, #31
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	2204      	movs	r2, #4
 80021a0:	701a      	strb	r2, [r3, #0]
 80021a2:	e008      	b.n	80021b6 <UART_SetConfig+0xca>
 80021a4:	231f      	movs	r3, #31
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	2208      	movs	r2, #8
 80021aa:	701a      	strb	r2, [r3, #0]
 80021ac:	e003      	b.n	80021b6 <UART_SetConfig+0xca>
 80021ae:	231f      	movs	r3, #31
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2210      	movs	r2, #16
 80021b4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69da      	ldr	r2, [r3, #28]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	021b      	lsls	r3, r3, #8
 80021be:	429a      	cmp	r2, r3
 80021c0:	d15c      	bne.n	800227c <UART_SetConfig+0x190>
  {
    switch (clocksource)
 80021c2:	231f      	movs	r3, #31
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d015      	beq.n	80021f8 <UART_SetConfig+0x10c>
 80021cc:	dc18      	bgt.n	8002200 <UART_SetConfig+0x114>
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d00d      	beq.n	80021ee <UART_SetConfig+0x102>
 80021d2:	dc15      	bgt.n	8002200 <UART_SetConfig+0x114>
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <UART_SetConfig+0xf2>
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d005      	beq.n	80021e8 <UART_SetConfig+0xfc>
 80021dc:	e010      	b.n	8002200 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021de:	f7ff fbf5 	bl	80019cc <HAL_RCC_GetPCLK1Freq>
 80021e2:	0003      	movs	r3, r0
 80021e4:	61bb      	str	r3, [r7, #24]
        break;
 80021e6:	e012      	b.n	800220e <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021e8:	4b53      	ldr	r3, [pc, #332]	; (8002338 <UART_SetConfig+0x24c>)
 80021ea:	61bb      	str	r3, [r7, #24]
        break;
 80021ec:	e00f      	b.n	800220e <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021ee:	f7ff fb8d 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80021f2:	0003      	movs	r3, r0
 80021f4:	61bb      	str	r3, [r7, #24]
        break;
 80021f6:	e00a      	b.n	800220e <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	61bb      	str	r3, [r7, #24]
        break;
 80021fe:	e006      	b.n	800220e <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002204:	231e      	movs	r3, #30
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
        break;
 800220c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d100      	bne.n	8002216 <UART_SetConfig+0x12a>
 8002214:	e07a      	b.n	800230c <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	005a      	lsls	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	085b      	lsrs	r3, r3, #1
 8002220:	18d2      	adds	r2, r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	0019      	movs	r1, r3
 8002228:	0010      	movs	r0, r2
 800222a:	f7fd ff6d 	bl	8000108 <__udivsi3>
 800222e:	0003      	movs	r3, r0
 8002230:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	2b0f      	cmp	r3, #15
 8002236:	d91c      	bls.n	8002272 <UART_SetConfig+0x186>
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	025b      	lsls	r3, r3, #9
 800223e:	429a      	cmp	r2, r3
 8002240:	d217      	bcs.n	8002272 <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	b29a      	uxth	r2, r3
 8002246:	200e      	movs	r0, #14
 8002248:	183b      	adds	r3, r7, r0
 800224a:	210f      	movs	r1, #15
 800224c:	438a      	bics	r2, r1
 800224e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	085b      	lsrs	r3, r3, #1
 8002254:	b29b      	uxth	r3, r3
 8002256:	2207      	movs	r2, #7
 8002258:	4013      	ands	r3, r2
 800225a:	b299      	uxth	r1, r3
 800225c:	183b      	adds	r3, r7, r0
 800225e:	183a      	adds	r2, r7, r0
 8002260:	8812      	ldrh	r2, [r2, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	183a      	adds	r2, r7, r0
 800226c:	8812      	ldrh	r2, [r2, #0]
 800226e:	60da      	str	r2, [r3, #12]
 8002270:	e04c      	b.n	800230c <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8002272:	231e      	movs	r3, #30
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	2201      	movs	r2, #1
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	e047      	b.n	800230c <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 800227c:	231f      	movs	r3, #31
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b08      	cmp	r3, #8
 8002284:	d015      	beq.n	80022b2 <UART_SetConfig+0x1c6>
 8002286:	dc18      	bgt.n	80022ba <UART_SetConfig+0x1ce>
 8002288:	2b04      	cmp	r3, #4
 800228a:	d00d      	beq.n	80022a8 <UART_SetConfig+0x1bc>
 800228c:	dc15      	bgt.n	80022ba <UART_SetConfig+0x1ce>
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <UART_SetConfig+0x1ac>
 8002292:	2b02      	cmp	r3, #2
 8002294:	d005      	beq.n	80022a2 <UART_SetConfig+0x1b6>
 8002296:	e010      	b.n	80022ba <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002298:	f7ff fb98 	bl	80019cc <HAL_RCC_GetPCLK1Freq>
 800229c:	0003      	movs	r3, r0
 800229e:	61bb      	str	r3, [r7, #24]
        break;
 80022a0:	e012      	b.n	80022c8 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022a2:	4b25      	ldr	r3, [pc, #148]	; (8002338 <UART_SetConfig+0x24c>)
 80022a4:	61bb      	str	r3, [r7, #24]
        break;
 80022a6:	e00f      	b.n	80022c8 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022a8:	f7ff fb30 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80022ac:	0003      	movs	r3, r0
 80022ae:	61bb      	str	r3, [r7, #24]
        break;
 80022b0:	e00a      	b.n	80022c8 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	61bb      	str	r3, [r7, #24]
        break;
 80022b8:	e006      	b.n	80022c8 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80022be:	231e      	movs	r3, #30
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
        break;
 80022c6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d01e      	beq.n	800230c <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	085a      	lsrs	r2, r3, #1
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	18d2      	adds	r2, r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	0019      	movs	r1, r3
 80022de:	0010      	movs	r0, r2
 80022e0:	f7fd ff12 	bl	8000108 <__udivsi3>
 80022e4:	0003      	movs	r3, r0
 80022e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2b0f      	cmp	r3, #15
 80022ec:	d90a      	bls.n	8002304 <UART_SetConfig+0x218>
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	025b      	lsls	r3, r3, #9
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d205      	bcs.n	8002304 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	e003      	b.n	800230c <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8002304:	231e      	movs	r3, #30
 8002306:	18fb      	adds	r3, r7, r3
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002318:	231e      	movs	r3, #30
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	781b      	ldrb	r3, [r3, #0]
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	b008      	add	sp, #32
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	ffff69f3 	.word	0xffff69f3
 800232c:	ffffcfff 	.word	0xffffcfff
 8002330:	fffff4ff 	.word	0xfffff4ff
 8002334:	40021000 	.word	0x40021000
 8002338:	007a1200 	.word	0x007a1200

0800233c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	2201      	movs	r2, #1
 800234a:	4013      	ands	r3, r2
 800234c:	d00b      	beq.n	8002366 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4a4a      	ldr	r2, [pc, #296]	; (8002480 <UART_AdvFeatureConfig+0x144>)
 8002356:	4013      	ands	r3, r2
 8002358:	0019      	movs	r1, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	2202      	movs	r2, #2
 800236c:	4013      	ands	r3, r2
 800236e:	d00b      	beq.n	8002388 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4a43      	ldr	r2, [pc, #268]	; (8002484 <UART_AdvFeatureConfig+0x148>)
 8002378:	4013      	ands	r3, r2
 800237a:	0019      	movs	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	2204      	movs	r2, #4
 800238e:	4013      	ands	r3, r2
 8002390:	d00b      	beq.n	80023aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4a3b      	ldr	r2, [pc, #236]	; (8002488 <UART_AdvFeatureConfig+0x14c>)
 800239a:	4013      	ands	r3, r2
 800239c:	0019      	movs	r1, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	2208      	movs	r2, #8
 80023b0:	4013      	ands	r3, r2
 80023b2:	d00b      	beq.n	80023cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4a34      	ldr	r2, [pc, #208]	; (800248c <UART_AdvFeatureConfig+0x150>)
 80023bc:	4013      	ands	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	2210      	movs	r2, #16
 80023d2:	4013      	ands	r3, r2
 80023d4:	d00b      	beq.n	80023ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	4a2c      	ldr	r2, [pc, #176]	; (8002490 <UART_AdvFeatureConfig+0x154>)
 80023de:	4013      	ands	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	2220      	movs	r2, #32
 80023f4:	4013      	ands	r3, r2
 80023f6:	d00b      	beq.n	8002410 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	4a25      	ldr	r2, [pc, #148]	; (8002494 <UART_AdvFeatureConfig+0x158>)
 8002400:	4013      	ands	r3, r2
 8002402:	0019      	movs	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	2240      	movs	r2, #64	; 0x40
 8002416:	4013      	ands	r3, r2
 8002418:	d01d      	beq.n	8002456 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	4a1d      	ldr	r2, [pc, #116]	; (8002498 <UART_AdvFeatureConfig+0x15c>)
 8002422:	4013      	ands	r3, r2
 8002424:	0019      	movs	r1, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	035b      	lsls	r3, r3, #13
 800243a:	429a      	cmp	r2, r3
 800243c:	d10b      	bne.n	8002456 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a15      	ldr	r2, [pc, #84]	; (800249c <UART_AdvFeatureConfig+0x160>)
 8002446:	4013      	ands	r3, r2
 8002448:	0019      	movs	r1, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	4013      	ands	r3, r2
 800245e:	d00b      	beq.n	8002478 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4a0e      	ldr	r2, [pc, #56]	; (80024a0 <UART_AdvFeatureConfig+0x164>)
 8002468:	4013      	ands	r3, r2
 800246a:	0019      	movs	r1, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	605a      	str	r2, [r3, #4]
  }
}
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	b002      	add	sp, #8
 800247e:	bd80      	pop	{r7, pc}
 8002480:	fffdffff 	.word	0xfffdffff
 8002484:	fffeffff 	.word	0xfffeffff
 8002488:	fffbffff 	.word	0xfffbffff
 800248c:	ffff7fff 	.word	0xffff7fff
 8002490:	ffffefff 	.word	0xffffefff
 8002494:	ffffdfff 	.word	0xffffdfff
 8002498:	ffefffff 	.word	0xffefffff
 800249c:	ff9fffff 	.word	0xff9fffff
 80024a0:	fff7ffff 	.word	0xfff7ffff

080024a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b092      	sub	sp, #72	; 0x48
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2284      	movs	r2, #132	; 0x84
 80024b0:	2100      	movs	r1, #0
 80024b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80024b4:	f7fe fa66 	bl	8000984 <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2208      	movs	r2, #8
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d12c      	bne.n	8002524 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80024ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024cc:	2280      	movs	r2, #128	; 0x80
 80024ce:	0391      	lsls	r1, r2, #14
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	4a46      	ldr	r2, [pc, #280]	; (80025ec <UART_CheckIdleState+0x148>)
 80024d4:	9200      	str	r2, [sp, #0]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f000 f88c 	bl	80025f4 <UART_WaitOnFlagUntilTimeout>
 80024dc:	1e03      	subs	r3, r0, #0
 80024de:	d021      	beq.n	8002524 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024e0:	f3ef 8310 	mrs	r3, PRIMASK
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80024e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80024ea:	2301      	movs	r3, #1
 80024ec:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	f383 8810 	msr	PRIMASK, r3
}
 80024f4:	46c0      	nop			; (mov r8, r8)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2180      	movs	r1, #128	; 0x80
 8002502:	438a      	bics	r2, r1
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250c:	f383 8810 	msr	PRIMASK, r3
}
 8002510:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2278      	movs	r2, #120	; 0x78
 800251c:	2100      	movs	r1, #0
 800251e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e05f      	b.n	80025e4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2204      	movs	r2, #4
 800252c:	4013      	ands	r3, r2
 800252e:	2b04      	cmp	r3, #4
 8002530:	d146      	bne.n	80025c0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	03d1      	lsls	r1, r2, #15
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4a2c      	ldr	r2, [pc, #176]	; (80025ec <UART_CheckIdleState+0x148>)
 800253c:	9200      	str	r2, [sp, #0]
 800253e:	2200      	movs	r2, #0
 8002540:	f000 f858 	bl	80025f4 <UART_WaitOnFlagUntilTimeout>
 8002544:	1e03      	subs	r3, r0, #0
 8002546:	d03b      	beq.n	80025c0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002548:	f3ef 8310 	mrs	r3, PRIMASK
 800254c:	60fb      	str	r3, [r7, #12]
  return(result);
 800254e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
 8002552:	2301      	movs	r3, #1
 8002554:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f383 8810 	msr	PRIMASK, r3
}
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4921      	ldr	r1, [pc, #132]	; (80025f0 <UART_CheckIdleState+0x14c>)
 800256a:	400a      	ands	r2, r1
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002570:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f383 8810 	msr	PRIMASK, r3
}
 8002578:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800257a:	f3ef 8310 	mrs	r3, PRIMASK
 800257e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002580:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002582:	633b      	str	r3, [r7, #48]	; 0x30
 8002584:	2301      	movs	r3, #1
 8002586:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f383 8810 	msr	PRIMASK, r3
}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2101      	movs	r1, #1
 800259c:	438a      	bics	r2, r1
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	f383 8810 	msr	PRIMASK, r3
}
 80025aa:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2280      	movs	r2, #128	; 0x80
 80025b0:	2120      	movs	r1, #32
 80025b2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2278      	movs	r2, #120	; 0x78
 80025b8:	2100      	movs	r1, #0
 80025ba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e011      	b.n	80025e4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2220      	movs	r2, #32
 80025c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2280      	movs	r2, #128	; 0x80
 80025ca:	2120      	movs	r1, #32
 80025cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2278      	movs	r2, #120	; 0x78
 80025de:	2100      	movs	r1, #0
 80025e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b010      	add	sp, #64	; 0x40
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	01ffffff 	.word	0x01ffffff
 80025f0:	fffffedf 	.word	0xfffffedf

080025f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	1dfb      	adds	r3, r7, #7
 8002602:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002604:	e04b      	b.n	800269e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	3301      	adds	r3, #1
 800260a:	d048      	beq.n	800269e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260c:	f7fe f9ba 	bl	8000984 <HAL_GetTick>
 8002610:	0002      	movs	r2, r0
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	429a      	cmp	r2, r3
 800261a:	d302      	bcc.n	8002622 <UART_WaitOnFlagUntilTimeout+0x2e>
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e04b      	b.n	80026be <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2204      	movs	r2, #4
 800262e:	4013      	ands	r3, r2
 8002630:	d035      	beq.n	800269e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	2208      	movs	r2, #8
 800263a:	4013      	ands	r3, r2
 800263c:	2b08      	cmp	r3, #8
 800263e:	d111      	bne.n	8002664 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2208      	movs	r2, #8
 8002646:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	0018      	movs	r0, r3
 800264c:	f000 f83c 	bl	80026c8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2284      	movs	r2, #132	; 0x84
 8002654:	2108      	movs	r1, #8
 8002656:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2278      	movs	r2, #120	; 0x78
 800265c:	2100      	movs	r1, #0
 800265e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e02c      	b.n	80026be <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	69da      	ldr	r2, [r3, #28]
 800266a:	2380      	movs	r3, #128	; 0x80
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	401a      	ands	r2, r3
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	429a      	cmp	r2, r3
 8002676:	d112      	bne.n	800269e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2280      	movs	r2, #128	; 0x80
 800267e:	0112      	lsls	r2, r2, #4
 8002680:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	0018      	movs	r0, r3
 8002686:	f000 f81f 	bl	80026c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2284      	movs	r2, #132	; 0x84
 800268e:	2120      	movs	r1, #32
 8002690:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2278      	movs	r2, #120	; 0x78
 8002696:	2100      	movs	r1, #0
 8002698:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e00f      	b.n	80026be <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	4013      	ands	r3, r2
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	425a      	negs	r2, r3
 80026ae:	4153      	adcs	r3, r2
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	001a      	movs	r2, r3
 80026b4:	1dfb      	adds	r3, r7, #7
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d0a4      	beq.n	8002606 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b004      	add	sp, #16
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08e      	sub	sp, #56	; 0x38
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026d0:	f3ef 8310 	mrs	r3, PRIMASK
 80026d4:	617b      	str	r3, [r7, #20]
  return(result);
 80026d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
 80026da:	2301      	movs	r3, #1
 80026dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f383 8810 	msr	PRIMASK, r3
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4926      	ldr	r1, [pc, #152]	; (800278c <UART_EndRxTransfer+0xc4>)
 80026f2:	400a      	ands	r2, r1
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f383 8810 	msr	PRIMASK, r3
}
 8002700:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002702:	f3ef 8310 	mrs	r3, PRIMASK
 8002706:	623b      	str	r3, [r7, #32]
  return(result);
 8002708:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800270a:	633b      	str	r3, [r7, #48]	; 0x30
 800270c:	2301      	movs	r3, #1
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	f383 8810 	msr	PRIMASK, r3
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2101      	movs	r1, #1
 8002724:	438a      	bics	r2, r1
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272e:	f383 8810 	msr	PRIMASK, r3
}
 8002732:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002738:	2b01      	cmp	r3, #1
 800273a:	d118      	bne.n	800276e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800273c:	f3ef 8310 	mrs	r3, PRIMASK
 8002740:	60bb      	str	r3, [r7, #8]
  return(result);
 8002742:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002746:	2301      	movs	r3, #1
 8002748:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f383 8810 	msr	PRIMASK, r3
}
 8002750:	46c0      	nop			; (mov r8, r8)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2110      	movs	r1, #16
 800275e:	438a      	bics	r2, r1
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f383 8810 	msr	PRIMASK, r3
}
 800276c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2280      	movs	r2, #128	; 0x80
 8002772:	2120      	movs	r1, #32
 8002774:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	46bd      	mov	sp, r7
 8002786:	b00e      	add	sp, #56	; 0x38
 8002788:	bd80      	pop	{r7, pc}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	fffffedf 	.word	0xfffffedf

08002790 <memset>:
 8002790:	0003      	movs	r3, r0
 8002792:	1882      	adds	r2, r0, r2
 8002794:	4293      	cmp	r3, r2
 8002796:	d100      	bne.n	800279a <memset+0xa>
 8002798:	4770      	bx	lr
 800279a:	7019      	strb	r1, [r3, #0]
 800279c:	3301      	adds	r3, #1
 800279e:	e7f9      	b.n	8002794 <memset+0x4>

080027a0 <__libc_init_array>:
 80027a0:	b570      	push	{r4, r5, r6, lr}
 80027a2:	2600      	movs	r6, #0
 80027a4:	4c0c      	ldr	r4, [pc, #48]	; (80027d8 <__libc_init_array+0x38>)
 80027a6:	4d0d      	ldr	r5, [pc, #52]	; (80027dc <__libc_init_array+0x3c>)
 80027a8:	1b64      	subs	r4, r4, r5
 80027aa:	10a4      	asrs	r4, r4, #2
 80027ac:	42a6      	cmp	r6, r4
 80027ae:	d109      	bne.n	80027c4 <__libc_init_array+0x24>
 80027b0:	2600      	movs	r6, #0
 80027b2:	f000 f819 	bl	80027e8 <_init>
 80027b6:	4c0a      	ldr	r4, [pc, #40]	; (80027e0 <__libc_init_array+0x40>)
 80027b8:	4d0a      	ldr	r5, [pc, #40]	; (80027e4 <__libc_init_array+0x44>)
 80027ba:	1b64      	subs	r4, r4, r5
 80027bc:	10a4      	asrs	r4, r4, #2
 80027be:	42a6      	cmp	r6, r4
 80027c0:	d105      	bne.n	80027ce <__libc_init_array+0x2e>
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
 80027c4:	00b3      	lsls	r3, r6, #2
 80027c6:	58eb      	ldr	r3, [r5, r3]
 80027c8:	4798      	blx	r3
 80027ca:	3601      	adds	r6, #1
 80027cc:	e7ee      	b.n	80027ac <__libc_init_array+0xc>
 80027ce:	00b3      	lsls	r3, r6, #2
 80027d0:	58eb      	ldr	r3, [r5, r3]
 80027d2:	4798      	blx	r3
 80027d4:	3601      	adds	r6, #1
 80027d6:	e7f2      	b.n	80027be <__libc_init_array+0x1e>
 80027d8:	08002838 	.word	0x08002838
 80027dc:	08002838 	.word	0x08002838
 80027e0:	0800283c 	.word	0x0800283c
 80027e4:	08002838 	.word	0x08002838

080027e8 <_init>:
 80027e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ee:	bc08      	pop	{r3}
 80027f0:	469e      	mov	lr, r3
 80027f2:	4770      	bx	lr

080027f4 <_fini>:
 80027f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027fa:	bc08      	pop	{r3}
 80027fc:	469e      	mov	lr, r3
 80027fe:	4770      	bx	lr
